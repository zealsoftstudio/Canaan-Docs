import{_ as t,r as o,o as c,c as l,d as a,w as p,e,a as n}from"./app-21fd3c9b.js";const i={},u=e(`<h1 id="_4-linux进程间通信" tabindex="-1"><a class="header-anchor" href="#_4-linux进程间通信" aria-hidden="true">#</a> 4 Linux进程间通信</h1><h2 id="_4-1-初识进程" tabindex="-1"><a class="header-anchor" href="#_4-1-初识进程" aria-hidden="true">#</a> 4.1 初识进程</h2><p>​ 在日常工作/学习中，读者可能会经常听到如下一些词：“作业”，“任务”，“开了几个线程”，“创建了几个进程”，“多线程”，“多进程”等等。如果系统学习过《操作系统》这门课程，相信大家对这些概念都十分了解。但对很多电子、电气工程专业（或是其他非计算机专业）的同学来说，由于这门课程不是必修课程，我们脑海中可能就不会有这些概念，听到这些概念的时候就会不知所云，不过没有关系，先让我们克服对这些概念的恐惧。比如小时候刚开始学习数学的时候，先从正整数/自然数开始学习，然后逐步接触到分数、小数、负数、有理数、无理数、实数，再到复数等等。这些操作系统中的概念也是这样，让我们从初级阶段开始学起，逐步攻克这些新概念背后的真正含义。</p><p>​ 本篇主要讨论linux进程间通信方式，这个主题拆分开始来看，分为三个部分：linux(操作系统)、进程、进程间通信。Linux操作系统本篇暂且不谈，我们主要来关注后两个部分：进程，以及进程间通信。在探讨进程间通信之前，让我们先关注一个知识点概念----进程。</p><h3 id="_4-1-1-进程的概念" tabindex="-1"><a class="header-anchor" href="#_4-1-1-进程的概念" aria-hidden="true">#</a> 4.1.1 进程的概念</h3><h4 id="_4-1-1-1-程序" tabindex="-1"><a class="header-anchor" href="#_4-1-1-1-程序" aria-hidden="true">#</a> 4.1.1.1 程序</h4><p>​ 在探讨进程之前，先思考一个问题：什么是程序？</p><p>​ 嵌入式软件工程师每天的工作/学习内容就是看C/C++源代码、分析C/C++源代码、编写C/C++源代码（有人会说，应该还有最重要的调试程序，我每天的工作日常是三分写程序，七分调试程序，调试程序去哪里了，大家别着急，这里先卖一个关子）。这些独立的源代码就是一个个程序。它们有一个共同特点，在我们阅读、分析、编写的过程中，此刻都是静态的，它们存储在我们的硬盘上、公司的服务器上。</p><p>​ 程序：存储在磁盘上的指令和数据的有序集合。如下就是一个程序，此刻它正安静地躺在硬盘上。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">02</span>
<span class="token number">03</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">04</span><span class="token punctuation">{</span>
<span class="token number">05</span>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">06</span>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">07</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-1-2-进程" tabindex="-1"><a class="header-anchor" href="#_4-1-1-2-进程" aria-hidden="true">#</a> 4.1.1.2 进程</h4><p>​ 有了上面程序的概念，先直接给出进程的定义。</p><p>​ 进程：<strong>具有一定独立功能的程序在一个数据集合上的一次动态执行过程</strong>。它是动态的，包括创建、调度、执行和消亡（由操作系统完成的）。</p><p>​ 定义中的每个词分开来我们都能理解，但是组合到一起成为一个句子时，我们又不知道什么意思了。图灵奖得主Pascal之父尼古拉斯·沃斯，提出过一个著名的公式：程序=算法+数据结构。所谓算法就是解决一个问题的方法，程序就是使用算法对特定数据进行处理，这些数据是一个广义上的概念，不单单指像1,2,3,…等等这样的数据。因此用更直白的语言来说，程序开始运行，对数据进行分析处理的过程就是一个进程。</p><h4 id="_4-1-1-3-进程和程序的联系" tabindex="-1"><a class="header-anchor" href="#_4-1-1-3-进程和程序的联系" aria-hidden="true">#</a> 4.1.1.3 进程和程序的联系</h4><ol><li><p>程序是产生进程的基础。</p></li><li><p>程序的每次执行构成不同的进程。</p></li><li><p>进程是程序功能的体现（还记得之前提到的程序员日常工作中的一个重要事项----调试程序吗？调试的过程实际上就是程序的执行，就是本次程序功能的体现，因此这个时候它就是一个进程）。</p></li><li><p>通过多次执行，一个程序可对应多个进程；通过调用关系，一个进程可包含多个程序。</p></li></ol><h4 id="_4-1-1-4-进程和程序的区别" tabindex="-1"><a class="header-anchor" href="#_4-1-1-4-进程和程序的区别" aria-hidden="true">#</a> 4.1.1.4 进程和程序的区别</h4><table><thead><tr><th></th><th style="text-align:left;">程序</th><th>进程</th></tr></thead><tbody><tr><td>状态</td><td style="text-align:left;">静态的，是有序代码的集合</td><td>动态的，是程序功能的执行过程</td></tr><tr><td>生命期</td><td style="text-align:left;">永久的，长久保存在存储设备上</td><td>暂时的，一个程序执行结束，则它对应的进程结束</td></tr></tbody></table><p>下图反应了从程序到进程的变化过程。</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image001.png" alt="ProcessCommunication_Image001"></p><p>我们以一个生活中的例子来加深对进程和程序的理解：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1.</span>有一位计算机科学家，他的女儿要过生日了，他准备给女儿做一个生日蛋糕，于是他去找了一本菜谱，跟着菜谱学习做蛋糕。

菜谱<span class="token operator">=</span>程序  科学家<span class="token operator">=</span>CPU  做蛋糕的原材料<span class="token operator">=</span>数据  做蛋糕的过程<span class="token operator">=</span>进程

<span class="token number">2.</span>科学家正在做蛋糕的时候，突然他的小儿子跑过来，说他的手被扎破了，于是科学家又去找了一本医疗手册，给小儿子处理伤口，处理完伤口之后，继续做生日蛋糕

医疗手册<span class="token operator">=</span>新程序  给小儿子处理伤口<span class="token operator">=</span>新进程

从做蛋糕切换到优先包扎伤口<span class="token operator">=</span>进程切换  处理完伤口继续做生日蛋糕<span class="token operator">=</span>进程恢复
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 介绍到这里，希望读者对进程已经建立起一些基础概念了，有关进程的深入部分，我们在这里暂且先不介绍，比如进程的组成包括哪些（代码段，用户数据段，系统数据段）？进程的类型有哪些？进程的状态有哪些等等？这些深入内容，在我们掌握了进程的基础知识之后，读者有兴趣的话，可以查阅相关书籍资料。</p><h3 id="_4-1-2-进程的操作-创建、结束、回收" tabindex="-1"><a class="header-anchor" href="#_4-1-2-进程的操作-创建、结束、回收" aria-hidden="true">#</a> 4.1.2 进程的操作（创建、结束、回收）</h3><h4 id="_4-1-2-1-创建进程" tabindex="-1"><a class="header-anchor" href="#_4-1-2-1-创建进程" aria-hidden="true">#</a> 4.1.2.1 创建进程</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>使用fork函数来创建一个进程
头文件<span class="token operator">:</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
函数原型<span class="token operator">:</span> <span class="token class-name">pid_t</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
返回值<span class="token operator">:</span> 成功时，父进程返回子进程的进程号<span class="token punctuation">(</span><span class="token operator">&gt;</span><span class="token number">0</span>的非零整数<span class="token punctuation">)</span>，子进程中返回<span class="token number">0</span><span class="token punctuation">;</span>通过fork函数的返回值区分父子进程。
父进程<span class="token operator">:</span> 执行fork函数的进程。
子进程<span class="token operator">:</span> 父进程调用fork函数之后，生成的新进程。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 请重点注意：这个函数的返回值和我们接触的绝大部分函数的返回值不一样。</p><p>​ 一般地，一个函数的返回值只有一个值，但是该函数的返回值却有两个。实际上关于这个函数的返回值究竟有几个，可以换一种方式来理解，因为这个函数执行之后，系统中会存在两个进程----父进程和子进程，在每个进程中都返回了一个值，所以给用户的感觉就是返回了两个值。</p><p>进程的特点：</p><ol><li><p>在linux中，一个进程必须是另外一个进程的子进程，或者说一个进程必须有父进程，但是可以没有子进程。</p></li><li><p>子进程继承了父进程的内容，包括父进程的代码，变量，pcb，甚至包括当前PC值。在父进程中，PC值指向当前fork函数的下一条指令地址，因此子进程也是从fork函数的下一条指令开始执行。父子进程的执行顺序是不确定的，可能子进程先执行，也可能父进程先执行，取决于当前系统的调度。</p></li><li><p>父子进程有独立的地址空间、独立的代码空间，互不影响，就算父子进程有同名的全局变量，但是由于它们处在不同的地址空间，因此不能共享。</p></li><li><p>子进程结束之后，必须由它的父进程回收它的一切资源，否则就会成为僵尸进程。</p></li><li><p>如果父进程先结束，子进程会成为孤儿进程，它会被INIT进程收养，INIT进程是内核启动之后，首先被创建的进程。</p></li></ol><p><strong>Tips：</strong></p><p>​ 在linux下，当我们不熟悉某个系统接口API函数时（比如不知道调用这个函数需要包含的头文件，不知道这个函数的每个参数的意义等等），我们可以在ubuntu下使用man命令来查看这个函数的说明。</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image002.png" alt="ProcessCommunication_Image002"></p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image003.png" alt="ProcessCommunication_Image003"></p><p>示例程序（参考：jz2440\\process\\1th_create_process\\create_process.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 创建一个子进程
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> 
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> 
<span class="token number">16</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">17</span> <span class="token punctuation">{</span>
<span class="token number">18</span>     <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>
<span class="token number">19</span> 
<span class="token number">20</span>     pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建子进程</span>
<span class="token number">21</span> 
<span class="token number">22</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 子进程</span>
<span class="token number">23</span>         <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">24</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">25</span>             <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is child process i=%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">27</span>         <span class="token punctuation">}</span>
<span class="token number">28</span>     <span class="token punctuation">}</span>
<span class="token number">29</span>     
<span class="token number">30</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 父进程</span>
<span class="token number">31</span>         <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">32</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">33</span>             <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">34</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is parent process i=%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>         <span class="token punctuation">}</span>
<span class="token number">36</span>     <span class="token punctuation">}</span>
<span class="token number">37</span> 
<span class="token number">38</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//不让进程结束，以便我们查看进程的一些状态信息</span>
<span class="token number">39</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">40</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><p>​ 在jz2440开发板上实验，读者首先需要创建好NFS文件系统，jz2440开发板从网络文件系统启动，以便运行在ubuntu上编译好的可执行文件，关于如何搭建NFS文件系统请参考视频教程《u-boot_内核_根文件系统(ARM裸机1期加强版与2期驱动大全间的衔接)》。读者也可以在ubuntu上执行，将编译器从“arm-linux-gcc”换成“gcc”即可。</p><ul><li>编译程序</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc create_process<span class="token punctuation">.</span>c <span class="token operator">-</span>o create_process
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>将可执行文件test拷贝到NFS文件系统对应的目录下</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp create_process <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在jz2440开发板的串口下此时能看到该可执行文件</li></ul><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image004.png" alt="ProcessCommunication_Image004"></p><ul><li><p>执行可执行文件</p><p>​ ”&amp;”表示在后台执行，这样我们可以继续在串口控制台下敲入命令，控制台能够接收到输入字符并作出响应；如果不加”&amp;”，表示在前台执行，控制台不能对输入字符作出响应。</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>create_process <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image005.png" alt="ProcessCommunication_Image005"></p><ul><li>top命令查看进程状态</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>top
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image006.png" alt="ProcessCommunication_Image006"></p><p>​ 发现此时确实存在两个进程create_process，其中一个进程PID是777(它的父进程PID是776)，另外一个进程PID是776(它的父进程PID是770)。</p><h4 id="_4-1-2-2-结束进程" tabindex="-1"><a class="header-anchor" href="#_4-1-2-2-结束进程" aria-hidden="true">#</a> 4.1.2.2 结束进程</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>使用exit函数来结束一个进程
头文件<span class="token operator">:</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
函数原型<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token function">exit</span> <span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>使用_exit函数来结束一个进程
头文件<span class="token operator">:</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
函数原型<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 两个函数的区别是：exit结束进程时会刷新缓冲区，_exit不会；</p><p>​ 这两个退出函数和return函数又有什么区别呢？exit和 _ exit函数是返回给操作系统的，return函数是当前函数返回，返回到调用它的函数中，如果正好是在main函数中，return函数也返回给了操作系统，这个时候return和exit、_exit起到了类似的作用。</p><p>程序实验：验证exit和_exit的区别</p><p>示例1：使用exit退出（参考：jz2440\\process\\2th_exit_process\\exit_process.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 使用exit退出当前进程
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> 
<span class="token number">13</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">14</span> <span class="token punctuation">{</span>
<span class="token number">15</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">16</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;will exit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">17</span>     <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用exit退出</span>
<span class="token number">18</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例2：使用_exit退出（参考：jz2440\\process\\3th_exit_process\\exit_process.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 使用_exit退出当前进程
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> 
<span class="token number">13</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">14</span> <span class="token punctuation">{</span>
<span class="token number">15</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">16</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;will exit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">17</span>     <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用_exit退出</span>
<span class="token number">18</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在两个示例程序中，第15行比第16行的打印语句多了一个“\\n”，它会强制将待打印的字符刷新到缓冲区，为了对比exit和_exit的区别，在第16行中就没有加上“\\n”，按照上面两个退出函数的区别，示例1应该会同时打印“hello world”和“will exit”，示例2程序只会打印“hello world”，不会打印“will exit”，那么到底是不是这样呢？我们在jz2440下验证一下。</p><p><strong>JZ2440实验</strong></p><p><strong>示例1</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc exit_process<span class="token punctuation">.</span>c <span class="token operator">-</span>o exit_process
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp exit_process <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>exit_process
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果，确实同时打印了“hello world”和“will exit”</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image008.png" alt="ProcessCommunication_Image008"></p><h4 id="_4-1-2-3-回收进程" tabindex="-1"><a class="header-anchor" href="#_4-1-2-3-回收进程" aria-hidden="true">#</a> 4.1.2.3 回收进程</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>使用wait函数来回收一个进程
头文件<span class="token operator">:</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
	   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>
函数原型<span class="token operator">:</span> <span class="token class-name">pid_t</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
返回值<span class="token operator">:</span>  成功返回子进程的进程号，失败返回<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>使用waitpid函数来回收一个进程
头文件<span class="token operator">:</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
	   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>
函数原型<span class="token operator">:</span> <span class="token class-name">pid_t</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>status<span class="token punctuation">,</span> <span class="token keyword">int</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
返回值<span class="token operator">:</span>  成功返回子进程的进程号，失败返回<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序示例：子进程退出，父进程回收子进程（参考：jz2440\\process\\4th_exit_wait\\exit_wait.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 使用exit退出子进程，父进程使用waitpid回收子进程的资源
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>wait<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> 
<span class="token number">16</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">17</span> <span class="token punctuation">{</span>
<span class="token number">18</span> 	<span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">19</span> 	<span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>
<span class="token number">20</span> 
<span class="token number">21</span> 	pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">22</span> 	<span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//子进程</span>
<span class="token number">23</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;fork\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">24</span> 		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">25</span> 	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//父进程</span>
<span class="token number">26</span> 		pid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">27</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;status=0x%x\\n&quot;</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">28</span> 	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token number">29</span> 		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fork\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span> 	<span class="token punctuation">}</span>
<span class="token number">31</span> 
<span class="token number">32</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">33</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc exit_wait<span class="token punctuation">.</span>c <span class="token operator">-</span>o exit_wait
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp exit_wait <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>exit_wait
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image009.png" alt="ProcessCommunication_Image009"></p><h2 id="_4-2-进程为什么需要通信" tabindex="-1"><a class="header-anchor" href="#_4-2-进程为什么需要通信" aria-hidden="true">#</a> 4.2 进程为什么需要通信</h2><p>​ 先让我们看如下两个简单的程序，这两个程序中都有一个同名全局变量“global”，唯一的区别是这个全局变量的初始值不同。<strong>说明：以下两个示例程序是为了让我们理解进程的一个特点，因此实验环境是Ubuntu虚拟机</strong>。</p><p>程序1：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">02</span> <span class="token keyword">int</span> global <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">03</span>
<span class="token number">04</span> <span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">05</span> <span class="token punctuation">{</span>
<span class="token number">06</span> 	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>
<span class="token number">07</span> 	<span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">08</span> <span class="token punctuation">}</span>
<span class="token number">09</span>
<span class="token number">10</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">11</span> <span class="token punctuation">{</span>
<span class="token number">12</span> 	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">13</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;global=%d\\n&quot;</span><span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">14</span> 		<span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">15</span> 	<span class="token punctuation">}</span>
<span class="token number">16</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">17</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序2：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">02</span> <span class="token keyword">int</span> global <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token number">03</span>
<span class="token number">04</span> <span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">05</span> <span class="token punctuation">{</span>
<span class="token number">06</span> 	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>
<span class="token number">07</span> 	<span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">08</span> <span class="token punctuation">}</span>
<span class="token number">09</span>
<span class="token number">10</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">11</span> <span class="token punctuation">{</span>
<span class="token number">12</span> 	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">13</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;global=%d\\n&quot;</span><span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">14</span> 		<span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">15</span> 	<span class="token punctuation">}</span>
<span class="token number">16</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">17</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个程序的唯一区别如下红框所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image010.png" alt="ProcessCommunication_Image010"></p><ul><li>编译程序</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>gcc test1<span class="token punctuation">.</span>c <span class="token operator">-</span>o test1
gcc test2<span class="token punctuation">.</span>c <span class="token operator">-</span>o test2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行程序</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>test1
<span class="token punctuation">.</span><span class="token operator">/</span>test2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image011.png" alt="ProcessCommunication_Image011"></p>`,99),r=n("p",null,"程序1运行结果",-1),k=n("p",null,[n("img",{src:"http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image012.png",alt:"ProcessCommunication_Image012"})],-1),d=n("p",null,"程序2运行结果",-1),m=e(`<p>​ 我们发现，两个程序运行之后，当前进程中的全局变量global的值并不会改变，它不会被改变成另外一个进程中的值，由此引出的进程的一个特点：**进程资源的唯一性，不共享性，它不能访问别的进程中的数据(地址空间)，也不能被别的进程访问本身的数据(地址空间)。**每个进程对其他进程而言，就是一个黑盒(后面读者学习到线程的时候，会发现在这个特性上，线程是有别于进程的)。</p><p>​ 那么为什么会这样呢？这是因为操作系统为了保证系统的安全（进程A奔溃不会影响进程B，进程B仍然会继续运行），它会为每个进程分配特定的地址空间，每个进程只能在这个特定的地址空间执行指令、访问数据，如下图所示。程序需要访问某个变量时，都是通过变量地址去访问该变量的，在不同的进程中，同名变量对应不同的地址(处在当前进程地址空间范围内)，进程无法访问分配给它的地址范围之外的地址空间，自然就无法获得其他进程中的变量值。</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image013.png" alt="ProcessCommunication_Image013"></p><p>​ 进程间为何需要通信呢？从上面的两个示例程序中，可以得知：<strong>不同进程之间无法互相访问对方的地址空间</strong>。但是在我们实际的项目开发中，为了实现各种各样的功能，不同进程之间一定需要数据交互，那么我们应该如何实现进程间数据交互呢？这就是进程间通信的目的：<strong>实现不同进程之间的数据交互</strong>。</p><p>​ 在linux下，内存空间被划分为用户空间和内核空间，应用程序开发人员开发的应用程序都存在于用户空间，绝大部分进程都处在用户空间；驱动程序开发人员开发的驱动程序都存在于内核空间。</p><p>​ 在用户空间，不同进程不能互相访问对方的资源，因此，在用户空间是无法实现进程间通信的。为了实现进程间通信，必须在内核空间，由内核提供相应的接口来实现，linux系统提供了如下四种进程通信方式。</p><table><thead><tr><th>进程间通信方式</th><th>分类</th></tr></thead><tbody><tr><td>管道通信</td><td>无名管道、有名管道</td></tr><tr><td>IPC通信</td><td>共享内存、消息队列、信号灯</td></tr><tr><td>信号通信</td><td>信号发送、接收、处理</td></tr><tr><td>socket通信</td><td>本地socket通信，远程socket通信</td></tr></tbody></table><p>​ linux有一个最基本的思想----“<strong>一切皆文件</strong>”，内核中实现进程间通信也是基于文件读写思想。不同进程通过操作内核里的同一个内核对象来实现进程间通信，如下图所示，这个内核对象可以是管道、共享内存、消息队列、信号灯、信号，以及socket。</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image014.png" alt="ProcessCommunication_Image014"></p><h2 id="_4-3-进程通信之管道通信" tabindex="-1"><a class="header-anchor" href="#_4-3-进程通信之管道通信" aria-hidden="true">#</a> 4.3 进程通信之管道通信</h2><p>管道分为无名管道和有名管道，其特点如下</p><table><thead><tr><th>类型</th><th>特点</th></tr></thead><tbody><tr><td>无名管道</td><td>在文件系统中没有文件节点，<strong>只能用于具有亲缘关系的进程间通信(比如父子进程)</strong></td></tr><tr><td>有名管道</td><td>在文件系统中有文件节点，<strong>适用于在同一系统中的任意两个进程间通信</strong></td></tr></tbody></table><h3 id="_4-3-1-无名管道" tabindex="-1"><a class="header-anchor" href="#_4-3-1-无名管道" aria-hidden="true">#</a> 4.3.1 无名管道</h3><h4 id="_4-3-1-1-特点" tabindex="-1"><a class="header-anchor" href="#_4-3-1-1-特点" aria-hidden="true">#</a> 4.3.1.1 特点</h4><p>​ 无名管道实际上就是一个单向队列，<strong>在一端进行读操作，在另一端进行写操作</strong>，所以需要两个文件描述符，描述符fd[0]指向读端，fd[1]指向写端。它是一个特殊的文件，所以无法使用简单open函数创建，我们需要pipe函数来创建。它只能用于具有亲缘关系的两个进程间通信。</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image015.png" alt="ProcessCommunication_Image015"></p><h4 id="_4-3-1-2-创建无名管道" tabindex="-1"><a class="header-anchor" href="#_4-3-1-2-创建无名管道" aria-hidden="true">#</a> 4.3.1.2 创建无名管道</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1.</span>头文件#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

<span class="token number">2.</span>函数原型<span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token number">3.</span>参数<span class="token operator">:</span> 管道文件描述符，有两个文件描述符，分别是fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>和fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>，管道有一个读端fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>和一个写端fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token number">4.</span>返回值： <span class="token number">0</span>表示成功；<span class="token operator">-</span><span class="token number">1</span>表示失败
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-1-3-读、写、关闭管道" tabindex="-1"><a class="header-anchor" href="#_4-3-1-3-读、写、关闭管道" aria-hidden="true">#</a> 4.3.1.3 读、写、关闭管道</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1.</span>读管道 read，读管道对应的文件描述符是fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token number">2.</span>写管道 write，写管道对应的文件描述符是fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token number">3.</span>关闭管道 close，因为创建管道时，会同时创建两个管道文件描述符，分别是读管道文件描述符fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>和写管道文件描述符fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>，因此需要关闭两个文件描述符
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-1-4-无名管道实现进程间通信" tabindex="-1"><a class="header-anchor" href="#_4-3-1-4-无名管道实现进程间通信" aria-hidden="true">#</a> 4.3.1.4 无名管道实现进程间通信</h4><p><strong>程序示例1</strong></p><p>（参考：jz2440\\process_pipe\\1th_write_pipe\\my_pipe_write.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 创建一个管道，并向管道中写入字符串，然后从管道中读取，验证
03               能否读取之前写入的字符串
04  * 输入参数： 无
05  * 输出参数： 无
06  * 返 回 值： 无
07  * 修改日期        版本号     修改人          修改内容
08  * -----------------------------------------------
09  * 2020/05/16       V1.0      zh(ryan)        创建
10  ***********************************************************************/</span>
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> 
<span class="token number">15</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">16</span> <span class="token punctuation">{</span>
<span class="token number">17</span>     <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">18</span>     <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">19</span>     <span class="token keyword">char</span> write_buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello linux&quot;</span><span class="token punctuation">;</span>
<span class="token number">20</span>     <span class="token keyword">char</span> read_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">21</span>     
<span class="token number">22</span>     ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">23</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">24</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create pipe fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">25</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">26</span>     <span class="token punctuation">}</span>
<span class="token number">27</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create pipe sucess fd[0]=%d fd[1]=%d\\n&quot;</span><span class="token punctuation">,</span> fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">28</span>     
<span class="token number">29</span>     <span class="token comment">//向文件描述符fd[1]写管道</span>
<span class="token number">30</span>     <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> write_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">31</span>     
<span class="token number">32</span>     <span class="token comment">//从文件描述符fd[0]读管道</span>
<span class="token number">33</span>     <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> read_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">34</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;read_buf=%s\\n&quot;</span><span class="token punctuation">,</span> read_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>     
<span class="token number">36</span>     <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>     <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">38</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">39</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc my_pipe_write<span class="token punctuation">.</span>c <span class="token operator">-</span>o my_pipe_write
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp my_pipe_write <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>my_pipe_write
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果，发现能够正确读到管道中的字符串” Hello linux”。</p><p><strong>程序示例2</strong></p><p>​ 在利用无名管道实现进程间通信之前，先让我们看一下如下的程序：我们知道父子进程的执行顺序是不确定的，是受系统调度的。我们在父进程中创建一个子进程，我们想让父进程控制子进程的运行，父进程设置“process_inter=1”，当“process_inter=1”时，子进程才会执行打印操作，否则子进程不执行打印操作。我们看如下的程序能够实现我们的目的吗？</p><p>（参考：jz2440\\process_pipe\\2th_comm\\test.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.在父进程中创建一个子进程，
03             2.父进程执行完后，将变量process_inter赋值为1；
04             3.子进程判断process_inter为1则执行后面的打印语句，否则不执行。
05  * 输入参数： 无
06  * 输出参数： 无
07  * 返 回 值： 无
08  * 修改日期        版本号     修改人          修改内容
09  * -----------------------------------------------
10  * 2020/05/16       V1.0      zh(ryan)        创建
11  ***********************************************************************/</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> 
<span class="token number">17</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">18</span> <span class="token punctuation">{</span>
<span class="token number">19</span>     <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>
<span class="token number">20</span>     <span class="token keyword">int</span> process_inter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">21</span> 
<span class="token number">22</span>     pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建子进程</span>
<span class="token number">23</span> 
<span class="token number">24</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 子进程</span>
<span class="token number">25</span>         <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">26</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>process_inter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>
<span class="token number">27</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">28</span>             <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">29</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is child process i=%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>         <span class="token punctuation">}</span>
<span class="token number">31</span>     <span class="token punctuation">}</span>
<span class="token number">32</span>     
<span class="token number">33</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 父进程</span>
<span class="token number">34</span>         <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">35</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">36</span>             <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is parent process i=%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">38</span>         <span class="token punctuation">}</span>
<span class="token number">39</span>         process_inter <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">40</span>     <span class="token punctuation">}</span>
<span class="token number">41</span> 
<span class="token number">42</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">43</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">44</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc test<span class="token punctuation">.</span>c <span class="token operator">-</span>o test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp test <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果，发现第29行打印语句一直没有，子进程中process_inter一直为0。</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image017.png" alt="ProcessCommunication_Image017"></p><p><strong>程序示例3</strong></p><p>（参考：jz2440\\process_pipe\\3th_pipe_comm\\comm_fork.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.使用无名管道实现父子进程通信
03             2.父进程向管道中写入一个值
04             3.子进程从管道中读取该值，如果非零，则执行后面的打印，否则不执行
05  * 输入参数： 无
06  * 输出参数： 无
07  * 返 回 值： 无
08  * 修改日期        版本号     修改人          修改内容
09  * -----------------------------------------------
10  * 2020/05/16       V1.0      zh(ryan)        创建
11  ***********************************************************************/</span>
<span class="token number">12</span> 
<span class="token number">13</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> 
<span class="token number">18</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">19</span> <span class="token punctuation">{</span>
<span class="token number">20</span>     <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>
<span class="token number">21</span>     <span class="token keyword">char</span> process_inter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">22</span>     <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">23</span> 
<span class="token number">24</span>     ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建一个无名管道，必须在创建子进程之前</span>
<span class="token number">25</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">26</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create pipe fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">27</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">28</span>     <span class="token punctuation">}</span>
<span class="token number">29</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create pipe sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>     
<span class="token number">31</span>     pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建子进程</span>
<span class="token number">32</span> 
<span class="token number">33</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 子进程</span>
<span class="token number">34</span>         <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">35</span>         <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>process_inter<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>process_inter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果管道为空，则休眠等待</span>
<span class="token number">36</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>process_inter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">38</span>             <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">39</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is child process i=%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span>         <span class="token punctuation">}</span>
<span class="token number">41</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 父进程</span>
<span class="token number">42</span>         <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">43</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">44</span>             <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">45</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is parent process i=%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">46</span>         <span class="token punctuation">}</span>
<span class="token number">47</span>         process_inter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">48</span>         <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">49</span>         <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>process_inter<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>process_inter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">50</span>     <span class="token punctuation">}</span>
<span class="token number">51</span> 
<span class="token number">52</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">53</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">54</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc comm_fork<span class="token punctuation">.</span>c <span class="token operator">-</span>o comm_fork
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp comm_fork <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>comm_fork
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果，因为第38行2s延时，父进程打印结束后大约2s左右的时间，子进程中的打印也正确输出了，如下所示。</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image018.png" alt="ProcessCommunication_Image018"></p><h3 id="_4-3-2-有名管道" tabindex="-1"><a class="header-anchor" href="#_4-3-2-有名管道" aria-hidden="true">#</a> 4.3.2 有名管道</h3><h4 id="_4-3-2-1-特点" tabindex="-1"><a class="header-anchor" href="#_4-3-2-1-特点" aria-hidden="true">#</a> 4.3.2.1 特点</h4><p>所谓有名管道，顾名思义，就是在内核中存在一个文件名，表明这是一个管道文件。Linux中存在7种文件类型，分别如下。</p><table><thead><tr><th>文件类型</th><th>文件特点</th></tr></thead><tbody><tr><td>普通文件</td><td>标识符 ‘-’ ，用open方式创建</td></tr><tr><td>目录文件</td><td>标识符 ‘d’ ，用mkdir方式创建</td></tr><tr><td>链接文件</td><td>标识符 ‘l’, la -s， 又可以分为软链接，硬链接</td></tr><tr><td>(有名)管道文件</td><td>标识 ‘p’， 用mkfifo创建</td></tr><tr><td>socket文件</td><td>标识符 ‘s’，用socket创建</td></tr><tr><td>字符设备文件</td><td>标识符 ‘c’</td></tr><tr><td>块设备文件</td><td>标识符 ‘b’</td></tr></tbody></table><p>​ 有名管道既可以用于具有亲缘关系的进程间通信，又可以用于非亲缘关系的进程间通信，在我们的实际项目中，很多进程之间是不具有亲缘关系的，因此有名管道使用的情况会更普遍一些。</p><h4 id="_4-3-2-2-创建有名管道" tabindex="-1"><a class="header-anchor" href="#_4-3-2-2-创建有名管道" aria-hidden="true">#</a> 4.3.2.2 创建有名管道</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>函数原型 ： <span class="token keyword">int</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span>

参数 ：管道文件文件名，权限，创建的文件权限仍然和umask有关系

返回值 ： 成功返回<span class="token number">0</span>，失败返回<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：mkfifo并没有在内核中生成一个管道，只是在用户空间生成了一个有名管道文件</p><h4 id="_4-3-2-3-有名管道实现进程间通信" tabindex="-1"><a class="header-anchor" href="#_4-3-2-3-有名管道实现进程间通信" aria-hidden="true">#</a> 4.3.2.3 有名管道实现进程间通信</h4><p><strong>示例程序1</strong></p><p>创建一个有名管道文件(参考：jz2440\\process_pipe\\4th_create_myfifo\\create_myfifo.c)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.创建一个有名管道
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> 
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> 
<span class="token number">16</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">17</span> <span class="token punctuation">{</span>
<span class="token number">18</span>     <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token number">19</span> 
<span class="token number">20</span>     ret <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span><span class="token string">&quot;./myfifo&quot;</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建有名管道，文件权限为777</span>
<span class="token number">21</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">22</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create myfifo fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">23</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">24</span>     <span class="token punctuation">}</span>
<span class="token number">25</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create myfifo sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span>     
<span class="token number">27</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">28</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc create_myfifo<span class="token punctuation">.</span>c <span class="token operator">-</span>o create_myfifo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp create_myfifo <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>create_myfifo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果，发现在当前目录下生成一个有名管道文件myfifo（文件类型是“-p”）。</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image019.png" alt="ProcessCommunication_Image019"></p><p><strong>示例程序2</strong></p><p>进程1源码(参考：jz2440\\process_pipe\\5th_myfifo_comm\\5nd_named_pipe.c)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.进程1中创建一个有名管道3rd_fifo，权限是0777
03             2.以写方式打开这个有名管道文件，并向其中写入一个值
04  * 输入参数： 无
05  * 输出参数： 无
06  * 返 回 值： 无
07  * 修改日期        版本号     修改人          修改内容
08  * -----------------------------------------------
09  * 2020/05/16       V1.0      zh(ryan)        创建
10  ***********************************************************************/</span>
<span class="token number">11</span> 
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>fcntl<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> 
<span class="token number">18</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">19</span> <span class="token punctuation">{</span>
<span class="token number">20</span>     <span class="token keyword">int</span> i<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> fd<span class="token punctuation">;</span>
<span class="token number">21</span>     <span class="token keyword">char</span> p_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">22</span> 
<span class="token number">23</span>     <span class="token comment">/* 创建有名管道 */</span>
<span class="token number">24</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;./3rd_fifo&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//先判断有名管道文件是否存在,不存在需要先创建</span>
<span class="token number">25</span>         ret <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span><span class="token string">&quot;./3rd_fifo&quot;</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">27</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create named pipe fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">28</span>             <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">29</span>         <span class="token punctuation">}</span>
<span class="token number">30</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create named pipe sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">31</span>     <span class="token punctuation">}</span>
<span class="token number">32</span>     
<span class="token number">33</span>     <span class="token comment">/* 打开有名管道，以写方式打开 */</span>
<span class="token number">34</span>     fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;./3rd_fifo&quot;</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">36</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;open 3rd_fifo fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">38</span>     <span class="token punctuation">}</span>
<span class="token number">39</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;open 3rd_fifo sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span> 
<span class="token number">41</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">42</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is first process i=%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">43</span>         <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">44</span>     <span class="token punctuation">}</span>
<span class="token number">45</span>     p_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">46</span>     <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">47</span>     <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p_flag<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">48</span> 
<span class="token number">49</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">50</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">51</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进程2源码(参考：jz2440\\process_pipe\\5th_myfifo_comm\\5nd_named_pipe_2.c)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.只读方式打开这个有名管道文件，并读取这个值
03             2.当这个值非零时，继续执行后面的打印输出语句
04  * 输入参数： 无
05  * 输出参数： 无
06  * 返 回 值： 无
07  * 修改日期        版本号     修改人          修改内容
08  * -----------------------------------------------
09  * 2020/05/16       V1.0      zh(ryan)        创建
10  ***********************************************************************/</span>
<span class="token number">11</span> 
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>fcntl<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> 
<span class="token number">18</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">19</span> <span class="token punctuation">{</span>
<span class="token number">20</span>     <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token number">21</span>     <span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;./3rd_fifo&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">22</span>     <span class="token keyword">char</span> p_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">23</span>     
<span class="token number">24</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">25</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;open 3rd_fifo fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">27</span>     <span class="token punctuation">}</span>
<span class="token number">28</span>     
<span class="token number">29</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;open 3rd_fifo sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>     <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p_flag<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">31</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>p_flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">32</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">33</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is second process i=%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">34</span>         <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>     <span class="token punctuation">}</span>
<span class="token number">36</span> 
<span class="token number">37</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">38</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">39</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc <span class="token number">5</span>nd_named_pipe<span class="token punctuation">.</span>c <span class="token operator">-</span>o <span class="token number">5</span>nd_named_pipe

arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc <span class="token number">5</span>nd_named_pipe_2<span class="token punctuation">.</span>c <span class="token operator">-</span>o <span class="token number">5</span>nd_named_pipe_2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp <span class="token number">5</span>nd_named_pipe <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs

cp <span class="token number">5</span>nd_named_pipe_2 <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行</li></ul><p>注意我们这里都在后台运行可执行程序，方便我们在串口中断下多次输入。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">5</span>nd_named_pipe <span class="token operator">&amp;</span>

<span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">5</span>nd_named_pipe_2 <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image020.png" alt="ProcessCommunication_Image020"></p><h2 id="_4-4-进程通信之ipc通信" tabindex="-1"><a class="header-anchor" href="#_4-4-进程通信之ipc通信" aria-hidden="true">#</a> 4.4 进程通信之IPC通信</h2><p>​ IPC通信分为共享内存、消息队列以及信号灯。这些IPC对象（共享内存、消息队列、信号灯）都存在于内核空间中。</p><p>应用程序使用IPC通信的一般步骤如下：</p><ul><li><p>首先生成一个key值。有两种生成key的方式，一种是使用宏IPC_PRIVATE表示一个key，它表示一个私有对象，只能用于当前进程或者具有亲缘关系的进程访问。另一种是使用ftok函数来生成一个key值，这种方式创建的IPC对象可以被不同的进程访问。</p></li><li><p>使用生成的key值，创建一个IPC对象（如果是已经创建好的IPC对象，则打开该IPC对象），这个时候每个IPC对象都有一个唯一的ID号（IPC_id，可以是shm_id，msg_id，sem_id，每个id代表一个IPC对象）。</p></li><li><p>进程通过IPC_id，调用访问IPC通道的读写函数来操作IPC对象。调用shmctrl，shmat，shmdt来访问共享内存；调用msgctrl，msgsnd，msgrecv访问消息队列；调用semctrl，semop访问信号灯。</p></li></ul><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image021.png" alt="ProcessCommunication_Image021"></p><p>​ 如何理解key和IPC_id（shm_id/msg_id/sem_id）</p><p>​ 回答这个问题，请先思考一个问题，应用程序如何访问一个IPC对象（共享内存，消息队列、信号量灯）？</p><p>​ 显然，我们需要一个唯一表示该IPC对象的身份ID（IPC_id，该IPC_id是由操作系统来管理的），但是由于这个ID只在当前创建该IPC对象的进程中可以获取到，在别的IPC进程中都没法获取，那么如何得到IPC对象的ID呢？这个时候就需要key值了，它相当于IPC_id的一个别名，或者叫做外部名，因此key值必须也是唯一的，这样才能得到唯一的IPC对象id。不同进程通过同一个key值得到同一个IPC对象id，来访问同一个IPC对象。如下图所示</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image022.png" alt="ProcessCommunication_Image022"></p><p>ftok函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>函数原型 <span class="token operator">:</span> <span class="token keyword">char</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> key<span class="token punctuation">)</span>

参数 ： path，存在并且可以访问的文件路径

       key，一个字符

返回值 ： 正确返回一个key值，出错返回<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 为何需要ftok函数先生成key，然后再创建IPC对象？</p><p>​ 这就类似于无名管道和有名管道的区别，使用IPC_PRIVATE宏创建的共享内存就类似于无名管道，只能实现有亲缘关系的进程间通信。</p><p>​ 那么为什么又需要使用ftok生成一个key值呢？是否可以直接指定一个非零值呢？直接指定一个非零的key值做法是不建议的，因为读者自己指定的key值很有可能于系统中已经存在的key值一样。</p><p>​ ftok函数创建了一个key值之后，就类似于有名管道，既可以实现具有亲缘关系的进程间通信，又能够实现非亲缘关系的进程间通信。</p><h3 id="_4-4-1-共享内存" tabindex="-1"><a class="header-anchor" href="#_4-4-1-共享内存" aria-hidden="true">#</a> 4.4.1 共享内存</h3><h4 id="_4-4-1-1-特点" tabindex="-1"><a class="header-anchor" href="#_4-4-1-1-特点" aria-hidden="true">#</a> 4.4.1.1 特点</h4><p>​ 所谓共享内存是指多个进程都可以访问的同一块地址空间，但是我们知道Linux操作系统为了保证系统执行的安全，为每个进程划分了各自独立的地址空间，每个进程不能访问别的进程的地址空间，那么共享内存实现的原理是什么呢？</p><p>​ 内核开辟一块物理内存区域，进程本身将这片内存空间映射到自己的地址空间进行读写。</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image023.png" alt="ProcessCommunication_Image023"></p><p>​ 从图中可以看到，进程可以直接访问这片内存，数据不需要在两进程间复制，所以速度较快。共享内存没有任何的同步与互斥机制，所以要使用信号量来实现对共享内存的存取的同步。</p><p>​ 当需要使用共享内存进行通信时，一般步骤如下：</p><ul><li><p>先创建一片共享内存，该内存存在于内核空间中。</p></li><li><p>进程通过key值找到这片共享内存的唯一ID，然后将这片共享内存映射到自己的地址空间。</p></li><li><p>每个进程通过读写映射后的地址，来访问内核中的共享内存。</p></li></ul><h4 id="_4-4-1-2创建共享内存" tabindex="-1"><a class="header-anchor" href="#_4-4-1-2创建共享内存" aria-hidden="true">#</a> 4.4.1.2创建共享内存</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>函数原型 <span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">shmget</span><span class="token punctuation">(</span><span class="token class-name">key_t</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> shmflg<span class="token punctuation">)</span>

头文件<span class="token operator">:</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>shm<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

函数参数 <span class="token operator">:</span> key<span class="token operator">:</span> IPC_PRIVATE 或 ftok的返回值

		 IPC_PRIVATE返回的key值都是一样的<span class="token punctuation">,</span>都是<span class="token number">0</span>

		 size <span class="token operator">:</span> 共享内存区大小

		 shmflg <span class="token operator">:</span> 同open函数的权限位，也可以用八进制表示法

返回值  ： 成功，共享内存段标识符ID； <span class="token operator">-</span><span class="token number">1</span> 出错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>程序示例1（参考jz2440\\process_ipc\\1st_shm\\1st_shm.c）</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.使用IPC_PRIVATE创建共享内存
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> 
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>shm<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> 
<span class="token number">18</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">19</span> <span class="token punctuation">{</span>
<span class="token number">20</span>     <span class="token keyword">int</span> shmid<span class="token punctuation">;</span>
<span class="token number">21</span>     
<span class="token number">22</span>     shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">23</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">24</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">25</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">26</span>     <span class="token punctuation">}</span>
<span class="token number">27</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory sucess, shmid = %d\\n&quot;</span><span class="token punctuation">,</span> shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">28</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ipcs -m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">29</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">30</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc <span class="token number">1</span>st_shm<span class="token punctuation">.</span>c <span class="token operator">-</span>o <span class="token number">1</span>st_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp <span class="token number">1</span>st_shm <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><p>执行第18行程序后，会在串口打印如下信息，这行语句的作用和我们直接在串口console下面输入“ipcs -m”是一样的。我们发现此时共享内存的key值为0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">1</span>st_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image024.png" alt="ProcessCommunication_Image024"></p><p><strong>程序示例2</strong>（参考jz2440\\process_ipc\\1st_shm\\2nd_shm.c）</p><p>程序源码，使用fotk函数生成一个key值</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.使用ftok函数生成的key创建共享内存
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> 
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>shm<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> 
<span class="token number">18</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">19</span> <span class="token punctuation">{</span>
<span class="token number">20</span>     <span class="token keyword">int</span> shmid<span class="token punctuation">;</span>
<span class="token number">21</span>     <span class="token keyword">int</span> key<span class="token punctuation">;</span>
<span class="token number">22</span> 
<span class="token number">23</span>     key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">&quot;./a.c&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先创建一个key值</span>
<span class="token number">24</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">25</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">27</span>     <span class="token punctuation">}</span>
<span class="token number">28</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key sucess key = 0x%X\\n&quot;</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">29</span>     
<span class="token number">30</span>     shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">31</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">32</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">33</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">34</span>     <span class="token punctuation">}</span>
<span class="token number">35</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory sucess, shmid = %d\\n&quot;</span><span class="token punctuation">,</span> shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">36</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ipcs -m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">38</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc <span class="token number">2</span>nd_shm<span class="token punctuation">.</span>c <span class="token operator">-</span>o <span class="token number">2</span>nd_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp <span class="token number">2</span>nd_shm <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><p>我们需要在2nd_shm所在的同级目录下创建一个文件a.c（在jz2440开发板上）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>touch a<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们发现此时共享内存的key值为非零值0x610d0169.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">2</span>nd_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image025.png" alt="ProcessCommunication_Image025"></p><h4 id="_4-4-1-3-应用程序如何访问共享内存" tabindex="-1"><a class="header-anchor" href="#_4-4-1-3-应用程序如何访问共享内存" aria-hidden="true">#</a> 4.4.1.3 应用程序如何访问共享内存</h4><p>​ 我们知道创建的共享内存还是处于内核空间中，用户程序不能直接访问内核地址空间，那么用户程序如何访问这个共享内存呢？</p><p><strong>shmat函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>将共享内存映射到用户空间，这样应用程序就可以直接访问共享内存了

函数原型 ： <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">shmat</span><span class="token punctuation">(</span><span class="token keyword">int</span> shmid<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>shmaddr<span class="token punctuation">,</span> <span class="token keyword">int</span> shmflg<span class="token punctuation">)</span>

参数 ： shmid ID号

	   shmaddr 映射地址， <span class="token constant">NULL</span>为系统自动完成的映射

       shmflg SHM_RDONLY共享内存只读

       默认是<span class="token number">0</span>，可读可写

返回值：成功，映射后的地址；失败，返回<span class="token constant">NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序示例（参考jz2440\\process_ipc\\1st_shm\\3nd_shm.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.创建共享内存，将该共享内存地址通过shmat映射到用户地址空间
03             2.用户通过标准输入向这个共享内存中输入一行字符串
04             3.然后从该共享内存中读取内容，验证是否能够读取到
05  * 输入参数： 无
06  * 输出参数： 无
07  * 返 回 值： 无
08  * 修改日期        版本号     修改人          修改内容
09  * -----------------------------------------------
10  * 2020/05/16       V1.0      zh(ryan)        创建
11  ***********************************************************************/</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>shm<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">18</span> 
<span class="token number">19</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">20</span> <span class="token punctuation">{</span>
<span class="token number">21</span>     <span class="token keyword">int</span> shmid<span class="token punctuation">;</span>
<span class="token number">22</span>     <span class="token keyword">int</span> key<span class="token punctuation">;</span>
<span class="token number">23</span>     <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token number">24</span>     
<span class="token number">25</span>     key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">&quot;./a.c&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">27</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">28</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">29</span>     <span class="token punctuation">}</span>
<span class="token number">30</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key sucess key = 0x%X\\n&quot;</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">31</span>     
<span class="token number">32</span>     shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">33</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">34</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">36</span>     <span class="token punctuation">}</span>
<span class="token number">37</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory sucess, shmid = %d\\n&quot;</span><span class="token punctuation">,</span> shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">38</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ipcs -m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">39</span>     
<span class="token number">40</span>     p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">41</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">42</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;shmat fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">43</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">44</span>     <span class="token punctuation">}</span>
<span class="token number">45</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;shmat sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">46</span>     
<span class="token number">47</span>     <span class="token comment">//等待console输入，然后向共享内存写入数据</span>
<span class="token number">48</span>     <span class="token function">fgets</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">49</span>     
<span class="token number">50</span>     <span class="token comment">//读共享内存</span>
<span class="token number">51</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;share memory data:%s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">52</span>     
<span class="token number">53</span>     <span class="token comment">//再次读共享内存</span>
<span class="token number">54</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;share memory data:%s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">55</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">56</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc <span class="token number">3</span>nd_shm<span class="token punctuation">.</span>c <span class="token operator">-</span>o <span class="token number">3</span>nd_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp <span class="token number">3</span>nd_shm <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><p>我们需要在3nd_shm所在的同级目录下创建一个文件a.c（在jz2440开发板上）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>touch a<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时会提示用户输入信息</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">3</span>nd_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image026.png" alt="ProcessCommunication_Image026"></p><p>我们在console下输入任意字符，比如“hello linux”，然后按下回车，发现打印如下</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image027.png" alt="ProcessCommunication_Image027"></p><p>​ 问题：代码中第51行读了一遍共享内存，然后第54行又读了一遍共享内存，发现两次都能读到共享内存的内容，说明共享内存被读了之后，内容仍然存在。而在管道中，读了一遍管道内容之后，如果紧接着读取第二遍（在没有新写入的前提下），我们是不能读到管道中的内容的，说明管道只要读取一次之后，内容就消失了，读者可以通过实验自行验证一下。</p><p><strong>shmdt函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>函数原型：<span class="token keyword">int</span> <span class="token function">shmdt</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>shmaddr<span class="token punctuation">)</span>

参数 ； shmat的返回值

返回值 <span class="token operator">:</span> 成功<span class="token number">0</span>，出错<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序示例（参考jz2440\\process_ipc\\1st_shm\\4th_shm.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.创建共享内存，将该共享内存地址通过shmat映射到用户地址空间
03             2.用户通过标准输入向这个共享内存中输入一行字符串
04             3.然后从该共享内存中读取内容
05             4.调用shmdt解除地址映射，此时应用程序继续访问会出错
06  * 输入参数： 无
07  * 输出参数： 无
08  * 返 回 值： 无
09  * 修改日期        版本号     修改人          修改内容
10  * -----------------------------------------------
11  * 2020/05/16       V1.0      zh(ryan)        创建
12  ***********************************************************************/</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>shm<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">18</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">19</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">20</span> 
<span class="token number">21</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">22</span> <span class="token punctuation">{</span>
<span class="token number">23</span>     <span class="token keyword">int</span> shmid<span class="token punctuation">;</span>
<span class="token number">24</span>     <span class="token keyword">int</span> key<span class="token punctuation">;</span>
<span class="token number">25</span>     <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token number">26</span>     
<span class="token number">27</span>     key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">&quot;./a.c&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">28</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">29</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">31</span>     <span class="token punctuation">}</span>
<span class="token number">32</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key sucess key = 0x%X\\n&quot;</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">33</span>     
<span class="token number">34</span>     shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">36</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">38</span>     <span class="token punctuation">}</span>
<span class="token number">39</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory sucess, shmid = %d\\n&quot;</span><span class="token punctuation">,</span> shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ipcs -m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">41</span>     
<span class="token number">42</span>     p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">43</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">44</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;shmat fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">45</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">46</span>     <span class="token punctuation">}</span>
<span class="token number">47</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;shmat sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">48</span>     
<span class="token number">49</span>     <span class="token comment">//write share memory</span>
<span class="token number">50</span>     <span class="token function">fgets</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">51</span>     
<span class="token number">52</span>     <span class="token comment">//start read share memory</span>
<span class="token number">53</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;share memory data:%s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">54</span>     
<span class="token number">55</span>     <span class="token comment">//start read share memory again</span>
<span class="token number">56</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;share memory data:%s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">57</span> 
<span class="token number">58</span>     <span class="token comment">//在用户空间删除共享内存的地址</span>
<span class="token number">59</span>     <span class="token function">shmdt</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">60</span>     
<span class="token number">61</span>     <span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//执行这个语句会出现segment fault，因为解除了共享内存地址映射</span>
<span class="token number">62</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">63</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc <span class="token number">4</span>th_shm<span class="token punctuation">.</span>c <span class="token operator">-</span>o <span class="token number">4</span>th_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp <span class="token number">4</span>th_shm <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><p>我们需要在4th_shm.c所在的同级目录下创建一个文件a.c（在jz2440开发板上）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>touch a<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行，此时会提示用户输入信息,输入完之后，执行第61行语句会出现Segmentation fault，这是程序期待的现象。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">4</span>th_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image028.png" alt="ProcessCommunication_Image028"></p><p><strong>shmctl函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>函数原型：<span class="token keyword">int</span> <span class="token function">shmctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> shmid<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">shmid_ds</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span>

参数<span class="token operator">:</span> shmid <span class="token operator">:</span> 共享内存标识符

	 cmd <span class="token operator">:</span> 
		<span class="token function">IPC_START</span> <span class="token punctuation">(</span>获取对象属性<span class="token punctuation">)</span>   <span class="token operator">--</span><span class="token operator">-</span> 实现了命令 ipcs <span class="token operator">-</span>m

    	<span class="token function">IPC_SET</span><span class="token punctuation">(</span>设置对象属性<span class="token punctuation">)</span>

	 	<span class="token function">IPC_RMID</span> <span class="token punctuation">(</span>删除对象属性<span class="token punctuation">)</span>    <span class="token operator">--</span><span class="token operator">-</span> 实现了命令 ipcrm <span class="token operator">-</span>m

	 buf <span class="token operator">:</span> 指定IPC_START<span class="token operator">/</span>IPC_SET 时用以保存<span class="token operator">/</span>设置属性

返回值 <span class="token operator">:</span> 成功<span class="token number">0</span>，出错<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序示例（参考jz2440\\process_ipc\\1st_shm\\5th_shm.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.创建共享内存，将该共享内存地址通过shmat映射到用户地址空间
03               2.用户通过标准输入向这个共享内存中输入一行字符串
04               3.然后从该共享内存中读取内容
05               4.调用shmdt解除地址映射，此时应用程序继续访问会出错
06               5.最后调用shmctl函数删除内核中的共享内存
07  * 输入参数： 无
08  * 输出参数： 无
09  * 返 回 值： 无
10  * 修改日期        版本号     修改人          修改内容
11  * -----------------------------------------------
12  * 2020/05/16       V1.0      zh(ryan)        创建
13  ***********************************************************************/</span>
<span class="token number">14</span> 
<span class="token number">15</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">18</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">19</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>shm<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">20</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">21</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">22</span> 
<span class="token number">23</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">24</span> <span class="token punctuation">{</span>
<span class="token number">25</span>     <span class="token keyword">int</span> shmid<span class="token punctuation">;</span>
<span class="token number">26</span>     <span class="token keyword">int</span> key<span class="token punctuation">;</span>
<span class="token number">27</span>     <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token number">28</span>     
<span class="token number">29</span>     key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">&quot;./a.c&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">31</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">32</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">33</span>     <span class="token punctuation">}</span>
<span class="token number">34</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key sucess key = 0x%X\\n&quot;</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>     
<span class="token number">36</span>     shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">38</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">39</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">40</span>     <span class="token punctuation">}</span>
<span class="token number">41</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory sucess, shmid = %d\\n&quot;</span><span class="token punctuation">,</span> shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ipcs -m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">43</span>     
<span class="token number">44</span>     p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">45</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">46</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;shmat fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">47</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">48</span>     <span class="token punctuation">}</span>
<span class="token number">49</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;shmat sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">50</span>     
<span class="token number">51</span>     <span class="token comment">//write share memory</span>
<span class="token number">52</span>     <span class="token function">fgets</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">53</span>     
<span class="token number">54</span>     <span class="token comment">//start read share memory</span>
<span class="token number">55</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;share memory data:%s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">56</span>     
<span class="token number">57</span>     <span class="token comment">//start read share memory again</span>
<span class="token number">58</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;share memory data:%s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">59</span> 
<span class="token number">60</span>     <span class="token comment">//在用户空间删除共享内存的地址</span>
<span class="token number">61</span>     <span class="token function">shmdt</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">62</span>     
<span class="token number">63</span>     <span class="token comment">//memcpy(p, &quot;abcd&quot;, 4);  //执行这个语句会出现segment fault</span>
<span class="token number">64</span>     
<span class="token number">65</span>     <span class="token function">shmctl</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> IPC_RMID<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">66</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ipcs -m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">67</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">68</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc <span class="token number">5</span>th_shm<span class="token punctuation">.</span>c <span class="token operator">-</span>o <span class="token number">5</span>th_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp <span class="token number">5</span>th_shm <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>touch a<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 运行。此时会提示用户输入信息，第一次执行第42行语句时，读者可以看到共享内存，第二次执行第66行语句时，读者就看不到共享内存了，因为此时共享内存已经被删除了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">4</span>th_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image029.png" alt="ProcessCommunication_Image029"></p><h4 id="_4-4-1-4-共享内存实现进程间通信" tabindex="-1"><a class="header-anchor" href="#_4-4-1-4-共享内存实现进程间通信" aria-hidden="true">#</a> 4.4.1.4 共享内存实现进程间通信</h4><p>步骤：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1.</span> 创建<span class="token operator">/</span>打开共享内存

<span class="token number">2.</span> 映射共享内存，即把指定的共享内存映射到进程的地址空间用于访问

<span class="token number">3.</span> 读写共享内存

<span class="token number">4.</span> 撤销共享内存映射

<span class="token number">5.</span> 删除共享内存对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用共享内存时的一些注意点或是限制条件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1.</span> 共享内存的数量是有限制的，通过ipcs <span class="token operator">-</span>l命令查看，当然如果我们具有管理员权限，可以通过 cat <span class="token operator">/</span>proc<span class="token operator">/</span>sys<span class="token operator">/</span>kernel<span class="token operator">/</span>shmmax来查看

<span class="token number">2.</span> 共享内存删除的时间点，shmctl添加删除标记，只有当所有进程都取消共享内存映射时<span class="token punctuation">(</span>即所有进程调用shmdt之后<span class="token punctuation">)</span>，才会删除共享内存。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例源码（参考jz2440\\process_ipc\\1st_shm\\6th_shm.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.在父进程中创建使用key值为IPC_PRIVATE创建一个共享内存
03             2.然后在父进程中创建一个子进程
04             3.通过标准输入，父进程向共享内存中写入字符串
05             4.父进程调用发送信号函数通知子进程可以读取共享内存了
06             5.子进程收到父进程发送过来的信号，开始读取共享内存
07             6.子进程读完共享内存后，发送信号通知父进程读取完成
08  * 输入参数： 无
09  * 输出参数： 无
10  * 返 回 值： 无
11  * 修改日期        版本号     修改人          修改内容
12  * -----------------------------------------------
13  * 2020/05/16       V1.0      zh(ryan)        创建
14  ***********************************************************************/</span>
<span class="token number">15</span> 
<span class="token number">16</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">18</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">19</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">20</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>shm<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">21</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">22</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">23</span> 
<span class="token number">24</span> <span class="token keyword">void</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">)</span>
<span class="token number">25</span> <span class="token punctuation">{</span>
<span class="token number">26</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token number">27</span> <span class="token punctuation">}</span>
<span class="token number">28</span> 
<span class="token number">29</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">30</span> <span class="token punctuation">{</span>
<span class="token number">31</span>     <span class="token keyword">int</span> shmid<span class="token punctuation">;</span>
<span class="token number">32</span>     <span class="token keyword">int</span> key<span class="token punctuation">;</span>
<span class="token number">33</span>     <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token number">34</span>     <span class="token keyword">int</span> pid<span class="token punctuation">;</span>
<span class="token number">35</span> 
<span class="token number">36</span> 
<span class="token number">37</span>     shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">38</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">39</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">41</span>     <span class="token punctuation">}</span>
<span class="token number">42</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory sucess, shmid = %d\\n&quot;</span><span class="token punctuation">,</span> shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">43</span> 
<span class="token number">44</span>     pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">45</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 父进程</span>
<span class="token number">46</span>         <span class="token function">signal</span><span class="token punctuation">(</span>SIGUSR2<span class="token punctuation">,</span> myfun<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">47</span>         p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">48</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">49</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;shmat fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">50</span>             <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">51</span>         <span class="token punctuation">}</span>
<span class="token number">52</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent process shmat sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">53</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">54</span>             <span class="token comment">//从标准输入获取字符串，将其写入到共享内存</span>
<span class="token number">55</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent process begin to write memory data:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">56</span>             <span class="token function">fgets</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">57</span>             <span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> SIGUSR1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 发信号通知子进程读共享内存</span>
<span class="token number">58</span>             <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 等待子进程读完共享内存的信号</span>
<span class="token number">59</span>         <span class="token punctuation">}</span>
<span class="token number">60</span>     <span class="token punctuation">}</span>
<span class="token number">61</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 子进程</span>
<span class="token number">62</span>         <span class="token function">signal</span><span class="token punctuation">(</span>SIGUSR1<span class="token punctuation">,</span> myfun<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">63</span>         p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">64</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">65</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;shmat fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">66</span>             <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">67</span>         <span class="token punctuation">}</span>
<span class="token number">68</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child process shmat sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">69</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">70</span>             <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待父进程发信号，准备读取共享内存</span>
<span class="token number">71</span>             <span class="token comment">//子进程开始读共享内存，并发信号给父进程告知读完成</span>
<span class="token number">72</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child process read share memory data:%s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">73</span>             <span class="token function">kill</span><span class="token punctuation">(</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SIGUSR2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">74</span>         <span class="token punctuation">}</span>
<span class="token number">75</span>     <span class="token punctuation">}</span>
<span class="token number">76</span> 
<span class="token number">77</span>     <span class="token comment">//在用户空间删除共享内存的地址</span>
<span class="token number">78</span>     <span class="token function">shmdt</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">79</span>     
<span class="token number">80</span>     <span class="token comment">//memcpy(p, &quot;abcd&quot;, 4);  //执行这个语句会出现segment fault</span>
<span class="token number">81</span>     
<span class="token number">82</span>     <span class="token function">shmctl</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> IPC_RMID<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">83</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ipcs -m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">84</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">85</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc <span class="token number">6</span>th_shm<span class="token punctuation">.</span>c <span class="token operator">-</span>o <span class="token number">6</span>th_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp <span class="token number">6</span>th_shm <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><p>父进程从标准输入获取用户输入的字符串，然后子进程会打印出该字符串。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">6</span>th_shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image030.png" alt="ProcessCommunication_Image030"></p><p>server进程源码（参考jz2440\\process_ipc\\1st_shm\\7th_shm_1.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.server进程使用ftok生成一个key值，利用这个key值创建一个共享内存
03             2.通过标准输入，向共享内存中写入字符串
04             3.server进程调用发送信号函数通知client进程
05  * 输入参数： 无
06  * 输出参数： 无
07  * 返 回 值： 无
08  * 修改日期        版本号     修改人          修改内容
09  * -----------------------------------------------
10  * 2020/05/16       V1.0      zh(ryan)        创建
11  ***********************************************************************/</span>
<span class="token number">12</span> 
<span class="token number">13</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>shm<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">18</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">19</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">20</span> 
<span class="token number">21</span> <span class="token keyword">struct</span> <span class="token class-name">mybuf</span>
<span class="token number">22</span> <span class="token punctuation">{</span>
<span class="token number">23</span>     <span class="token keyword">int</span> pid<span class="token punctuation">;</span>
<span class="token number">24</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">26</span> 
<span class="token number">27</span> <span class="token keyword">void</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">)</span>
<span class="token number">28</span> <span class="token punctuation">{</span>
<span class="token number">29</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token number">30</span> <span class="token punctuation">}</span>
<span class="token number">31</span> 
<span class="token number">32</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">33</span> <span class="token punctuation">{</span>
<span class="token number">34</span>     <span class="token keyword">int</span> shmid<span class="token punctuation">;</span>
<span class="token number">35</span>     <span class="token keyword">int</span> key<span class="token punctuation">;</span>
<span class="token number">36</span>     <span class="token keyword">struct</span> <span class="token class-name">mybuf</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token number">37</span>     <span class="token keyword">int</span> pid<span class="token punctuation">;</span>
<span class="token number">38</span> 
<span class="token number">39</span>     key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">&quot;./a.c&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">41</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">43</span>     <span class="token punctuation">}</span>
<span class="token number">44</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">45</span> 
<span class="token number">46</span>     shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">47</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">48</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">49</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">50</span>     <span class="token punctuation">}</span>
<span class="token number">51</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory sucess, shmid = %d\\n&quot;</span><span class="token punctuation">,</span> shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">52</span> 
<span class="token number">53</span>     <span class="token function">signal</span><span class="token punctuation">(</span>SIGUSR2<span class="token punctuation">,</span> myfun<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">54</span>     p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mybuf</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">55</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">56</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;shmat fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">57</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">58</span>     <span class="token punctuation">}</span>
<span class="token number">59</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent process shmat sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">60</span> 
<span class="token number">61</span>     p<span class="token operator">-&gt;</span>pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将server进程的pid号写入到共享内存</span>
<span class="token number">62</span>     <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 等待client读取到server pid号</span>
<span class="token number">63</span>     pid<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pid<span class="token punctuation">;</span>        <span class="token comment">// 获取client的进程号</span>
<span class="token number">64</span> 
<span class="token number">65</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">66</span>         <span class="token comment">//write share memory</span>
<span class="token number">67</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent process begin to write memory data\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">68</span>         <span class="token function">fgets</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>buf<span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">69</span>         <span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> SIGUSR1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 向client发送信号通知client读取共享内存数据</span>
<span class="token number">70</span>         <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 等待client读取完共享内存数据</span>
<span class="token number">71</span>     <span class="token punctuation">}</span>
<span class="token number">72</span> 
<span class="token number">73</span>     <span class="token comment">//在用户空间删除共享内存的地址</span>
<span class="token number">74</span>     <span class="token function">shmdt</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">75</span> 
<span class="token number">76</span>     <span class="token function">shmctl</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> IPC_RMID<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">77</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ipcs -m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">78</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">79</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>client进程源码（参考jz2440\\process_ipc\\1st_shm\\7th_shm_2.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.client进程使用ftok生成一个key值，利用这个key值打开一个共享内存
03             2.client进程收到server进程发送过来的信号之后，开始读取共享内存
04             3.子进程读完共享内存后，发送信号通知父进程读取完成
05  * 输入参数： 无
06  * 输出参数： 无
07  * 返 回 值： 无
08  * 修改日期        版本号     修改人          修改内容
09  * -----------------------------------------------
10  * 2020/05/16       V1.0      zh(ryan)        创建
11  ***********************************************************************/</span>
<span class="token number">12</span> 
<span class="token number">13</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>shm<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">18</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">19</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">20</span> 
<span class="token number">21</span> <span class="token keyword">struct</span> <span class="token class-name">mybuf</span>
<span class="token number">22</span> <span class="token punctuation">{</span>
<span class="token number">23</span>     <span class="token keyword">int</span> pid<span class="token punctuation">;</span>
<span class="token number">24</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">26</span> 
<span class="token number">27</span> <span class="token keyword">void</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">)</span>
<span class="token number">28</span> <span class="token punctuation">{</span>
<span class="token number">29</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token number">30</span> <span class="token punctuation">}</span>
<span class="token number">31</span> 
<span class="token number">32</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">33</span> <span class="token punctuation">{</span>
<span class="token number">34</span>     <span class="token keyword">int</span> shmid<span class="token punctuation">;</span>
<span class="token number">35</span>     <span class="token keyword">int</span> key<span class="token punctuation">;</span>
<span class="token number">36</span>     <span class="token keyword">struct</span> <span class="token class-name">mybuf</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token number">37</span>     <span class="token keyword">int</span> pid<span class="token punctuation">;</span>
<span class="token number">38</span>     
<span class="token number">39</span>     key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">&quot;./a.c&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">41</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">43</span>     <span class="token punctuation">}</span>
<span class="token number">44</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">45</span> 
<span class="token number">46</span>     shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">47</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">48</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">49</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">50</span>     <span class="token punctuation">}</span>
<span class="token number">51</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create shared memory sucess, shmid = %d\\n&quot;</span><span class="token punctuation">,</span> shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">52</span> 
<span class="token number">53</span>     <span class="token function">signal</span><span class="token punctuation">(</span>SIGUSR1<span class="token punctuation">,</span> myfun<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">54</span>     p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mybuf</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">55</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">56</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;shmat fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">57</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">58</span>     <span class="token punctuation">}</span>
<span class="token number">59</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client process shmat sucess\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">60</span>     
<span class="token number">61</span>     <span class="token comment">// get server pid</span>
<span class="token number">62</span>     <span class="token comment">//read share memory</span>
<span class="token number">63</span>     pid <span class="token operator">=</span> p<span class="token operator">-&gt;</span>pid<span class="token punctuation">;</span>
<span class="token number">64</span>     <span class="token comment">// write client pid to share memory</span>
<span class="token number">65</span>     p<span class="token operator">-&gt;</span>pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">66</span>     <span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> SIGUSR2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// tell server process to read data</span>
<span class="token number">67</span>     
<span class="token number">68</span>     <span class="token comment">//client start to read share memory</span>
<span class="token number">69</span> 
<span class="token number">70</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">71</span>         <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// wait server process write share memory</span>
<span class="token number">72</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client process read data:%s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// read data</span>
<span class="token number">73</span>         <span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> SIGUSR2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// server can  write share memory</span>
<span class="token number">74</span>     <span class="token punctuation">}</span>
<span class="token number">75</span> 
<span class="token number">76</span>     <span class="token comment">//在用户空间删除共享内存的地址</span>
<span class="token number">77</span>     <span class="token function">shmdt</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">78</span>     
<span class="token number">79</span>     <span class="token function">shmctl</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> IPC_RMID<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">80</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ipcs -m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">81</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">82</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 该源码留给读者自行实验，需要注意的是，因为这个时候需要运行两个console，分别运行server进程和client进程，可以采用一个串口console，一个telnet console。我们也可以在ubuntu下开启两个terminal验证。</p><h3 id="_4-4-2-消息队列" tabindex="-1"><a class="header-anchor" href="#_4-4-2-消息队列" aria-hidden="true">#</a> 4.4.2 消息队列</h3><h4 id="_4-4-2-1-什么是消息队列" tabindex="-1"><a class="header-anchor" href="#_4-4-2-1-什么是消息队列" aria-hidden="true">#</a> 4.4.2.1 什么是消息队列</h4><p>​ 消息队列是消息的链表，它是一个链式队列，和管道类似，每个消息多有最大长度限制，可用cat/proc/sys/kernel/msgmax查看。</p><p>​ 内核为每个消息队列对象维护了一个数据结构msgqid_ds，用于标识消息队列，以便让进程知道当前操作的是哪一个消息队列，每一个msqid_ds表示一个消息队列，并通过msqid_ds.msg_first、msg_last维护一个先进先出的msg链表队列，当发送一个消息到该消息队列时，把发送的消息构造成一个msg的结构对象，并添加到msqid_ds.msg_first、msg_last维护的链表队列。在内核中的表示如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image031.png" alt="ProcessCommunication_Image031"></p><h4 id="_4-4-2-2-特点" tabindex="-1"><a class="header-anchor" href="#_4-4-2-2-特点" aria-hidden="true">#</a> 4.4.2.2 特点</h4><ol><li><p>生命周期跟随内核，消息队列一直存在，需要用户显示调用接口删除或者使用命令删除。</p></li><li><p>消息队列可以实现双向通信</p></li><li><p>克服了管道只能承载无格式字节流的缺点</p></li></ol><h4 id="_4-4-2-3-消息队列函数" tabindex="-1"><a class="header-anchor" href="#_4-4-2-3-消息队列函数" aria-hidden="true">#</a> 4.4.2.3 消息队列函数</h4><p><strong>msgget函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>创建或者打开消息队列的函数
头文件：#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h&gt;</span></span>
       <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/msg.h&gt;</span></span>
原型： <span class="token keyword">int</span> <span class="token function">msgget</span><span class="token punctuation">(</span><span class="token class-name">key_t</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span>
参数： key 和消息队列关联的key值
       flag 消息队列的访问权限
返回值： 成功，消息队列ID，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>msgctl函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>消息队列控制函数
原型： <span class="token keyword">int</span> <span class="token function">msgctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> msgqid<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">msqid_ds</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span>
参数： msgqid 消息队列ID
           cmd IPC_STAT 读取消息队列的属性，并将其保存在buf指向的缓冲区中
               IPC_SET  设置消息队列的属性，这个值取自buf参数
               IPC_RMID 从系统中删除消息队列
           buf 消息缓冲区
返回值： 成功 <span class="token number">0</span>，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>msgsnd函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>把一条消息添加到消息队列中
头文件#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h&gt;</span></span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/msg.h&gt;</span></span>
原型： <span class="token keyword">int</span> <span class="token function">msgsnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> msgqid<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span>
参数： msgqid 消息队列ID
           msgp 指向消息的指针，常用消息结构msgbuf如下
           <span class="token keyword">struct</span> <span class="token class-name">msgbuf</span> <span class="token punctuation">{</span>
               <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>        <span class="token comment">//消息类型</span>
               <span class="token keyword">char</span> mtext<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//消息正文</span>
           <span class="token punctuation">}</span><span class="token punctuation">;</span>
           size 消息正文的字节数
           flag IPC_NOWAIT 消息没有发送完成也会立即返回
                <span class="token number">0</span>： 直到发送完成函数才会返回
    返回值： 成功 <span class="token number">0</span>，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>msgrcv函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>从一个消息队列接受消息
原型： <span class="token keyword">int</span> <span class="token function">msgrcv</span><span class="token punctuation">(</span><span class="token keyword">int</span> msgqid<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">long</span> msgtype<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span>
参数： msgqid 消息队列ID
       msgp 接收消息的缓冲区
       size 要接收消息的字节数
       msgtype  <span class="token number">0</span> 接收消息队列中第一个消息
                大于<span class="token number">0</span> 接收消息队列中第一个类型为msgtype的消息
                小于<span class="token number">0</span> 接收消息队列中类型值不大于msgtype的绝对值且类型值又最小的消息
           flag IPC_NOWAIT 没有消息，会立即返回
                <span class="token number">0</span>： 若无消息则会一直阻塞
                
返回值： 成功 接收消息的长度，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-2-4-消息队列实现进程间通信" tabindex="-1"><a class="header-anchor" href="#_4-4-2-4-消息队列实现进程间通信" aria-hidden="true">#</a> 4.4.2.4 消息队列实现进程间通信</h4><p>server源码（参考jz2440\\process_ipc\\2nd_shm\\write_msg.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.server进程向消息队列中写数据
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> 
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>msg<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">18</span> 
<span class="token number">19</span> <span class="token keyword">struct</span> <span class="token class-name">msgbuf</span> <span class="token punctuation">{</span>
<span class="token number">20</span>     <span class="token keyword">long</span> type<span class="token punctuation">;</span>        <span class="token comment">//消息类型</span>
<span class="token number">21</span>     <span class="token keyword">char</span> voltage<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//消息正文</span>
<span class="token number">22</span>     <span class="token keyword">char</span> ID<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">24</span> 
<span class="token number">25</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">26</span> <span class="token punctuation">{</span>
<span class="token number">27</span>     <span class="token keyword">int</span> msgid<span class="token punctuation">,</span> readret<span class="token punctuation">,</span> key<span class="token punctuation">;</span>
<span class="token number">28</span>     <span class="token keyword">struct</span> <span class="token class-name">msgbuf</span> sendbuf<span class="token punctuation">;</span>
<span class="token number">29</span> 
<span class="token number">30</span>     key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">&quot;./a.c&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">31</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">32</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">33</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">34</span>     <span class="token punctuation">}</span>
<span class="token number">35</span>     msgid <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> IPC_CREAT<span class="token operator">|</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">36</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>msgid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">37</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create msg queue fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">38</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">39</span>     <span class="token punctuation">}</span>
<span class="token number">40</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create msg queue sucess, msgid = %d\\n&quot;</span><span class="token punctuation">,</span> msgid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">41</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ipcs -q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span> 
<span class="token number">43</span>     <span class="token comment">// write message queue</span>
<span class="token number">44</span>     sendbuf<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token number">45</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">46</span>         <span class="token function">memset</span><span class="token punctuation">(</span>sendbuf<span class="token punctuation">.</span>voltage<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//clear send buffer</span>
<span class="token number">47</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;please input message:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">48</span>         <span class="token function">fgets</span><span class="token punctuation">(</span>sendbuf<span class="token punctuation">.</span>voltage<span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">49</span>         <span class="token comment">//start write msg to msg queue</span>
<span class="token number">50</span>         <span class="token function">msgsnd</span><span class="token punctuation">(</span>msgid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sendbuf<span class="token punctuation">.</span>voltage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">51</span>     <span class="token punctuation">}</span>
<span class="token number">52</span> 
<span class="token number">53</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">54</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>client源码（参考jz2440\\process_ipc\\2nd_shm\\read_msg.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.client进程从消息队列中读数据
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> 
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>msg<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">18</span> 
<span class="token number">19</span> <span class="token keyword">struct</span> <span class="token class-name">msgbuf</span> <span class="token punctuation">{</span>
<span class="token number">20</span>     <span class="token keyword">long</span> type<span class="token punctuation">;</span>        <span class="token comment">//消息类型</span>
<span class="token number">21</span>     <span class="token keyword">char</span> voltage<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//消息正文</span>
<span class="token number">22</span>     <span class="token keyword">char</span> ID<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">24</span> 
<span class="token number">25</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">26</span> <span class="token punctuation">{</span>
<span class="token number">27</span>     <span class="token keyword">int</span> msgid<span class="token punctuation">,</span> key<span class="token punctuation">;</span>
<span class="token number">28</span>     <span class="token keyword">struct</span> <span class="token class-name">msgbuf</span> readbuf<span class="token punctuation">;</span>
<span class="token number">29</span> 
<span class="token number">30</span>     key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">&quot;./a.c&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">31</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">32</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create key fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">33</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">34</span>     <span class="token punctuation">}</span>
<span class="token number">35</span>     msgid <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> IPC_CREAT<span class="token operator">|</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">36</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>msgid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">37</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create msg queue fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">38</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">39</span>     <span class="token punctuation">}</span>
<span class="token number">40</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create msg queue sucess, msgid = %d\\n&quot;</span><span class="token punctuation">,</span> msgid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">41</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ipcs -q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span> 
<span class="token number">43</span>     <span class="token comment">// read message queue</span>
<span class="token number">44</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">45</span>         <span class="token function">memset</span><span class="token punctuation">(</span>readbuf<span class="token punctuation">.</span>voltage<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//clear recv buffer</span>
<span class="token number">46</span>         <span class="token comment">//start read msg to msg queue</span>
<span class="token number">47</span>         <span class="token function">msgrcv</span><span class="token punctuation">(</span>msgid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>readbuf<span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">48</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv data from message queue:%s&quot;</span><span class="token punctuation">,</span> readbuf<span class="token punctuation">.</span>voltage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">49</span>     <span class="token punctuation">}</span>
<span class="token number">50</span> 
<span class="token number">51</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">52</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc write_msg<span class="token punctuation">.</span>c <span class="token operator">-</span>o write_msg
arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc read_msg<span class="token punctuation">.</span>c <span class="token operator">-</span>o read_msg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp write_msg <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
cp read_msg <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行</li></ul><p>先在后台执行read_msg，然后在前台运行write_msg，此时在console下输入字符串，可以看到client进程能读到消息队列中的字符串 。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>read_msg <span class="token operator">&amp;</span>
<span class="token punctuation">.</span><span class="token operator">/</span> write_msg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image032.png" alt="ProcessCommunication_Image032"></p><h3 id="_4-4-3-信号量灯" tabindex="-1"><a class="header-anchor" href="#_4-4-3-信号量灯" aria-hidden="true">#</a> 4.4.3 信号量灯</h3><h4 id="_4-4-3-1-什么是p、v操作" tabindex="-1"><a class="header-anchor" href="#_4-4-3-1-什么是p、v操作" aria-hidden="true">#</a> 4.4.3.1 什么是P、V操作</h4><p>​ 当不同进程需要访问同一个资源时，由于不同进程的执行次序是未知的，有可能某个进程正在写该资源，而另一个进程正在读该资源，这样会造成进程执行的不确定性。这样的同一个资源，我们称为共享资源，共享资源一次只允许一个进程访问。因此进程在访问共享资源时，需要加上同步、互斥操作。</p><p>​ 一般地，P操作表示申请该共享资源，V操作表示释放该共享资源。</p><h4 id="_4-4-3-2-什么是信号量灯" tabindex="-1"><a class="header-anchor" href="#_4-4-3-2-什么是信号量灯" aria-hidden="true">#</a> 4.4.3.2 什么是信号量灯</h4><p>​ 它是信号量的集合，包含多个信号量，可对多个信号灯同时进行P/V操作，主要用来实现进程、线程间同步/互斥。内核为每个信号量灯维护了一个数据结构semid_ds，用于标识信号量灯，以便进程知道当前操作的是哪个信号量灯，在内核中的表示如下所示。</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image033.png" alt="ProcessCommunication_Image033"></p><p>​ 它和POSIX规范中的信号量有什么区别呢？POSIX规范中的信号量只作用于一个信号量，而IPC对象中的信号量灯会作用于一组信号量。</p><table><thead><tr><th>功能</th><th>信号量(POSIX)</th><th>信号量灯(IPC对象)</th></tr></thead><tbody><tr><td>定义信号变量</td><td>sem_t sem1</td><td>semget</td></tr><tr><td>初始化信号量</td><td>sem_init</td><td>semctl</td></tr><tr><td>P操作</td><td>sem_wait</td><td>semop</td></tr><tr><td>V操作</td><td>sem_post</td><td>semop</td></tr></tbody></table><p>​ 为什么需要IPC对象中的信号量灯呢？有POSIX规范中的信号量不够吗？</p><p>考虑如下场景：</p><ol><li><p>线程A和线程B都需要访问共享资源1和共享资源2，在线程A中会需要先申请共享资源1，然后再申请共享资源2。</p></li><li><p>但是在线程B中，会先申请贡献资源2，然后再申请共享资源1。</p></li><li><p>当线程A中开始申请共享资源1时，紧接着会申请共享资源2；而此时线程B中开始申请共享资源2时，紧接着会申请共享资源1。</p></li><li><p>线程B正在占用着共享资源2，线程A正在占着共享资源1，导致线程B申请不到共享资源1，它就不会释放共享资源2；线程A申请不到共享资源2，它就不会释放共享资源1；这样就造成了死锁。</p></li></ol><h4 id="_4-4-3-3-信号量灯函数" tabindex="-1"><a class="header-anchor" href="#_4-4-3-3-信号量灯函数" aria-hidden="true">#</a> 4.4.3.3 信号量灯函数</h4><p><strong>semget函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>创建或者打开函数
头文件#includde <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">includde</span> <span class="token expression"><span class="token operator">&lt;</span>sys<span class="token operator">/</span>ipc<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">includde</span> <span class="token expression"><span class="token operator">&lt;</span>sys<span class="token operator">/</span>sem<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>
原型<span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">semget</span><span class="token punctuation">(</span><span class="token class-name">key_t</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> nsems<span class="token punctuation">,</span> <span class="token keyword">int</span> semflag<span class="token punctuation">)</span>
参数： key 和信号灯集关联的key值
      nsems 信号灯集包含的信号灯数目
      semflag 信号灯集的访问权限
返回值： 成功，信号灯ID，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>semctl函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>信号量灯控制函数
头文件#includde <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">includde</span> <span class="token expression"><span class="token operator">&lt;</span>sys<span class="token operator">/</span>ipc<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">includde</span> <span class="token expression"><span class="token operator">&lt;</span>sys<span class="token operator">/</span>sem<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>
原型<span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">semctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> semid<span class="token punctuation">,</span> <span class="token keyword">int</span> semnum<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">union</span> semun arg<span class="token punctuation">)</span>
          注意最后一个参数不是地址，可以有，可以没有
参数： semid 信号灯集id
      semnum 要修改的信号灯集编号<span class="token punctuation">,</span>删除操作时，这个值可以设置为任意值
      cmd GETVAL 获取信号灯的值
           SETVAL 设置信号灯的值
           IPC_RMID 删除信号灯
      <span class="token keyword">union</span> semun arg<span class="token operator">:</span> <span class="token keyword">union</span> semun <span class="token punctuation">{</span>
                     <span class="token keyword">int</span>              val<span class="token punctuation">;</span>    <span class="token comment">/* Value for SETVAL */</span>
                     <span class="token keyword">struct</span> <span class="token class-name">semid_ds</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>    <span class="token comment">/* Buffer for IPC_STAT, IPC_SET */</span>
                     <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  <span class="token operator">*</span>array<span class="token punctuation">;</span>  <span class="token comment">/* Array for GETALL, SETALL */</span>
                     <span class="token keyword">struct</span> <span class="token class-name">seminfo</span>  <span class="token operator">*</span>__buf<span class="token punctuation">;</span>  <span class="token comment">/* Buffer for IPC_INFO (Linux-specific) */</span>
                 <span class="token punctuation">}</span><span class="token punctuation">;</span>
返回值： 成功，消息队列ID，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>semop函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>p<span class="token operator">/</span>v操作函数
头文件#includde <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">includde</span> <span class="token expression"><span class="token operator">&lt;</span>sys<span class="token operator">/</span>ipc<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">includde</span> <span class="token expression"><span class="token operator">&lt;</span>sys<span class="token operator">/</span>sem<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>
原型<span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">semop</span><span class="token punctuation">(</span><span class="token keyword">int</span> semid<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sembuf</span> <span class="token operator">*</span>opsptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nops<span class="token punctuation">)</span>
参数： semid 信号灯集id
      opsptr <span class="token keyword">struct</span> <span class="token class-name">sembuf</span><span class="token punctuation">{</span>
                  <span class="token keyword">short</span> sem_num<span class="token punctuation">;</span>   <span class="token comment">//要操作信号灯的编号</span>
                  <span class="token keyword">short</span> sem_op<span class="token punctuation">;</span>    <span class="token comment">//0: 等待，直到信号灯的值变为0，1:资源释放，V操作，-1:分配资源，P操作</span>
                  <span class="token keyword">short</span> sem_flg<span class="token punctuation">;</span>   <span class="token comment">//0: IPC_NOWAIT, SEM_UNDO</span>
              <span class="token punctuation">}</span>
       nops 要操作信号灯个数
返回值： 成功，消息队列ID，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-3-4-信号量灯实现进程间同步-互斥" tabindex="-1"><a class="header-anchor" href="#_4-4-3-4-信号量灯实现进程间同步-互斥" aria-hidden="true">#</a> 4.4.3.4 信号量灯实现进程间同步/互斥</h4><p>程序源码（参考jz2440\\process_ipc\\3rd_shm\\share_sysv.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.父进程从键盘输入字符串到共享内存.
03             2.子进程删除字符串中的空格并打印.
04             3.父进程输入quit后删除共享内存和信号灯集，程序结束.
05  * 输入参数： 无
06  * 输出参数： 无
07  * 返 回 值： 无
08  * 修改日期        版本号     修改人          修改内容
09  * -----------------------------------------------
10  * 2020/05/16       V1.0      zh(ryan)        创建
11  ***********************************************************************/</span>
<span class="token number">12</span> 
<span class="token number">13</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>ipc<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>sem<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">18</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">19</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>shm<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">20</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">21</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">22</span> 
<span class="token number">23</span> #define N <span class="token number">64</span>
<span class="token number">24</span> #define READ <span class="token number">0</span>
<span class="token number">25</span> #define WRITE <span class="token number">1</span>
<span class="token number">26</span> 
<span class="token number">27</span> <span class="token keyword">union</span> semun <span class="token punctuation">{</span>
<span class="token number">28</span> 	<span class="token keyword">int</span> val<span class="token punctuation">;</span>
<span class="token number">29</span>         <span class="token keyword">struct</span> <span class="token class-name">semid_ds</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>
<span class="token number">30</span>         <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>array<span class="token punctuation">;</span>
<span class="token number">31</span>         <span class="token keyword">struct</span> <span class="token class-name">seminfo</span> <span class="token operator">*</span>__buf<span class="token punctuation">;</span>
<span class="token number">32</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">33</span> 
<span class="token number">34</span> <span class="token keyword">void</span> <span class="token function">init_sem</span><span class="token punctuation">(</span><span class="token keyword">int</span> semid<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token number">35</span> <span class="token punctuation">{</span>
<span class="token number">36</span> 	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token number">37</span> 	<span class="token keyword">union</span> semun myun<span class="token punctuation">;</span>
<span class="token number">38</span> 
<span class="token number">39</span> 	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">40</span> 		myun<span class="token punctuation">.</span>val <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">41</span> 		<span class="token function">semctl</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> SETVAL<span class="token punctuation">,</span> myun<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span> 	<span class="token punctuation">}</span>
<span class="token number">43</span> <span class="token punctuation">}</span>
<span class="token number">44</span> 
<span class="token number">45</span> <span class="token keyword">void</span> <span class="token function">pv</span><span class="token punctuation">(</span><span class="token keyword">int</span> semid<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> op<span class="token punctuation">)</span>
<span class="token number">46</span> <span class="token punctuation">{</span>
<span class="token number">47</span> 	<span class="token keyword">struct</span> <span class="token class-name">sembuf</span> buf<span class="token punctuation">;</span>
<span class="token number">48</span> 
<span class="token number">49</span> 	buf<span class="token punctuation">.</span>sem_num <span class="token operator">=</span> num<span class="token punctuation">;</span>
<span class="token number">50</span> 	buf<span class="token punctuation">.</span>sem_op <span class="token operator">=</span> op<span class="token punctuation">;</span>
<span class="token number">51</span> 	buf<span class="token punctuation">.</span>sem_flg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">52</span> 	<span class="token function">semop</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">53</span> <span class="token punctuation">}</span>
<span class="token number">54</span> 
<span class="token number">55</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">56</span> <span class="token punctuation">{</span>
<span class="token number">57</span> 	<span class="token keyword">int</span> shmid<span class="token punctuation">,</span> semid<span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">58</span> 	<span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>
<span class="token number">59</span> 	<span class="token class-name">key_t</span> key<span class="token punctuation">;</span>
<span class="token number">60</span> 	<span class="token keyword">char</span> <span class="token operator">*</span>shmaddr<span class="token punctuation">;</span>
<span class="token number">61</span> 
<span class="token number">62</span> 	key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">63</span> 	<span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">64</span> 		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;ftok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">65</span> 		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">66</span> 	<span class="token punctuation">}</span>
<span class="token number">67</span> 
<span class="token number">68</span> 	shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> N<span class="token punctuation">,</span> IPC_CREAT<span class="token operator">|</span><span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">69</span> 	<span class="token keyword">if</span> <span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">70</span> 		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;shmid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">71</span> 		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">72</span> 	<span class="token punctuation">}</span>
<span class="token number">73</span> 
<span class="token number">74</span> 	semid <span class="token operator">=</span> <span class="token function">semget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> IPC_CREAT<span class="token operator">|</span><span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">75</span> 	<span class="token keyword">if</span> <span class="token punctuation">(</span>semid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">76</span> 		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;semget&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">77</span> 		<span class="token keyword">goto</span> __ERROR1<span class="token punctuation">;</span>
<span class="token number">78</span> 	<span class="token punctuation">}</span>
<span class="token number">79</span> 	<span class="token function">init_sem</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">80</span> 
<span class="token number">81</span> 	shmaddr <span class="token operator">=</span> <span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">82</span> 	<span class="token keyword">if</span> <span class="token punctuation">(</span>shmaddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">83</span> 		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;shmaddr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">84</span> 		<span class="token keyword">goto</span> __ERROR2<span class="token punctuation">;</span>
<span class="token number">85</span> 	<span class="token punctuation">}</span>
<span class="token number">86</span> 
<span class="token number">87</span> 	pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">88</span> 	<span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">89</span> 		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fork&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">90</span> 		<span class="token keyword">goto</span> __ERROR2<span class="token punctuation">;</span>
<span class="token number">91</span> 	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">92</span> 		<span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
<span class="token number">93</span> 		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">94</span> 			<span class="token function">pv</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span> READ<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">95</span> 			p <span class="token operator">=</span> q <span class="token operator">=</span> shmaddr<span class="token punctuation">;</span>
<span class="token number">96</span> 			<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">97</span> 				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>q <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">98</span> 					<span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
<span class="token number">99</span> 				<span class="token punctuation">}</span>
<span class="token number">100</span> 				q<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token number">101</span> 			<span class="token punctuation">}</span>
<span class="token number">102</span> 			<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
<span class="token number">103</span> 			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> shmaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">104</span> 			<span class="token function">pv</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span> WRITE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">105</span> 		<span class="token punctuation">}</span>
<span class="token number">106</span> 	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token number">107</span> 		<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">108</span> 			<span class="token function">pv</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span> WRITE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">109</span> 			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;input &gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">110</span> 			<span class="token function">fgets</span><span class="token punctuation">(</span>shmaddr<span class="token punctuation">,</span> N<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">111</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>shmaddr<span class="token punctuation">,</span> <span class="token string">&quot;quit\\n&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">112</span> 				<span class="token function">pv</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span> READ<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">113</span> 			<span class="token punctuation">}</span>
<span class="token number">114</span> 			<span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> SIGUSR1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">115</span> 		<span class="token punctuation">}</span>
<span class="token number">116</span> 
<span class="token number">117</span> 	__ERROR2<span class="token operator">:</span>
<span class="token number">118</span> 		<span class="token function">semctl</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> IPC_RMID<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">119</span> 	__ERROR1<span class="token operator">:</span>
<span class="token number">120</span> 		<span class="token function">shmctl</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> IPC_RMID<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">121</span> 		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">122</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc share_sysv<span class="token punctuation">.</span>c <span class="token operator">-</span>o share_sysv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp share_sysv <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><p>在父进程的console下输入字符串，此时子进程会读取到这个字符串。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>share_sysv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image034.png" alt="ProcessCommunication_Image034"></p><h2 id="_4-5-进程通信之信号通信" tabindex="-1"><a class="header-anchor" href="#_4-5-进程通信之信号通信" aria-hidden="true">#</a> 4.5 进程通信之信号通信</h2><h3 id="_4-5-1-信号机制" tabindex="-1"><a class="header-anchor" href="#_4-5-1-信号机制" aria-hidden="true">#</a> 4.5.1 信号机制</h3><ol><li><p>一般地，中断主要是指硬件中断，比如GPIO中断、定时器中断，这些硬件中断时外设模块工作时，发送给CPU的，也是一种异步方式。</p></li><li><p>信号是软件层次上对中断机制的一种模拟，是一种异步通信方式。</p></li><li><p>Linux内核通过信号通知用户进程，不同的信号类型代表不同的事件。</p></li><li><p>Linux对早期的unix信号机制进行了扩展。</p></li></ol><h3 id="_4-5-2-常见信号类型" tabindex="-1"><a class="header-anchor" href="#_4-5-2-常见信号类型" aria-hidden="true">#</a> 4.5.2 常见信号类型</h3><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image035.png" alt="ProcessCommunication_Image035"></p><h3 id="_4-5-3-信号发送函数" tabindex="-1"><a class="header-anchor" href="#_4-5-3-信号发送函数" aria-hidden="true">#</a> 4.5.3 信号发送函数</h3><p><strong>kill函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>头文件  #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

       <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>

函数原型<span class="token keyword">int</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span>

参数  pid ： 指定接收进程的进程号

            <span class="token number">0</span>代表同组进程；<span class="token operator">-</span><span class="token number">1</span>代表所有除了INIT进程和当前进程之外的进程

     sig ： 信号类型

返回值 成功返回<span class="token number">0</span>，失败返回<span class="token constant">EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>raise函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>头文件  #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

       <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>

函数原型<span class="token keyword">int</span> <span class="token function">raise</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span>

参数  sig ： 信号类型

返回值 成功返回<span class="token number">0</span>，失败返回<span class="token constant">EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>alarm函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>头文件  #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

       <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>

函数原型 <span class="token keyword">int</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>

参数  seconds 定时器的时间

返回值 成功返回上个定时器的剩余时间，失败返回<span class="token constant">EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>pause函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>进程调用这个函数后会一直阻塞，直到而被信号中断，功能和sleep类似。

头文件  #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

       <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>

函数原型 <span class="token keyword">int</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

返回值  成功返回<span class="token number">0</span>，失败返回<span class="token constant">EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>signal函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>设置信号响应方式，请注意这个函数和kill、killall的区别，我们中文使用者会理解为发信号，实际上它并不是发信号。

头文件  #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

       <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>

函数原型 <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>

参数  signo 要设置的信号类型

     handler 指定的信号处理函数；

返回值 成功返回<span class="token number">0</span>，失败返回<span class="token constant">EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-4-进程捕捉信号" tabindex="-1"><a class="header-anchor" href="#_4-5-4-进程捕捉信号" aria-hidden="true">#</a> 4.5.4 进程捕捉信号</h3><p>程序源码（参考jz2440\\process_single\\send_single.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.捕捉终端发送过来的信号
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> 
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> 
<span class="token number">17</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">)</span>
<span class="token number">18</span> <span class="token punctuation">{</span>
<span class="token number">19</span>  	<span class="token keyword">switch</span> <span class="token punctuation">(</span>signo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">20</span> 		<span class="token keyword">case</span> SIGINT<span class="token operator">:</span>
<span class="token number">21</span> 			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I have got SIGINT\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">22</span> 			<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">23</span> 			
<span class="token number">24</span> 		<span class="token keyword">case</span> SIGQUIT<span class="token operator">:</span>
<span class="token number">25</span> 			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I have got SIGQUIT\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span> 			<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">27</span> 			
<span class="token number">28</span> 		<span class="token keyword">default</span><span class="token operator">:</span>
<span class="token number">29</span> 			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;don&#39;t respond to this signal[%d]\\n&quot;</span><span class="token punctuation">,</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span> 			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">31</span> 	<span class="token punctuation">}</span>
<span class="token number">32</span> <span class="token punctuation">}</span>
<span class="token number">33</span> 
<span class="token number">34</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">35</span> <span class="token punctuation">{</span>
<span class="token number">36</span> 	<span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span> 	<span class="token function">signal</span><span class="token punctuation">(</span>SIGQUIT<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">38</span> 	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">39</span> 		<span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">41</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc send_single<span class="token punctuation">.</span>c <span class="token operator">-</span>o send_single
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp send_single <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>send_single
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 实际上在利用共享内存实现进程间通信时，我们已经使用到了信号通信，父进程写完共享内存后发送信号通知子进程，子进程收到信号后开始读共享内存，这里就不在给出两个进程之间使用信号通信的例子了，请读者参考共享内存中实现两个进程通信的代码。</p><h2 id="_4-6-进程通信之socket通信" tabindex="-1"><a class="header-anchor" href="#_4-6-进程通信之socket通信" aria-hidden="true">#</a> 4.6 进程通信之socket通信</h2><h3 id="_4-6-1-什么是socket" tabindex="-1"><a class="header-anchor" href="#_4-6-1-什么是socket" aria-hidden="true">#</a> 4.6.1 什么是socket</h3><p>​ 先思考一个问题：网络环境中的进程如何实现通信？比如当我们使用QQ和好友聊天的时候，QQ进程是如何与服务器以及你好友所在的QQ进程之间通信的？这些靠的就是socket来实现的。</p><p>​ Socket起源于UNIX，Unix/Linux基本哲学之一就是“一切皆文件”，都可以用“打开open –&gt; 读写write/read –&gt; 关闭close”模式来操作。在《有名管道》那一节中，我们知道socket也是一种文件类型，只不过socket是一种伪文件，存在于内核缓冲区中，大小不变，一直是0。</p><p>​ socket文件一定是成对出现的，server端有一个套接字文件，client端也有一个套接字文件，每个进程需要和对应的套接字文件绑定，每个进程通过读写它的套接字文件，交由内核实现，如下所示。</p><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image036.png" alt="ProcessCommunication_Image036"></p><p>​ 一般地，socket用来实现网络环境中，不同主机上的进程通信，但是也可以用来在同一个主机上的不同进程之间通信，本小节主要探讨socket用在同一个主机上的不同进程间通信。</p><h3 id="_4-6-2-相关函数" tabindex="-1"><a class="header-anchor" href="#_4-6-2-相关函数" aria-hidden="true">#</a> 4.6.2 相关函数</h3><p><strong>socket函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>创建socket文件描述符函数

头文件#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

     <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

  原型<span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span>

  返回值： 成功，消息队列ID，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>bind函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>将socket文件描述符和某个socket文件绑定

头文件#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

     <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

原型<span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

参数： sockfd：利用系统调用<span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>建立的套接字描述符

      addr：代表需要绑定的本地地址信息
     
      addrlen<span class="token operator">:</span> 本地地址信息长度

返回值： 成功，消息队列ID，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>listen函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>设置监听某个socket文件描述符，设置能够同时和服务端连接的客户端数量，一般只有server会调用

头文件#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

     <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

原型<span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>

参数： sockfd：利用系统调用<span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>建立的套接字描述符

      backlog：server可以接受连接的最大client数量

返回值： 成功，消息队列ID，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>accept函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>等待client建立连接的函数，一般只有server会调用

头文件#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

     <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

原型<span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span><span class="token class-name">socklen_t</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

参数： sockfd：利用系统调用<span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>建立的套接字描述符

      addr：指向已经建立连接的对端client地址信息的指针

      addrlen<span class="token operator">:</span> 对端client地址信息长度

返回值： 成功，消息队列ID，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>connet函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>client主动连接server函数，一般只有client才会调用

头文件#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

     <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

原型<span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

参数： sockfd：利用系统调用<span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>建立的套接字描述符

      addr：指向已经建立连接的对端server地址信息的指针

      addrlen<span class="token operator">:</span> 对端server地址信息长度

返回值： 成功，消息队列ID，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>send函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>发送数据函数

头文件#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

     <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

原型<span class="token operator">:</span> <span class="token class-name">ssize_t</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>

参数： sockfd：指向要发送数据的socket文件描述符，已经建立连接的文件描述符

      buf<span class="token operator">:</span> 存放要发送数据的缓冲区

      len<span class="token operator">:</span> 实际要发送数据的字节数

      flags<span class="token operator">:</span> 一般为<span class="token number">0</span>或者如下的宏

			MSG_DONTROUTE  绕过路由表查找

			MSG_DONTWAIT   仅本操作非阻塞

			MSG_OOB　　　　  发送或接收带外数据

			MSG_PEEK　　    窥看外来消息

			MSG_WAITALL　　  等待所有数据

返回值： 成功，消息队列ID，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>recv函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>接收数据函数

头文件#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>

     <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

原型<span class="token operator">:</span> <span class="token class-name">ssize_t</span> <span class="token function">recv</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>

参数： sockfd：已经建立连接的文件描述符

	  buf<span class="token operator">:</span> 存放要接收数据的缓冲区

	  len<span class="token operator">:</span> 实际要接收数据的字节数

	  flags<span class="token operator">:</span>一般为<span class="token number">0</span>或者如下的宏

          MSG_DONTROUTE  绕过路由表查找

          MSG_DONTWAIT   仅本操作非阻塞

          MSG_OOB　　　　  发送或接收带外数据

          MSG_PEEK　　    窥看外来消息

          MSG_WAITALL　　  等待所有数据

返回值： 成功，消息队列ID，出错 <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-3-socket实现进程间通信" tabindex="-1"><a class="header-anchor" href="#_4-6-3-socket实现进程间通信" aria-hidden="true">#</a> 4.6.3 socket实现进程间通信</h3><p>程序实现一般步骤</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Server端

<span class="token number">1.</span>创建socket

<span class="token number">2.</span>绑定socket

<span class="token number">3.</span>设置监听

<span class="token number">4.</span>等待客户端连接

<span class="token number">5.</span>发送<span class="token operator">/</span>接收数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Client端</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.创建socket

2.绑定socket

3.连接

4.发送/接收数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>server源码（参考jz2440\\process_socket\\server.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.server打印client发送过来的字符串，并将该字符串回发给client
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> 
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>stat<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> #include <span class="token operator">&lt;</span>arpa<span class="token operator">/</span>inet<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">18</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>un<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">19</span> 
<span class="token number">20</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">21</span> <span class="token punctuation">{</span>
<span class="token number">22</span>     <span class="token keyword">int</span> lfd <span class="token punctuation">,</span>ret<span class="token punctuation">,</span> cfd<span class="token punctuation">;</span>
<span class="token number">23</span>     <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> serv<span class="token punctuation">,</span> client<span class="token punctuation">;</span>
<span class="token number">24</span>     <span class="token class-name">socklen_t</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">25</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">26</span>     <span class="token keyword">int</span> recvlen<span class="token punctuation">;</span>
<span class="token number">27</span> 
<span class="token number">28</span>     <span class="token comment">//创建socket</span>
<span class="token number">29</span>     lfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_LOCAL<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>lfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">31</span>         <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">32</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">33</span>     <span class="token punctuation">}</span>
<span class="token number">34</span> 
<span class="token number">35</span>     <span class="token comment">//如果套接字文件存在，删除套接字文件</span>
<span class="token number">36</span>     <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&quot;server.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span> 
<span class="token number">38</span>     <span class="token comment">//初始化server信息</span>
<span class="token number">39</span>     serv<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>
<span class="token number">40</span>     <span class="token function">strcpy</span><span class="token punctuation">(</span>serv<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> <span class="token string">&quot;server.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">41</span> 
<span class="token number">42</span>     <span class="token comment">//绑定</span>
<span class="token number">43</span>     ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">44</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">45</span>         <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">46</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">47</span>     <span class="token punctuation">}</span>
<span class="token number">48</span> 
<span class="token number">49</span>     <span class="token comment">//设置监听，设置能够同时和服务端连接的客户端数量</span>
<span class="token number">50</span>     ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">51</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">52</span>         <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;listen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">53</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">54</span>     <span class="token punctuation">}</span>
<span class="token number">55</span> 
<span class="token number">56</span>     <span class="token comment">//等待客户端连接</span>
<span class="token number">57</span>     cfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">58</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>cfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">59</span>         <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;accept error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">60</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">61</span>     <span class="token punctuation">}</span>
<span class="token number">62</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;=====client bind file:%s\\n&quot;</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span>sun_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">63</span>     
<span class="token number">64</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">65</span>         recvlen <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">66</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>recvlen <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">67</span>             <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;recv error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">68</span>             <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">69</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>recvlen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">70</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client disconnet...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">71</span>             <span class="token function">close</span><span class="token punctuation">(</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">72</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">73</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token number">74</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;server recv buf: %s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">75</span>             <span class="token function">send</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> recvlen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">76</span>         <span class="token punctuation">}</span>
<span class="token number">77</span>     <span class="token punctuation">}</span>
<span class="token number">78</span>     
<span class="token number">79</span>     <span class="token function">close</span><span class="token punctuation">(</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">80</span>     <span class="token function">close</span><span class="token punctuation">(</span>lfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">81</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">82</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>client源码（参考jz2440\\process_socket\\client.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token comment">/**********************************************************************
02  * 功能描述： 1.client从标准输入获取到一个字符串，然后将这个字符串发送给server
03  * 输入参数： 无
04  * 输出参数： 无
05  * 返 回 值： 无
06  * 修改日期        版本号     修改人          修改内容
07  * -----------------------------------------------
08  * 2020/05/16       V1.0      zh(ryan)        创建
09  ***********************************************************************/</span>
<span class="token number">10</span> 
<span class="token number">11</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">12</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">13</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">14</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">15</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>stat<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">16</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">17</span> #include <span class="token operator">&lt;</span>arpa<span class="token operator">/</span>inet<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">18</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>un<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">19</span> 
<span class="token number">20</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">21</span> <span class="token punctuation">{</span>
<span class="token number">22</span>     <span class="token keyword">int</span> lfd <span class="token punctuation">,</span>ret<span class="token punctuation">;</span>
<span class="token number">23</span>     <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> serv<span class="token punctuation">,</span> client<span class="token punctuation">;</span>
<span class="token number">24</span>     <span class="token class-name">socklen_t</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">25</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">26</span>     <span class="token keyword">int</span> recvlen<span class="token punctuation">;</span>
<span class="token number">27</span> 
<span class="token number">28</span>     <span class="token comment">//创建socket</span>
<span class="token number">29</span>     lfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_LOCAL<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>lfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">31</span>         <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">32</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">33</span>     <span class="token punctuation">}</span>
<span class="token number">34</span> 
<span class="token number">35</span>     <span class="token comment">//如果套接字文件存在，删除套接字文件</span>
<span class="token number">36</span>     <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&quot;client.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span> 
<span class="token number">38</span>     <span class="token comment">//给客户端绑定一个套接字文件</span>
<span class="token number">39</span>     client<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>
<span class="token number">40</span>     <span class="token function">strcpy</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> <span class="token string">&quot;client.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">41</span>     ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">43</span>         <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">44</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">45</span>     <span class="token punctuation">}</span>
<span class="token number">46</span> 
<span class="token number">47</span>     <span class="token comment">//初始化server信息</span>
<span class="token number">48</span>     serv<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>
<span class="token number">49</span>     <span class="token function">strcpy</span><span class="token punctuation">(</span>serv<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> <span class="token string">&quot;server.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">50</span>     <span class="token comment">//连接</span>
<span class="token number">51</span>     <span class="token function">connect</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">52</span> 
<span class="token number">53</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">54</span>         <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">55</span>         <span class="token function">send</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">56</span> 
<span class="token number">57</span>         <span class="token function">recv</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">58</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client recv buf: %s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">59</span>     <span class="token punctuation">}</span>
<span class="token number">60</span> 
<span class="token number">61</span>     <span class="token function">close</span><span class="token punctuation">(</span>lfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">62</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">63</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JZ2440实验</strong></p><ul><li>编译</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc server<span class="token punctuation">.</span>c <span class="token operator">-</span>o server

arm<span class="token operator">-</span>linux<span class="token operator">-</span>gcc client<span class="token punctuation">.</span>c <span class="token operator">-</span>o client
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>拷贝到NFS文件系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cp server <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs

cp client <span class="token operator">/</span>work<span class="token operator">/</span>nfs_root<span class="token operator">/</span>first_fs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行</li></ul><p>为方便看程序运行结果，server在后台执行；client在前台运行，client能够接收来自终端的输入。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>server <span class="token operator">&amp;</span>

<span class="token punctuation">.</span><span class="token operator">/</span>client
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/ProcessCommunication_Image037.png" alt="ProcessCommunication_Image037"></p><h3 id="_4-6-4-一个server和多个client之间的通信" tabindex="-1"><a class="header-anchor" href="#_4-6-4-一个server和多个client之间的通信" aria-hidden="true">#</a> 4.6.4 一个server和多个client之间的通信</h3><p>​ 在实际项目开发中， 更常见的一种场景是：一个server要和多个client之间通信，这部分实现方式交给读者自行实现，实现的方式有很多，比如如下两种方式，当然还要其他方法。</p><ol><li><p>多进程实现，一个主进程用来实现检测client的连接，每检测一次client连接，则为这个client创建一个专门的进程，用于实现两者间通信。</p></li><li><p>也可以使用多线程实现，一个主线程用来检测client的连接，每检测一次client连接，则为这个client创建一个专门的线程，用于实现两者间通信。</p></li></ol>`,343);function v(b,g){const s=o("center");return c(),l("div",null,[u,a(s,null,{default:p(()=>[r]),_:1}),k,a(s,null,{default:p(()=>[d]),_:1}),m])}const f=t(i,[["render",v],["__file","04_ProcessCommunication.html.vue"]]);export{f as default};
