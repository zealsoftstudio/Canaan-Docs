import{_ as n,o as s,c as a,e as p}from"./app-21fd3c9b.js";const e={},t=p(`<h1 id="_1-framebuffer应用开发" tabindex="-1"><a class="header-anchor" href="#_1-framebuffer应用开发" aria-hidden="true">#</a> 1 Framebuffer应用开发</h1><h2 id="_1-1-lcd-framebuffer操作原理" tabindex="-1"><a class="header-anchor" href="#_1-1-lcd-framebuffer操作原理" aria-hidden="true">#</a> 1.1 LCD Framebuffer操作原理</h2><p>​ LCD Framebuffer 就是一块显存，在嵌入式系统中，显存是被包含在内存中。LCD Framebuffer里的若干字节（根据驱动程序对LCD控制器的配置而定）表示LCD屏幕中的一个像素点，一一对应整个LCD屏幕。举个例子，LCD屏幕是800* 600的分辨率，即LCD屏幕存在480000个像素点，若每个像素点4个字节表示，那么LCD Framebuffer显存大小为480000 * 4=960000字节，即1.92MB。因此我们的内存将会分割至少1.92MB的空间用作显存。具体地址在哪里，这个就是又驱动程序去定，应用程序只需直接使用即可，硬件相关操作已由驱动程序封装好。</p><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00001.png" alt="FramebufferAPP_Image00001"></p><p>​ 如上图，我们只需要往Framebuffer中填入不同的值，驱动程序和硬件控制器就会把这些数据传输到对应LCD屏幕上的像素点，从而显示不同的颜色。由此可知，我们应用程序只需要针对Framebuffer操作即可，其他交给驱动程序和硬件。</p><h2 id="_1-2-framebuffer-api接口" tabindex="-1"><a class="header-anchor" href="#_1-2-framebuffer-api接口" aria-hidden="true">#</a> 1.2 Framebuffer API接口</h2><h3 id="_1-2-1-open系统调用" tabindex="-1"><a class="header-anchor" href="#_1-2-1-open系统调用" aria-hidden="true">#</a> 1.2.1 open系统调用</h3><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00002.png" alt="FramebufferAPP_Image00002"></p><p>头文件：#include &lt;sys/types.h&gt;，#include &lt;sys/stat.h&gt;，#include &lt;fcntl.h&gt;</p><p>函数原型：</p><ul><li>int open(const char *pathname, int flags);</li><li>int open(const char *pathname, int flags, mode_t mode);</li></ul><p>函数说明：</p><ul><li><p>pathname 表示打开文件的路径；</p></li><li><p>Flags表示打开文件的方式，常用的有以下6种，</p><p>①：O_RDWR表示可读可写方式打开;</p><p>②：O_RDONLY表示只读方式打开;</p><p>③：O_WRONLY表示只写方式打开;</p><p>④：O_APPEND 表示如果这个文件中本来是有内容的，则新写入的内容会接续到原来内容的后面;</p><p>⑤：O_TRUNC表示如果这个文件中本来是有内容的，则原来的内容会被丢弃，截断；</p><p>⑥：O_CREAT表示当前打开文件不存在，我们创建它并打开它，通常与O_EXCL结合使用，当没有文件时创建文件，有这个文件时会报错提醒我们；</p></li></ul><p>Mode表示创建文件的权限，只有在flags中使用了O_CREAT时才有效，否则忽略。</p><p>返回值：打开成功返回文件描述符，失败将返回-1。</p><h3 id="_1-2-2-ioctl系统调用" tabindex="-1"><a class="header-anchor" href="#_1-2-2-ioctl系统调用" aria-hidden="true">#</a> 1.2.2 ioctl系统调用</h3><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00003.png" alt="FramebufferAPP_Image00003"></p><p>头文件：#include &lt;sys/ioctl.h&gt;</p><p>函数原型：</p><ul><li>int ioctl(int fd, unsigned long request, ...);</li></ul><p>函数说明：</p><ul><li>fd 表示文件描述符；</li><li>request表示与驱动程序交互的命令，用不同的命令控制驱动程序输出我们需要的数据；</li><li>… 表示可变参数arg，根据request命令，设备驱动程序返回输出的数据。</li></ul><p>返回值：打开成功返回文件描述符，失败将返回-1。</p><h3 id="_1-2-3-mmap系统调用" tabindex="-1"><a class="header-anchor" href="#_1-2-3-mmap系统调用" aria-hidden="true">#</a> 1.2.3 mmap系统调用</h3><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00004.png" alt="FramebufferAPP_Image00004"></p><p>头文件：#include &lt;sys/mman.h&gt;</p><p>函数原型：</p><ul><li>void *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);</li></ul><p>函数说明：</p><ul><li><p>addr表示指定映射的內存起始地址，通常设为 NULL表示让系统自动选定地址，并在成功映射后返回该地址；</p></li><li><p>length表示将文件中多大的内容映射到内存中；</p></li><li><p>prot 表示映射区域的保护方式，可以为以下4种方式的组合</p><p>①PROT_EXEC 映射区域可被执行</p><p>②PROT_READ 映射区域可被读写</p><p>③PROT_WRITE 映射区域可被写入</p><p>④PROT_NONE 映射区域不能存取</p></li><li><p>Flags 表示影响映射区域的不同特性，常用的有以下两种</p><p>①MAP_SHARED 表示对映射区域写入的数据会复制回文件内，原来的文件会改变。</p><p>②MAP_PRIVATE 表示对映射区域的操作会产生一个映射文件的复制，对此区域的任何修改都不会写回原来的文件内容中。</p></li></ul><p>返回值：若成功映射，将返回指向映射的区域的指针，失败将返回-1。</p><h2 id="_1-3-在lcd上描点操作" tabindex="-1"><a class="header-anchor" href="#_1-3-在lcd上描点操作" aria-hidden="true">#</a> 1.3 在LCD上描点操作</h2><h3 id="_1-3-1-在lcd上显示点阵理论基础" tabindex="-1"><a class="header-anchor" href="#_1-3-1-在lcd上显示点阵理论基础" aria-hidden="true">#</a> 1.3.1 在LCD上显示点阵理论基础</h3><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00005.png" alt="FramebufferAPP_Image00005"></p><p>​ 如上图，当我们需要显示一个字母‘A’时，是通过判断点阵的每一个位数值状态，来填充颜色，达到显示字符效果。其中‘1’表示一种颜色，‘0’表示填充另一种颜色。上图的是8*16的点阵，我们也可以用其他不同大小点阵，只要有这个点阵，我们就可以在LCD上面描点，达到显示字符的效果。</p><h3 id="_1-3-2-获取fb-var-screeninfo结构体" tabindex="-1"><a class="header-anchor" href="#_1-3-2-获取fb-var-screeninfo结构体" aria-hidden="true">#</a> 1.3.2 获取fb_var_screeninfo结构体</h3><p>​ 在用点阵显示字符之前，我们需要先从设备fb0中获取相关的LCD信息，下图截取我们将用到的fb_info结构体部分内容。</p><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00006.png" alt="FramebufferAPP_Image00006"></p><p>​ 通过系统调用ioctl，获取xres(x方向总像素点)，yres（y方向总像素点），bits_per_pixel（每个像素点占据的位数），根据获取的三个资源，外加点阵，根据这四个资源，我们就可以显示一个字符。</p><p>程序文件：show_ascii.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4718</span>        fd_fb <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/fb0&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4719</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd_fb <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">4720</span>        <span class="token punctuation">{</span>
<span class="token number">4721</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t open /dev/fb0\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4722</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">4723</span>        <span class="token punctuation">}</span>
<span class="token number">4724</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd_fb<span class="token punctuation">,</span> FBIOGET_VSCREENINFO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">4725</span>        <span class="token punctuation">{</span>
<span class="token number">4726</span>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t get var\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4727</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">4728</span>		<span class="token punctuation">}</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 先打开LCD设备（fb0），获得文件描述符，再通过ioctl获取fb_var_screeninfo信息并保存在var变量，后续只需访问var这个结构体，就可以获得xres(x方向总像素点)，yres（y方向总像素点），bits_per_pixel（每个像素点占据的位数）这三个关于fb0的资源。</p><h3 id="_1-3-3-根据fb-var-screeninfo计算变量" tabindex="-1"><a class="header-anchor" href="#_1-3-3-根据fb-var-screeninfo计算变量" aria-hidden="true">#</a> 1.3.3 根据fb_var_screeninfo计算变量</h3><p>fb_var_screeninfo已保存在var结构体变量中，接着来访问var结构体变量即可</p><p>根据xres与bits_per_pixel算出每行像素点所占据的字节数</p><p>程序文件：show_ascii.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4730</span>	line_width  <span class="token operator">=</span> var<span class="token punctuation">.</span>xres <span class="token operator">*</span> var<span class="token punctuation">.</span>bits_per_pixel <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据bits_per_pixel算出每个像素点所占据的字节数</p><p>程序文件：show_ascii.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4731</span>    pixel_width <span class="token operator">=</span> var<span class="token punctuation">.</span>bits_per_pixel <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据xres，yres，bits_per_pixel算出全部像素点所占据的字节总和</p><p>程序文件：show_ascii.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4732</span>    screen_size <span class="token operator">=</span> var<span class="token punctuation">.</span>xres <span class="token operator">*</span> var<span class="token punctuation">.</span>yres <span class="token operator">*</span> var<span class="token punctuation">.</span>bits_per_pixel <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-4-使用mmap系统调用-映射内存" tabindex="-1"><a class="header-anchor" href="#_1-3-4-使用mmap系统调用-映射内存" aria-hidden="true">#</a> 1.3.4 使用mmap系统调用，映射内存</h3><p>程序文件：show_ascii.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4733</span>	fbmem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token punctuation">,</span> screen_size<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> 			PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd_fb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4734</span>	<span class="token keyword">if</span> <span class="token punctuation">(</span>fbmem <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">4735</span>	<span class="token punctuation">{</span>
<span class="token number">4736</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t mmap\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4737</span>		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">4738</span>	<span class="token punctuation">}</span>
<span class="token number">4739</span>
<span class="token number">4740</span>	<span class="token comment">/* 清屏: 全部设为黑色 */</span>
<span class="token number">4741</span>	<span class="token function">memset</span><span class="token punctuation">(</span>fbmem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> screen_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 调用mmap将显存映射在内存中，以可读可写（PROT_READ | PROT_WRITE）及内存回写（MAP_SHARED）的方式映射，从而获得一个指向映射在内存空间的首地址fbmem，后续操作就是在这个首地址的基础上计算各种不同的偏移量，填充颜色值。</p><h3 id="_1-3-5-描点函数编写" tabindex="-1"><a class="header-anchor" href="#_1-3-5-描点函数编写" aria-hidden="true">#</a> 1.3.5 描点函数编写</h3><p>程序文件：show_ascii.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4641</span>	<span class="token keyword">void</span> <span class="token function">lcd_put_pixel</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>描点函数有3个参数，x坐标，y坐标，像素点颜色值。</p><p>程序文件：show_ascii.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4643</span>		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pen_8 <span class="token operator">=</span> fbmem<span class="token operator">+</span>y<span class="token operator">*</span>line_width<span class="token operator">+</span>x<span class="token operator">*</span>pixel_width<span class="token punctuation">;</span>
<span class="token number">4644</span>		<span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>pen_16<span class="token punctuation">;</span>	
<span class="token number">4645</span>		<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>pen_32<span class="token punctuation">;</span>	
<span class="token number">4646</span>
<span class="token number">4647</span>		<span class="token keyword">unsigned</span> <span class="token keyword">int</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">;</span>	
<span class="token number">4648</span>
<span class="token number">4649</span>		pen_16 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span>pen_8<span class="token punctuation">;</span>
<span class="token number">4650</span>		pen_32 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>pen_8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在此处函数参数x与y表示的是像素点的坐标，而单个像素点所占据的显存大小可能会有不同的情况出现，如1字节表示一个像素点，2字节表示一个像素点，4字节表示一个像素点等，为了更多的兼容不同的情况，因此申请3个指针，pen_8指向的是占据1个字节的像素点空间, pen_16指向的是占据2个字节的像素点空间，pen_32指向的是占据4个字节的像素点空间。</p><p>fbmem是系统调用mmap返回的显存首地址，根据fbmem计算填充颜色的内存空间。</p><p>当像素点占据1个字节空间时</p><p>对应描点地址= fbmem+Y * 一行所占据的字节数 + x * 每个像素点所占据的字节数</p><p>程序文件：show_ascii.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4652</span>		<span class="token keyword">switch</span> <span class="token punctuation">(</span>var<span class="token punctuation">.</span>bits_per_pixel<span class="token punctuation">)</span>
<span class="token number">4653</span>		<span class="token punctuation">{</span>
<span class="token number">4654</span>			<span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>
<span class="token number">4655</span>			<span class="token punctuation">{</span>
<span class="token number">4656</span>				<span class="token operator">*</span>pen_8 <span class="token operator">=</span> color<span class="token punctuation">;</span>
<span class="token number">4657</span>				<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">4658</span>			<span class="token punctuation">}</span>
<span class="token number">4659</span>			<span class="token keyword">case</span> <span class="token number">16</span><span class="token operator">:</span>
<span class="token number">4660</span>			<span class="token punctuation">{</span>
<span class="token number">4661</span>				<span class="token comment">/* 565 */</span>
<span class="token number">4662</span>				red   <span class="token operator">=</span> <span class="token punctuation">(</span>color <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
<span class="token number">4663</span>				green <span class="token operator">=</span> <span class="token punctuation">(</span>color <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
<span class="token number">4664</span>				blue  <span class="token operator">=</span> <span class="token punctuation">(</span>color <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
<span class="token number">4665</span>				color <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>red <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>green <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">|</span> 						<span class="token punctuation">(</span>blue <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4666</span>				<span class="token operator">*</span>pen_16 <span class="token operator">=</span> color<span class="token punctuation">;</span>
<span class="token number">4667</span>				<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">4668</span>			<span class="token punctuation">}</span>
<span class="token number">4669</span>			<span class="token keyword">case</span> <span class="token number">32</span><span class="token operator">:</span>
<span class="token number">4670</span>			<span class="token punctuation">{</span>
<span class="token number">4671</span>				<span class="token operator">*</span>pen_32 <span class="token operator">=</span> color<span class="token punctuation">;</span>
<span class="token number">4672</span>				<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">4673</span>			<span class="token punctuation">}</span>
<span class="token number">4674</span>			<span class="token keyword">default</span><span class="token operator">:</span>
<span class="token number">4675</span>			<span class="token punctuation">{</span>
<span class="token number">4676</span>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t surport %dbpp\\n&quot;</span><span class="token punctuation">,</span> var<span class="token punctuation">.</span>bits_per_pixel<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4677</span>				<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">4678</span>			<span class="token punctuation">}</span>
<span class="token number">4679</span>		<span class="token punctuation">}</span>
<span class="token number">4680</span>	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 根据设备fb0实际的bits_per_pixel值，选择对应的pen（pen_8，pen_16，pen_32其中一个），最后把color颜色变量传入选择的pen中。</p><h2 id="_1-4-在lcd上使用点阵写字" tabindex="-1"><a class="header-anchor" href="#_1-4-在lcd上使用点阵写字" aria-hidden="true">#</a> 1.4 在LCD上使用点阵写字</h2><h3 id="_1-4-1-在lcd上显示英文字母" tabindex="-1"><a class="header-anchor" href="#_1-4-1-在lcd上显示英文字母" aria-hidden="true">#</a> 1.4.1 在LCD上显示英文字母</h3><p>①找出英文字母在点阵数组中的地址，c所代表的是一个英文字母（ASCII值）。</p><p>程序文件：show_ascii.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4693</span>		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>dots <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>fontdata_8x16<span class="token punctuation">[</span>c<span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②根据获得的英文字母点阵，每一位依次判断，描点，‘1’表示白色，‘0’表示黑色。</p><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00007.png" alt="FramebufferAPP_Image00007"></p><p>​ 根据上图，我们分析下如何利用点阵在LCD上显示一个英文字母，因为有十六行，所以首先要有一个循环16次的大循环，然后每一行里有8位，那么在每一个大循环里也需要一个循环8次的小循环，小循环里的判断单行的描点情况，如果是1，就填充白色，如果是0就填充黑色，如此一来，就可以显示出黑色底，白色轮廓的英文字母。</p><p>程序文件：show_ascii.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4697</span>		<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">4698</span>		<span class="token punctuation">{</span>
<span class="token number">4699</span>			byte <span class="token operator">=</span> dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">4700</span>			<span class="token keyword">for</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> b <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> b<span class="token operator">--</span><span class="token punctuation">)</span>
<span class="token number">4701</span>			<span class="token punctuation">{</span>
<span class="token number">4702</span>				<span class="token keyword">if</span> <span class="token punctuation">(</span>byte <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">4703</span>				<span class="token punctuation">{</span>
<span class="token number">4704</span>					<span class="token comment">/* show */</span>
<span class="token number">4705</span>					<span class="token function">lcd_put_pixel</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">7</span><span class="token operator">-</span>b<span class="token punctuation">,</span> y<span class="token operator">+</span>i<span class="token punctuation">,</span> <span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 白 */</span>
<span class="token number">4706</span>				<span class="token punctuation">}</span>
<span class="token number">4707</span>				<span class="token keyword">else</span>
<span class="token number">4708</span>				<span class="token punctuation">{</span>
<span class="token number">4709</span>					<span class="token comment">/* hide */</span>
<span class="token number">4710</span>					<span class="token function">lcd_put_pixel</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">7</span><span class="token operator">-</span>b<span class="token punctuation">,</span> y<span class="token operator">+</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 黑 */</span>
<span class="token number">4711</span>				<span class="token punctuation">}</span>
<span class="token number">4712</span>			<span class="token punctuation">}</span>
<span class="token number">4713</span>	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③调用我们编写的lcd_put_ascii函数</p><p>程序文件：show_ascii.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4743</span> <span class="token function">lcd_put_ascii</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>xres<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> var<span class="token punctuation">.</span>yres<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*在屏幕中间显示8*16的字母A*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④编译c文件show_ascii.c</p><p>编译命令：arm-linux-gnueabihf-gcc -o show_ascii show_ascii.c</p><p>⑤将编译出来的show_ascii传输到开发板，并进入show_ascii的目录下</p><p>执行命令：./show_ascii</p><p>如果实验成功，我们将看到屏幕中间会显示出一个白色的字母‘A’。</p><h3 id="_1-4-2-在lcd上显示汉字" tabindex="-1"><a class="header-anchor" href="#_1-4-2-在lcd上显示汉字" aria-hidden="true">#</a> 1.4.2 在LCD上显示汉字</h3><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00008.png" alt="FramebufferAPP_Image00008"></p><p>​ 与显示英文字母有点不同，因为汉字的点阵我们是需要通过汉字库提取出来，并没有直接提供点阵数组，因此我们程序开头需要打开汉字库文件(HZK16)，然后再找到相应的位置，提取出汉字的点阵，最后再按显示英文字母一样显示它，不过这个汉字是16*16的。</p><p>① 打开汉字库文件</p><p>程序文件：show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4760</span>	fd_hzk16 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;HZK16&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② 获取汉字库文件的属性，存在hzk_stat结构体变量中</p><p>程序文件：show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4793</span>	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fstat</span><span class="token punctuation">(</span>fd_hzk16<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hzk_stat<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处主要是用知道该文件的大小，因为后面mmap时需要知道映射的文件大小。</p><p>③使用mmap系统调用</p><p>程序文件：show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4798</span>	hzkmem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token punctuation">,</span> hzk_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">,</span> 				PROT_READ<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd_hzk16<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>hzkmem与fbmem类似，也是一个指向映射内存的指针，但是它是指向汉字库，方便</p><p>后续计算汉字点阵偏移位置用。</p><p>④使用汉字库，调出点阵显示汉字</p><p>​ HZK16 字库是符合GB2312标准的16×16点阵字库HZK16的编码，每个字需要32个字节的点阵来表示，例如我们将要显示的‘中’字，编码是D6D0，难道就是2个字节表示吗？不是说32字节吗？D6D0编码是一个类似于索引码，D6是区码，D0是位码，先要找到D6-A1才是真正区，在D6-A1区里找到D0-A1的真正位置，这才是‘中’字点阵的起始位置（减去A1是为了兼容ascii），每一个区有94个汉字。</p><p>程序文件：show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4734</span>		<span class="token keyword">unsigned</span> <span class="token keyword">int</span> area  <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0xA1</span><span class="token punctuation">;</span>
<span class="token number">4735</span>		<span class="token keyword">unsigned</span> <span class="token keyword">int</span> where <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0xA1</span><span class="token punctuation">;</span>
<span class="token number">4736</span>		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>dots <span class="token operator">=</span> hzkmem <span class="token operator">+</span> <span class="token punctuation">(</span>area <span class="token operator">*</span> <span class="token number">94</span> <span class="token operator">+</span> where<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00009.png" alt="FramebufferAPP_Image00009"></p><p>​ 上图是汉字点阵排布的示意图，总共有十六行，因此需要一个循环16次的大循环，考虑到一行有两个字节，我们大循环中加入一个循环2次的循环用于区分是哪个字节，最后判断当前字节的每一位，如果为 ‘1’描白色，如果为‘0’描黑色</p><p>程序文件：show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4740</span>	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">4741</span>			<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">4742</span>			<span class="token punctuation">{</span>
<span class="token number">4743</span>				byte <span class="token operator">=</span> dots<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">4744</span>				<span class="token keyword">for</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> b <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> b<span class="token operator">--</span><span class="token punctuation">)</span>
<span class="token number">4745</span>				<span class="token punctuation">{</span>
<span class="token number">4746</span>					<span class="token keyword">if</span> <span class="token punctuation">(</span>byte <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">4747</span>					<span class="token punctuation">{</span>
<span class="token number">4748</span>						<span class="token comment">/* show */</span>
<span class="token number">4749</span>						<span class="token function">lcd_put_pixel</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">7</span><span class="token operator">-</span>b<span class="token punctuation">,</span> y<span class="token operator">+</span>i<span class="token punctuation">,</span> <span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 白 */</span>
<span class="token number">4750</span>					<span class="token punctuation">}</span>
<span class="token number">4751</span>					<span class="token keyword">else</span>
<span class="token number">4752</span>					<span class="token punctuation">{</span>
<span class="token number">4753</span>						<span class="token comment">/* hide */</span>
<span class="token number">4754</span>						<span class="token function">lcd_put_pixel</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">7</span><span class="token operator">-</span>b<span class="token punctuation">,</span> y<span class="token operator">+</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 黑 */</span>
<span class="token number">4755</span>					<span class="token punctuation">}</span>	
<span class="token number">4756</span>				<span class="token punctuation">}</span>
<span class="token number">4757</span>			<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤调用我们编写的lcd_put_chinese函数</p><p>程序文件：show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4810</span>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;chinese code: %02x %02x\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4811</span>	<span class="token function">lcd_put_chinese</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span>xres<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span>  var<span class="token punctuation">.</span>yres<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>⑥编译c文件show_font.c</p><p>编译命令：arm-linux-gnueabihf-gcc -o show_font show_font.c</p><p>注：使用此命令HZK16文件必须与show_font.C在同一目录下。</p><p>⑦将编译出来的show_font传输到开发板，并进入show_font的目录下</p><p>执行命令：./show_font</p><p>如果实验成功，我们将看到屏幕中间会显示出一个白色的字母‘A’与汉字‘中’，同时在串口打印信息中看到‘中’对应的编码。</p><p><code>chinese code: d6 d0</code></p><h2 id="_1-5-搭建freetype相关环境" tabindex="-1"><a class="header-anchor" href="#_1-5-搭建freetype相关环境" aria-hidden="true">#</a> 1.5 搭建freetype相关环境</h2><h3 id="_1-5-1-交叉编译freetype-并安装" tabindex="-1"><a class="header-anchor" href="#_1-5-1-交叉编译freetype-并安装" aria-hidden="true">#</a> 1.5.1 交叉编译freetype，并安装</h3><p>①解压freetype源文件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tar xjf freetype<span class="token operator">-</span><span class="token number">2.4</span><span class="token number">.10</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>bz2 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②进入解压后的freetype-2.4.10目录</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cd freetype<span class="token operator">-</span><span class="token number">2.4</span><span class="token number">.10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③配置freetype-2.4.10</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>configure <span class="token operator">--</span>host<span class="token operator">=</span>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf <span class="token operator">--</span>prefix<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>book<span class="token operator">/</span><span class="token number">100</span>ask_imx6ull<span class="token operator">-</span>sdk<span class="token operator">/</span>ToolChain<span class="token operator">/</span>gcc<span class="token operator">-</span>linaro<span class="token operator">-</span><span class="token number">6.2</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">2016.11</span><span class="token operator">-</span>x86_64_arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf<span class="token operator">/</span>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf<span class="token operator">/</span>libc<span class="token operator">/</span>usr<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④建个目录，避免后面安装出错提示缺少这个internal目录</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>mkdir <span class="token operator">/</span>home<span class="token operator">/</span>book<span class="token operator">/</span><span class="token number">100</span>ask_imx6ull<span class="token operator">-</span>sdk<span class="token operator">/</span>ToolChain<span class="token operator">/</span>gcc<span class="token operator">-</span>linaro<span class="token operator">-</span><span class="token number">6.2</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">2016.11</span><span class="token operator">-</span>x86_64_arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf<span class="token operator">/</span>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf<span class="token operator">/</span>libc<span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>freetype2<span class="token operator">/</span>freetype<span class="token operator">/</span>internal <span class="token operator">-</span>p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④编译</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>make
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑤安装</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>make install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑥移动freetype头文件，避免以后编译总是需要指定头文件路径</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>mv <span class="token operator">/</span>home<span class="token operator">/</span>book<span class="token operator">/</span><span class="token number">100</span>ask_imx6ull<span class="token operator">-</span>sdk<span class="token operator">/</span>ToolChain<span class="token operator">/</span>gcc<span class="token operator">-</span>linaro<span class="token operator">-</span><span class="token number">6.2</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">2016.11</span><span class="token operator">-</span>x86_64_arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf<span class="token operator">/</span>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf<span class="token operator">/</span>libc<span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>freetype2<span class="token operator">/</span>freetype <span class="token operator">/</span>home<span class="token operator">/</span>book<span class="token operator">/</span><span class="token number">100</span>ask_imx6ull<span class="token operator">-</span>sdk<span class="token operator">/</span>ToolChain<span class="token operator">/</span>gcc<span class="token operator">-</span>linaro<span class="token operator">-</span><span class="token number">6.2</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">2016.11</span><span class="token operator">-</span>x86_64_arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf<span class="token operator">/</span>arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf<span class="token operator">/</span>libc<span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-5-2-freetype库-头文件移植至开发板" tabindex="-1"><a class="header-anchor" href="#_1-5-2-freetype库-头文件移植至开发板" aria-hidden="true">#</a> 1.5.2 freetype库，头文件移植至开发板</h4><p>​ 由于100ask开发板已经有freetype相关的库和头文件，因此不需要移植，如果开发板没有freetype库和头文件就需要按以下方法移植</p><p>/home/book/100ask_imx6ull-sdk/ToolChain/gcc-linaro-6.2.1-2016.11-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf/libc/usr/include/* 复制到开发板的头文件目录中</p><p>/home/book/100ask_imx6ull-sdk/ToolChain/gcc-linaro-6.2.1-2016.11-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf/libc/usr/lib/<em>so</em> 复制到开发板的库文件目录中</p><p>注：链接文件需要保持它的链接属性（即加-d选项）。</p><h2 id="_1-6-使用freetype" tabindex="-1"><a class="header-anchor" href="#_1-6-使用freetype" aria-hidden="true">#</a> 1.6 使用freetype</h2><h3 id="_1-5-1-矢量字体引入" tabindex="-1"><a class="header-anchor" href="#_1-5-1-矢量字体引入" aria-hidden="true">#</a> 1.5.1 矢量字体引入</h3><p>​ 点阵显示英文字母，汉字时，大小固定，如果放大会有锯齿出现，为了解决这个问题，引用矢量字体。</p><p>矢量字体形成分三步，若干的关键点，数学曲线（贝塞尔曲线），填充颜色组合而成。</p><p>①假设A字母的关键点如图中的黄色圈圈，确定关键点。</p><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00010.png" alt="FramebufferAPP_Image00010"></p><p>②用数学曲线将关键点都连接起来，成为封闭的曲线。</p><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00011.png" alt="FramebufferAPP_Image00011"></p><p>③最后把封闭空间填满颜色，就显示出一个A字母。</p><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00012.png" alt="FramebufferAPP_Image00012"></p><p>​ 如果需要放大或者缩小字体，关键点的相对位置是不变的，跟进放大比例放大或缩小，但是相对位置不变，好像分数中的1/2 和 2/4，比例是不变的，但是值却大了，类似这个味道。</p><h3 id="_1-5-2-freetype理论介绍" tabindex="-1"><a class="header-anchor" href="#_1-5-2-freetype理论介绍" aria-hidden="true">#</a> 1.5.2 Freetype理论介绍</h3><p>​ 开源的Freetype字体引擎库它提供统一的接口来访问多种字体格式文件，从而实现矢量字体显示。我们只需要移植这个字体引擎，调用对应的API接口，提供字体关键点，就可以让freetype库帮我们实现闭合曲线，填充颜色，达到显示矢量字体的目的。</p><p>关键点（glyph）存在字体文件中，Windows使用的字体文件在FONTS目录下，扩展名为TTF的都是矢量字库，本次使用实验使用的是新宋字体simsun.ttc。</p><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00013.png" alt="FramebufferAPP_Image00013"></p><p>字体文件结构如上图</p><p>​ Charmaps表示字符映射表，字体文件可能支持哪一些编码，GBK，UNICODE，BIG5还是别的编码，如果字体文件支持该编码，跟进编码，通过charmap，找到对应的glyph，一般而言都支持UNICODE码。</p><p>有了以上基础，我们想象一个文字的显示过程</p><ul><li>①给定一个文字吗‘A’（0x41），‘中’（GBK，UNICODE ,BIG5）可以确定它的编码值；</li><li>②跟进编码值，从枝头文件中通过charmap找到对应的关键点（glyph）；</li><li>③设置字体大；</li><li>④用某些函数把关键点（glyph）缩放为我们设置的字体大小；</li><li>⑤转换为位图点阵</li><li>⑥在LCD上显示出来</li></ul><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00014.png" alt="FramebufferAPP_Image00014"></p><p>​ 如上图，参照step1，step2，step3里的内容，可以学习如何使用freetype库，大致总结下，为如下步骤。</p><p>①初始化：FT_InitFreetype</p><p>②加载（打开）字体Face：FT_New_Face</p><p>③设置字体大小：FT_Set_Char_Sizes 或 FT_Set_Pixel_Sizes</p><p>④选择charmap：FT_Select_Charmap</p><p>⑤根据编码值charcode找到glyph : glyph_index = FT_Get_Char_Index（face，charcode）</p><p>⑥根据glyph_index取出glyph：FT_Load_Glyph（face，glyph_index）</p><p>⑦转为位图：FT_Render_Glyph</p><p>⑧移动或旋转:FT_Set_Transform</p><h3 id="_1-5-2-在lcd上显示一个矢量字体" tabindex="-1"><a class="header-anchor" href="#_1-5-2-在lcd上显示一个矢量字体" aria-hidden="true">#</a> 1.5.2 在LCD上显示一个矢量字体</h3><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00015.png" alt="FramebufferAPP_Image00015"></p><p>我们可以参考上图位置的c程序，编写程序。</p><p>①初始化freetype库</p><p>程序文件：freetype_show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4872</span>	error <span class="token operator">=</span> <span class="token function">FT_Init_FreeType</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>library <span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/* initialize library */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②用freetype库中的FT_New_Face函数创建一个face字体文件对象，保存在&amp;face中</p><p>程序文件：freetype_show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4875</span>    error <span class="token operator">=</span> <span class="token function">FT_New_Face</span><span class="token punctuation">(</span> library<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>face <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* create face object */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③提取face对象中的glyph，即关键点集</p><p>程序文件：freetype_show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4877</span>    slot <span class="token operator">=</span> face<span class="token operator">-&gt;</span>glyph<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④设置像素点大小，24*24</p><p>程序文件：freetype_show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4879</span>    <span class="token function">FT_Set_Pixel_Sizes</span><span class="token punctuation">(</span>face<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑤确定坐标</p><p>​ 目前我们前面所用的都是LCD的坐标系对应的x与y坐标，然后在freetype上却是使用的笛卡尔坐标系，因此我们还需要转换x与y坐标。</p><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00017.png" alt="FramebufferAPP_Image00017"></p><p>我们将要显示的是‘繁’字，根据上图可知，先计算在lcd坐标系的情况下‘繁’字</p><p>的左下角的x坐标与y坐标，因为在笛卡尔坐标中左下角为字符的原点，‘A’是的左上角为整个屏幕的中心点，即（xres/2，yres/2）。</p><ul><li>lcd_x = var.xres/2 + 8 + 16；lcd_y = var.yres/2 + 16</li><li>则笛卡尔座标系:x = lcd_x = var.xres/2 + 8 + 16 ； y = var.yres - lcd_y = var.yres/2 – 16</li><li>单位是1/64像素，所以需要乘以64</li></ul><p>程序文件：freetype_show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4888</span>	pen<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>var<span class="token punctuation">.</span>xres<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">;</span>
<span class="token number">4889</span>	pen<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>var<span class="token punctuation">.</span>yres<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">;</span>
<span class="token number">4890</span>
<span class="token number">4891</span>	<span class="token comment">/* set transformation */</span>
<span class="token number">4892</span>    <span class="token function">FT_Set_Transform</span><span class="token punctuation">(</span> face<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑥找到glyph的位置，然后取出，并转换为位图</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4895</span>    error <span class="token operator">=</span> <span class="token function">FT_Load_Char</span><span class="token punctuation">(</span> face<span class="token punctuation">,</span> chinese_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> FT_LOAD_RENDER <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4896</span>	<span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token number">4897</span>	<span class="token punctuation">{</span>
<span class="token number">4898</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;FT_Load_Char error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4899</span>		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">4900</span>	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00018.png" alt="FramebufferAPP_Image00018"></p><p>FT_Load_Char函数调用替代了上图这3步。</p><p>最后把转换出来的位图打印出来，也是参考example1.c编写</p><p>程序文件：freetype_show_font.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">4902</span> 	  <span class="token function">draw_bitmap</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>slot<span class="token operator">-&gt;</span>bitmap<span class="token punctuation">,</span>
<span class="token number">4903</span>         	        slot<span class="token operator">-&gt;</span>bitmap_left<span class="token punctuation">,</span>
<span class="token number">4904</span>             	    var<span class="token punctuation">.</span>yres <span class="token operator">-</span> slot<span class="token operator">-&gt;</span>bitmap_top<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序文件：example1.c</p><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00019.png" alt="FramebufferAPP_Image00019"></p><p>修改上图3处位置</p><ul><li><p>Width宽度：因为在LCD上显示，宽度自然就是x方向的像素点数，var.xres；</p></li><li><p>Height高度：因为在LCD上显示，高度自然就是y方向的像素点数，var.yres；</p></li><li><p>用点阵实验中的的描点函数lcd_put_pixel替代image数组</p><p>lcd_put_pixel(i, j, bitmap-&gt;buffer[q * bitmap-&gt;width + p]);</p></li></ul><p>⑥编译C程序文件freetype_show_font.c</p><p>编译命令：arm-linux-gnueabihf-gcc -finput-charset=GBK -fexec-charset=GBK -o freetype_show_font freetype_show_font.c -lfreetype -lm</p><p>⑦将编译好的freetype_show_font的文件与simsun.ttc字体文件拷贝至开发板，simsun.ttc字体文件放在freetype_show_font执行文件的上一层目录下，执行以下命令。</p><p>执行命令：./freetype_show_font ../simsun.ttc</p><p>如果实验成功，我们将看到屏幕中间会比之前实验多出一个蓝色的‘繁’字。</p><h3 id="_1-5-3-在lcd上令矢量字体旋转某个角度" tabindex="-1"><a class="header-anchor" href="#_1-5-3-在lcd上令矢量字体旋转某个角度" aria-hidden="true">#</a> 1.5.3 在LCD上令矢量字体旋转某个角度</h3><p>在实现显示一个矢量字体后，我们可以添加让该字旋转某个角度的功能。</p><p>我们根据输入的第二个参数，判断其旋转角度，主要代码还是参照example1.c</p><p><img src="http://photos.100ask.net/NewHomeSite/FramebufferAPP_Image00020.png" alt="FramebufferAPP_Image00020"></p><p>根据上图，增加旋转角度功能，旋转的角度由执行命令的第二个参数指定。</p><p>程序文件：freetype_show_font_angle.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>		<span class="token comment">/* use 25 degrees */</span>
<span class="token number">4894</span>	angle <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">360</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token number">4895</span>	<span class="token comment">/* set up matrix */</span>
<span class="token number">4896</span>	matrix<span class="token punctuation">.</span>xx <span class="token operator">=</span> <span class="token punctuation">(</span>FT_Fixed<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token function">cos</span><span class="token punctuation">(</span> angle <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x10000L</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4897</span>	matrix<span class="token punctuation">.</span>xy <span class="token operator">=</span> <span class="token punctuation">(</span>FT_Fixed<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span> angle <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x10000L</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4898</span>	matrix<span class="token punctuation">.</span>yx <span class="token operator">=</span> <span class="token punctuation">(</span>FT_Fixed<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token function">sin</span><span class="token punctuation">(</span> angle <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x10000L</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4899</span>	matrix<span class="token punctuation">.</span>yy <span class="token operator">=</span> <span class="token punctuation">(</span>FT_Fixed<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token function">cos</span><span class="token punctuation">(</span> angle <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x10000L</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4900</span>
<span class="token number">4901</span>    <span class="token comment">/* set transformation */</span>
<span class="token number">4902</span>    <span class="token function">FT_Set_Transform</span><span class="token punctuation">(</span> face<span class="token punctuation">,</span> <span class="token operator">&amp;</span>matrix<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后编译，在开发板上运行</p><p>编译命令如下：</p><p>编译命令：arm-linux-gnueabihf-gcc -finput-charset=GBK -fexec-charset=GBK -o freetype_show_font_angle freetype_show_font_angle.c -lfreetype -lm</p><p>编译出的文件名为freetype_show_font_angle，将文件拷贝至开发板</p><p>在含有该文件的目录下执行以下命令，以下命令正确执行前提是执行文件freetype_show_font在此目录，而且字体文件simsun.ttc，在上一级目录：</p><p>执行命令：./freetype_show_font_angle ../simsun.ttc 90</p><p>如果实验成功，我们将看到屏幕中间的蓝色‘繁’字，旋转了90度。</p>`,224),o=[t];function c(l,r){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","01_FramebufferAPP.html.vue"]]);export{u as default};
