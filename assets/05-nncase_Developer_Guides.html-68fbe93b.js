import{_ as e,r as o,o as i,c,a as n,b as s,d as t,e as p}from"./app-21fd3c9b.js";const u={},l=p('<h1 id="nncase开发指南" tabindex="-1"><a class="header-anchor" href="#nncase开发指南" aria-hidden="true">#</a> nncase开发指南</h1><h2 id="_1-开发环境简介" tabindex="-1"><a class="header-anchor" href="#_1-开发环境简介" aria-hidden="true">#</a> 1 开发环境简介</h2><h3 id="_1-1-操作系统" tabindex="-1"><a class="header-anchor" href="#_1-1-操作系统" aria-hidden="true">#</a> 1.1 操作系统</h3><ul><li>Ubuntu 18.04/20.04</li></ul><h3 id="_1-2-软件环境" tabindex="-1"><a class="header-anchor" href="#_1-2-软件环境" aria-hidden="true">#</a> 1.2 软件环境</h3><p>软件环境要求如下表所示：</p><table><thead><tr><th>序号</th><th>软件资源</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>Python</td><td>Python 3.6/3.7/3.8/3.9/3.10</td></tr><tr><td>2</td><td>pip3</td><td>pip3版本 &gt;= 20.3</td></tr><tr><td>3</td><td>onnx</td><td>onnx版本为1.9.0</td></tr><tr><td>4</td><td>onnx-simplifier</td><td>onnx-simplifier版本为0.3.6</td></tr><tr><td>5</td><td>onnxoptimizer</td><td>onnxoptimizer版本为0.2.6</td></tr></tbody></table><h3 id="_1-3-硬件环境" tabindex="-1"><a class="header-anchor" href="#_1-3-硬件环境" aria-hidden="true">#</a> 1.3 硬件环境</h3><p>硬件环境要求如下表所示：</p><table><thead><tr><th>序号</th><th>硬件资源</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>DongshanPI-Vision</td><td></td></tr><tr><td>2</td><td>SD卡及读卡器</td><td></td></tr></tbody></table><h1 id="_2-nncase简介" tabindex="-1"><a class="header-anchor" href="#_2-nncase简介" aria-hidden="true">#</a> 2 nncase简介</h1><h2 id="_2-1-什么是nncase" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是nncase" aria-hidden="true">#</a> 2.1 什么是nncase</h2><p>nncase是一个为 AI 加速器设计的神经网络编译器, 目前支持的 target有cpu/K210/K510等</p><p>nncase提供的功能</p><ul><li>支持多输入多输出网络，支持多分支结构</li><li>静态内存分配，不需要堆内存</li><li>算子合并和优化</li><li>支持 float 和uint8/int8量化推理</li><li>支持训练后量化，使用浮点模型和量化校准集</li><li>平坦模型，支持零拷贝加载</li></ul><p>nncase支持的神经网络框架</p><ul><li>tflite</li><li>onnx</li><li>caffe</li></ul><h2 id="_2-2-产品优势" tabindex="-1"><a class="header-anchor" href="#_2-2-产品优势" aria-hidden="true">#</a> 2.2 产品优势</h2><ul><li><p><strong>简单的端到端部署</strong></p><p>减少与用户交互的次数。用户使用和部署 CPU、GPU 模型相同的工具和流程就可完成在 KPU 上的部署。无需设置复杂的参数，降低使用门槛，加速 AI 算法的迭代周期。</p></li><li><p><strong>充分利用现有AI生态</strong></p><p>依附于业内广泛使用的框架。一方面可以提高知名度，享受到成熟生态的红利。另一方面可以降低中小开发商的开发成本，业界成熟的模型和算法可以直接部署。</p></li><li><p><strong>充分发挥硬件性能</strong></p><p>NPU的优势就在于效能比CPU、GPU高，DL Compiler必须能够充分发挥硬件的性能。Compiler还需要对新模型结构自适应地优化性能，因此需要在手工优化之外探索一条新的自动优化技术。</p></li><li><p><strong>可扩展性和可维护性</strong></p><p>能够支持 K210、K510 以及将来芯片的 AI 模型部署。需要在架构层面提供一定的可扩展性。增加新 Target 的代价要小，能够尽可能复用更多的模块。加快新产品的研发速度实现 DL Compiler 的技术积累。</p></li></ul><h2 id="_2-3-nncase架构" tabindex="-1"><a class="header-anchor" href="#_2-3-nncase架构" aria-hidden="true">#</a> 2.3 nncase架构</h2><p><img src="http://photos.100ask.net/canaan-docs/IQR12SOJdzxTUZH.png" alt="nncase_arch"></p><p>nnncase软件栈目前包括compiler和runtime两部分。</p><p><strong>Compiler:</strong> 用于在PC上编译神经网络模型，最终生成kmodel文件。主要包括importer, IR, Evaluator, Quantize, Transform优化, Tiling, Partition, Schedule, Codegen等模块。</p><ul><li>Importer: 将其它神经网络框架的模型导入到nncase中</li><li>IR: 中间表示, 分为importer导入的Neutral IR(设备无关)和Neutral IR经lowering转换生成的Target IR(设备相关)</li><li>Evaluator: Evaluator提供IR的解释执行能力，常被用于Constant Folding/PTQ Calibration等场景</li><li>Transform: 用于IR转换和图的遍历优化等</li><li>Quantize: 训练后量化, 对要量化的tensor加入量化标记, 根据输入的校正集, 调用 Evaluator进行解释执行, 收集tensor的数据范围, 插入量化/反量化结点, 最后优化消除不必要的量化/反量化结点等</li><li>Tiling: 受限于NPU较低的存储器容量，需要将大块计算进行拆分. 另外, 计算存在大量数据复用时选择Tiling参数会对时延和带宽产生影响</li><li>Partition: 将图按ModuleType进行切分, 切分后的每个子图会对应RuntimeModule, 不同类型的RuntimeModule对应不同的Device(cpu/K510)</li><li>Schedule: 根据优化后图中的数据依赖关系生成计算顺序并分配Buffer</li><li>Codegen: 对每个子图分别调用ModuleType对应的codegen，生成RuntimeModule</li></ul><p><strong>Runtime</strong>: 集成于用户App， 提供加载kmodel/设置输入数据/KPU执行/获取输出数据等功能.</p><h2 id="_3-安装nncase" tabindex="-1"><a class="header-anchor" href="#_3-安装nncase" aria-hidden="true">#</a> 3 安装nncase</h2><p>nncase工具链compiler部分包括nncase和K510 compiler, 均需安装相应wheel包.</p>',27),d={href:"https://github.com/kendryte/nncase/releases/tag/v1.6.0",target:"_blank",rel:"noopener noreferrer"},r=n("li",null,"K510 compiler wheel包在nncase sdk的x86_64目录下, 不依赖Python版本, 可直接安装",-1),k={href:"https://github.com/kendryte/nncase/blob/master/docs/build.md#docker",target:"_blank",rel:"noopener noreferrer"},m=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /path/to/nncase_sdk
<span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/kendryte/nncase:latest
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">pwd</span><span class="token variable">\`</span></span>:/mnt <span class="token parameter variable">-w</span> /mnt registry.cn-hangzhou.aliyuncs.com/kendryte/nncase:latest /bin/bash <span class="token parameter variable">-c</span> <span class="token string">&quot;/bin/bash&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面以Ubuntu 20.04 + Python 3.8安装nncase为例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> <span class="token parameter variable">-P</span> x86_64 https://github.com/kendryte/nncase/releases/download/v1.6.0/nncase-1.6.0.20220505-cp38-cp38-manylinux_2_24_x86_64.whl
pip3 <span class="token function">install</span> x86_64/*.whl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-编译-推理模型" tabindex="-1"><a class="header-anchor" href="#_4-编译-推理模型" aria-hidden="true">#</a> 4 编译/推理模型</h2><p>nncase提供了<strong>Python API</strong>s, 用于在PC上编译/推理深度学习模型.</p><h3 id="_4-1-支持的算子" tabindex="-1"><a class="header-anchor" href="#_4-1-支持的算子" aria-hidden="true">#</a> 4.1 支持的算子</h3><h4 id="_4-1-1-tflite算子" tabindex="-1"><a class="header-anchor" href="#_4-1-1-tflite算子" aria-hidden="true">#</a> 4.1.1 tflite算子</h4><table><thead><tr><th>Operator</th><th>Is Supported</th></tr></thead><tbody><tr><td>ABS</td><td>✅</td></tr><tr><td>ADD</td><td>✅</td></tr><tr><td>ARG_MAX</td><td>✅</td></tr><tr><td>ARG_MIN</td><td>✅</td></tr><tr><td>AVERAGE_POOL_2D</td><td>✅</td></tr><tr><td>BATCH_MATMUL</td><td>✅</td></tr><tr><td>CAST</td><td>✅</td></tr><tr><td>CEIL</td><td>✅</td></tr><tr><td>CONCATENATION</td><td>✅</td></tr><tr><td>CONV_2D</td><td>✅</td></tr><tr><td>COS</td><td>✅</td></tr><tr><td>CUSTOM</td><td>✅</td></tr><tr><td>DEPTHWISE_CONV_2D</td><td>✅</td></tr><tr><td>DIV</td><td>✅</td></tr><tr><td>EQUAL</td><td>✅</td></tr><tr><td>EXP</td><td>✅</td></tr><tr><td>EXPAND_DIMS</td><td>✅</td></tr><tr><td>FLOOR</td><td>✅</td></tr><tr><td>FLOOR_DIV</td><td>✅</td></tr><tr><td>FLOOR_MOD</td><td>✅</td></tr><tr><td>FULLY_CONNECTED</td><td>✅</td></tr><tr><td>GREATER</td><td>✅</td></tr><tr><td>GREATER_EQUAL</td><td>✅</td></tr><tr><td>L2_NORMALIZATION</td><td>✅</td></tr><tr><td>LEAKY_RELU</td><td>✅</td></tr><tr><td>LESS</td><td>✅</td></tr><tr><td>LESS_EQUAL</td><td>✅</td></tr><tr><td>LOG</td><td>✅</td></tr><tr><td>LOGISTIC</td><td>✅</td></tr><tr><td>MAX_POOL_2D</td><td>✅</td></tr><tr><td>MAXIMUM</td><td>✅</td></tr><tr><td>MEAN</td><td>✅</td></tr><tr><td>MINIMUM</td><td>✅</td></tr><tr><td>MUL</td><td>✅</td></tr><tr><td>NEG</td><td>✅</td></tr><tr><td>NOT_EQUAL</td><td>✅</td></tr><tr><td>PAD</td><td>✅</td></tr><tr><td>PADV2</td><td>✅</td></tr><tr><td>MIRROR_PAD</td><td>✅</td></tr><tr><td>PACK</td><td>✅</td></tr><tr><td>POW</td><td>✅</td></tr><tr><td>REDUCE_MAX</td><td>✅</td></tr><tr><td>REDUCE_MIN</td><td>✅</td></tr><tr><td>REDUCE_PROD</td><td>✅</td></tr><tr><td>RELU</td><td>✅</td></tr><tr><td>PRELU</td><td>✅</td></tr><tr><td>RELU6</td><td>✅</td></tr><tr><td>RESHAPE</td><td>✅</td></tr><tr><td>RESIZE_BILINEAR</td><td>✅</td></tr><tr><td>RESIZE_NEAREST_NEIGHBOR</td><td>✅</td></tr><tr><td>ROUND</td><td>✅</td></tr><tr><td>RSQRT</td><td>✅</td></tr><tr><td>SHAPE</td><td>✅</td></tr><tr><td>SIN</td><td>✅</td></tr><tr><td>SLICE</td><td>✅</td></tr><tr><td>SOFTMAX</td><td>✅</td></tr><tr><td>SPACE_TO_BATCH_ND</td><td>✅</td></tr><tr><td>SQUEEZE</td><td>✅</td></tr><tr><td>BATCH_TO_SPACE_ND</td><td>✅</td></tr><tr><td>STRIDED_SLICE</td><td>✅</td></tr><tr><td>SQRT</td><td>✅</td></tr><tr><td>SQUARE</td><td>✅</td></tr><tr><td>SUB</td><td>✅</td></tr><tr><td>SUM</td><td>✅</td></tr><tr><td>TANH</td><td>✅</td></tr><tr><td>TILE</td><td>✅</td></tr><tr><td>TRANSPOSE</td><td>✅</td></tr><tr><td>TRANSPOSE_CONV</td><td>✅</td></tr><tr><td>QUANTIZE</td><td>✅</td></tr><tr><td>FAKE_QUANT</td><td>✅</td></tr><tr><td>DEQUANTIZE</td><td>✅</td></tr><tr><td>GATHER</td><td>✅</td></tr><tr><td>GATHER_ND</td><td>✅</td></tr><tr><td>ONE_HOT</td><td>✅</td></tr><tr><td>SQUARED_DIFFERENCE</td><td>✅</td></tr><tr><td>LOG_SOFTMAX</td><td>✅</td></tr><tr><td>SPLIT</td><td>✅</td></tr><tr><td>HARD_SWISH</td><td>✅</td></tr></tbody></table><h4 id="_4-1-2-onnx算子" tabindex="-1"><a class="header-anchor" href="#_4-1-2-onnx算子" aria-hidden="true">#</a> 4.1.2 onnx算子</h4><table><thead><tr><th>Operator</th><th>Is Supported</th></tr></thead><tbody><tr><td>Abs</td><td>✅</td></tr><tr><td>Acos</td><td>✅</td></tr><tr><td>Acosh</td><td>✅</td></tr><tr><td>And</td><td>✅</td></tr><tr><td>ArgMax</td><td>✅</td></tr><tr><td>ArgMin</td><td>✅</td></tr><tr><td>Asin</td><td>✅</td></tr><tr><td>Asinh</td><td>✅</td></tr><tr><td>Add</td><td>✅</td></tr><tr><td>AveragePool</td><td>✅</td></tr><tr><td>BatchNormalization</td><td>✅</td></tr><tr><td>Cast</td><td>✅</td></tr><tr><td>Ceil</td><td>✅</td></tr><tr><td>Celu</td><td>✅</td></tr><tr><td>Clip</td><td>✅</td></tr><tr><td>Concat</td><td>✅</td></tr><tr><td>Constant</td><td>✅</td></tr><tr><td>ConstantOfShape</td><td>✅</td></tr><tr><td>Conv</td><td>✅</td></tr><tr><td>ConvTranspose</td><td>✅</td></tr><tr><td>Cos</td><td>✅</td></tr><tr><td>Cosh</td><td>✅</td></tr><tr><td>CumSum</td><td>✅</td></tr><tr><td>DepthToSpace</td><td>✅</td></tr><tr><td>DequantizeLinear</td><td>✅</td></tr><tr><td>Div</td><td>✅</td></tr><tr><td>Dropout</td><td>✅</td></tr><tr><td>Elu</td><td>✅</td></tr><tr><td>Exp</td><td>✅</td></tr><tr><td>Expand</td><td>✅</td></tr><tr><td>Equal</td><td>✅</td></tr><tr><td>Flatten</td><td>✅</td></tr><tr><td>Floor</td><td>✅</td></tr><tr><td>Gather</td><td>✅</td></tr><tr><td>GatherND</td><td>✅</td></tr><tr><td>Gemm</td><td>✅</td></tr><tr><td>GlobalAveragePool</td><td>✅</td></tr><tr><td>GlobalMaxPool</td><td>✅</td></tr><tr><td>Greater</td><td>✅</td></tr><tr><td>GreaterOrEqual</td><td>✅</td></tr><tr><td>Hardmax</td><td>✅</td></tr><tr><td>HardSigmoid</td><td>✅</td></tr><tr><td>HardSwish</td><td>✅</td></tr><tr><td>Identity</td><td>✅</td></tr><tr><td>InstanceNormalization</td><td>✅</td></tr><tr><td>LpNormalization</td><td>✅</td></tr><tr><td>LeakyRelu</td><td>✅</td></tr><tr><td>Less</td><td>✅</td></tr><tr><td>LessOrEqual</td><td>✅</td></tr><tr><td>Log</td><td>✅</td></tr><tr><td>LogSoftmax</td><td>✅</td></tr><tr><td>LRN</td><td>✅</td></tr><tr><td>LSTM</td><td>✅</td></tr><tr><td>MatMul</td><td>✅</td></tr><tr><td>MaxPool</td><td>✅</td></tr><tr><td>Max</td><td>✅</td></tr><tr><td>Min</td><td>✅</td></tr><tr><td>Mul</td><td>✅</td></tr><tr><td>Neg</td><td>✅</td></tr><tr><td>Not</td><td>✅</td></tr><tr><td>OneHot</td><td>✅</td></tr><tr><td>Pad</td><td>✅</td></tr><tr><td>Pow</td><td>✅</td></tr><tr><td>PRelu</td><td>✅</td></tr><tr><td>QuantizeLinear</td><td>✅</td></tr><tr><td>RandomNormal</td><td>✅</td></tr><tr><td>RandomNormalLike</td><td>✅</td></tr><tr><td>RandomUniform</td><td>✅</td></tr><tr><td>RandomUniformLike</td><td>✅</td></tr><tr><td>ReduceL1</td><td>✅</td></tr><tr><td>ReduceL2</td><td>✅</td></tr><tr><td>ReduceLogSum</td><td>✅</td></tr><tr><td>ReduceLogSumExp</td><td>✅</td></tr><tr><td>ReduceMax</td><td>✅</td></tr><tr><td>ReduceMean</td><td>✅</td></tr><tr><td>ReduceMin</td><td>✅</td></tr><tr><td>ReduceProd</td><td>✅</td></tr><tr><td>ReduceSum</td><td>✅</td></tr><tr><td>ReduceSumSquare</td><td>✅</td></tr><tr><td>Relu</td><td>✅</td></tr><tr><td>Reshape</td><td>✅</td></tr><tr><td>Resize</td><td>✅</td></tr><tr><td>ReverseSequence</td><td>✅</td></tr><tr><td>RoiAlign</td><td>✅</td></tr><tr><td>Round</td><td>✅</td></tr><tr><td>Selu</td><td>✅</td></tr><tr><td>Shape</td><td>✅</td></tr><tr><td>Sign</td><td>✅</td></tr><tr><td>Sin</td><td>✅</td></tr><tr><td>Sinh</td><td>✅</td></tr><tr><td>Sigmoid</td><td>✅</td></tr><tr><td>Size</td><td>✅</td></tr><tr><td>Slice</td><td>✅</td></tr><tr><td>Softmax</td><td>✅</td></tr><tr><td>Softplus</td><td>✅</td></tr><tr><td>Softsign</td><td>✅</td></tr><tr><td>SpaceToDepth</td><td>✅</td></tr><tr><td>Split</td><td>✅</td></tr><tr><td>Sqrt</td><td>✅</td></tr><tr><td>Squeeze</td><td>✅</td></tr><tr><td>Sub</td><td>✅</td></tr><tr><td>Sum</td><td>✅</td></tr><tr><td>Tanh</td><td>✅</td></tr><tr><td>Tile</td><td>✅</td></tr><tr><td>TopK</td><td>✅</td></tr><tr><td>Transpose</td><td>✅</td></tr><tr><td>Trilu</td><td>✅</td></tr><tr><td>Upsample</td><td>✅</td></tr><tr><td>Unsqueeze</td><td>✅</td></tr><tr><td>Where</td><td>✅</td></tr></tbody></table><h4 id="_4-1-3-caffe算子" tabindex="-1"><a class="header-anchor" href="#_4-1-3-caffe算子" aria-hidden="true">#</a> 4.1.3 caffe算子</h4><table><thead><tr><th>Operator</th><th>Is Supported</th></tr></thead><tbody><tr><td>Input</td><td>✅</td></tr><tr><td>Concat</td><td>✅</td></tr><tr><td>Convolution</td><td>✅</td></tr><tr><td>Eltwise</td><td>✅</td></tr><tr><td>Permute</td><td>✅</td></tr><tr><td>ReLU</td><td>✅</td></tr><tr><td>Reshape</td><td>✅</td></tr><tr><td>Slice</td><td>✅</td></tr><tr><td>Softmax</td><td>✅</td></tr><tr><td>Split</td><td>✅</td></tr><tr><td>ContinuationIndicator</td><td>✅</td></tr><tr><td>Pooling</td><td>✅</td></tr><tr><td>BatchNorm</td><td>✅</td></tr><tr><td>Scale</td><td>✅</td></tr><tr><td>Reverse</td><td>✅</td></tr><tr><td>LSTM</td><td>✅</td></tr><tr><td>InnerProduct</td><td>✅</td></tr></tbody></table><h3 id="_4-2-编译模型apis" tabindex="-1"><a class="header-anchor" href="#_4-2-编译模型apis" aria-hidden="true">#</a> 4.2 编译模型APIs</h3><p>目前编译模型API支持tflite/onnx/caffe等深度学习框架.</p><h4 id="_4-2-1-compileoptions" tabindex="-1"><a class="header-anchor" href="#_4-2-1-compileoptions" aria-hidden="true">#</a> 4.2.1 CompileOptions</h4><p><strong>功能描述</strong></p><p>CompileOptions类, 用于配置nncase编译选项</p><p><strong>类定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>py<span class="token punctuation">:</span><span class="token punctuation">:</span>class_<span class="token operator">&lt;</span>compile_options<span class="token operator">&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">&quot;CompileOptions&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span>py<span class="token punctuation">:</span><span class="token punctuation">:</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;target&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>target<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;quant_type&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>quant_type<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;w_quant_type&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>w_quant_type<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;use_mse_quant_w&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>use_mse_quant_w<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;split_w_to_act&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>split_w_to_act<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;preprocess&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>preprocess<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;swapRB&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>swapRB<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;mean&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>mean<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;std&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>std<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;input_range&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>input_range<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;output_range&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>output_range<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;input_shape&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>input_shape<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;letterbox_value&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>letterbox_value<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;input_type&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>input_type<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;output_type&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>output_type<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;input_layout&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>input_layout<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;output_layout&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>output_layout<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;model_layout&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>model_layout<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;is_fpga&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>is_fpga<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;dump_ir&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>dump_ir<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;dump_asm&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>dump_asm<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;dump_quant_error&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>dump_quant_error<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;dump_dir&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>dump_dir<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;benchmark_only&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compile_options<span class="token punctuation">:</span><span class="token punctuation">:</span>benchmark_only<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各属性说明如下</p><table><thead><tr><th>属性名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>string</td><td>是</td><td>指定编译目标, 如&#39;k210&#39;, &#39;k510&#39;</td></tr><tr><td>quant_type</td><td>string</td><td>否</td><td>指定数据量化类型, 如&#39;uint8&#39;, &#39;int8&#39;</td></tr><tr><td>w_quant_type</td><td>string</td><td>否</td><td>指定权重量化类型, 如&#39;uint8&#39;, &#39;int8&#39;, 默认为&#39;uint8&#39;</td></tr><tr><td>use_mse_quant_w</td><td>bool</td><td>否</td><td>指定权重量化时是否使用最小化均方误差(mean-square error, MSE)算法优化量化参数</td></tr><tr><td>split_w_to_act</td><td>bool</td><td>否</td><td>指定是否将部分权重数据平衡到激活数据中</td></tr><tr><td>preprocess</td><td>bool</td><td>否</td><td>是否开启前处理，默认为False</td></tr><tr><td>swapRB</td><td>bool</td><td>否</td><td>是否交换RGB输入数据的红和蓝两个通道(RGB--&gt;BGR或者BGR--&gt;RGB)，默认为False</td></tr><tr><td>mean</td><td>list</td><td>否</td><td>前处理标准化参数均值，默认为[0, 0, 0]</td></tr><tr><td>std</td><td>list</td><td>否</td><td>前处理标准化参数方差，默认为[1, 1, 1]</td></tr><tr><td>input_range</td><td>list</td><td>否</td><td>输入数据反量化后对应浮点数的范围，默认为[0, 1]</td></tr><tr><td>output_range</td><td>list</td><td>否</td><td>输出定点数据前对应浮点数的范围，默认为空</td></tr><tr><td>input_shape</td><td>list</td><td>否</td><td>指定输入数据的shape，input_shape的layout需要与input layout保持一致，输入数据的input_shape与模型的input shape不一致时会进行letterbox操作(resize/pad等)</td></tr><tr><td>letterbox_value</td><td>float</td><td>否</td><td>指定前处理letterbox的填充值</td></tr><tr><td>input_type</td><td>string</td><td>否</td><td>指定输入数据的类型, 默认为&#39;float32&#39;</td></tr><tr><td>output_type</td><td>string</td><td>否</td><td>指定输出数据的类型, 如&#39;float32&#39;, &#39;uint8&#39;(仅用于指定量化情况下), 默认为&#39;float32&#39;</td></tr><tr><td>input_layout</td><td>string</td><td>否</td><td>指定输入数据的layout, 如&#39;NCHW&#39;, &#39;NHWC&#39;. 若输入数据layout与模型本身layout不同, nncase会插入transpose进行转换</td></tr><tr><td>output_layout</td><td>string</td><td>否</td><td>指定输出数据的layout, 如&#39;NCHW&#39;, &#39;NHWC&#39;. 若输出数据layout与模型本身layout不同, nncase会插入transpose进行转换</td></tr><tr><td>model_layout</td><td>string</td><td>否</td><td>指定模型的layout，默认为空，当tflite模型layout为‘NCHW’，Onnx和Caffe模型layout为‘NHWC’时需指定</td></tr><tr><td>is_fpga</td><td>bool</td><td>否</td><td>指定kmodel是否用于fpga, 默认为False</td></tr><tr><td>dump_ir</td><td>bool</td><td>否</td><td>指定是否dump IR, 默认为False</td></tr><tr><td>dump_asm</td><td>bool</td><td>否</td><td>指定是否dump asm汇编文件, 默认为False</td></tr><tr><td>dump_quant_error</td><td>bool</td><td>否</td><td>指定是否dump量化前后的模型误差</td></tr><tr><td>dump_dir</td><td>string</td><td>否</td><td>前面指定dump_ir等开关后, 这里指定dump的目录, 默认为空字符串</td></tr><tr><td>benchmark_only</td><td>bool</td><td>否</td><td>指定kmodel是否只用于benchmark, 默认为False</td></tr></tbody></table><blockquote><ol><li>input range为浮点数的范围，即如果输入数据类型为uint8，则input range为反量化到浮点之后的范围（可以不为0~1），可以自由指定.</li><li>input_shape需要按照input_layout进行指定，以[1，224，224，3]为例，如果input_layout为NCHW，则input_shape需指定为[1,3,224,224];input_layout为NHWC，则input_shape需指定为[1,224,224,3];</li><li>mean和std为浮点数进行normalize的参数，用户可以自由指定;</li><li>使用letterbox功能时，需要限制输入size在1.5MB内，单channel的size在0.75MB内;</li></ol><p>例如:</p><ol><li>输入数据类型设定为uint8，input_range设定为[0,255]，则反量化的作用只是进行类型转化，将uint8的数据转化为float32，mean和std参数仍然可以按照0~255的数据进行指定.</li><li>输入数据类型设定为uint8，input_range设定为[0,1]，则会将定点数反量化为范围为[0,1]的浮点数, mean 和std需要按照新的浮点数范围进行指定。</li></ol></blockquote><p>前处理流程如下(图中绿色节点皆为可选)：</p><p><img src="http://photos.100ask.net/canaan-docs/fhBLsozUTCbt4dp.png" alt="preprocess.png"></p><p><strong>代码示例</strong></p><p>实例化CompileOptions, 配置各属性的值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># compile_options</span>
compile_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>CompileOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
compile_options<span class="token punctuation">.</span>target <span class="token operator">=</span> target
compile_options<span class="token punctuation">.</span>input_type <span class="token operator">=</span> <span class="token string">&#39;float32&#39;</span>  <span class="token comment"># or &#39;uint8&#39; &#39;int8&#39;</span>
compile_options<span class="token punctuation">.</span>output_type <span class="token operator">=</span> <span class="token string">&#39;float32&#39;</span>  <span class="token comment"># or &#39;uint8&#39; &#39;int8&#39;. Only work in PTQ</span>
compile_options<span class="token punctuation">.</span>output_range <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># Only work in PTQ and output type is not &quot;float32&quot;</span>
compile_options<span class="token punctuation">.</span>preprocess <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment"># if False, the args below will unworked</span>
compile_options<span class="token punctuation">.</span>swapRB <span class="token operator">=</span> <span class="token boolean">True</span>
compile_options<span class="token punctuation">.</span>input_shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># keep layout same as input layout</span>
compile_options<span class="token punctuation">.</span>input_layout <span class="token operator">=</span> <span class="token string">&#39;NHWC&#39;</span>
compile_options<span class="token punctuation">.</span>output_layout <span class="token operator">=</span> <span class="token string">&#39;NHWC&#39;</span>
compile_options<span class="token punctuation">.</span>model_layout <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token comment"># Specific it when tflite model with &quot;NCHW&quot; layout and Onnx(Caffe) model with &quot;NHWC&quot; layout</span>
compile_options<span class="token punctuation">.</span>mean <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
compile_options<span class="token punctuation">.</span>std <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
compile_options<span class="token punctuation">.</span>input_range <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
compile_options<span class="token punctuation">.</span>letterbox_value <span class="token operator">=</span> <span class="token number">114.</span> <span class="token comment"># pad what you want</span>
compile_options<span class="token punctuation">.</span>dump_ir <span class="token operator">=</span> <span class="token boolean">True</span>
compile_options<span class="token punctuation">.</span>dump_asm <span class="token operator">=</span> <span class="token boolean">True</span>
compile_options<span class="token punctuation">.</span>dump_dir <span class="token operator">=</span> <span class="token string">&#39;tmp&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-importoptions" tabindex="-1"><a class="header-anchor" href="#_4-2-2-importoptions" aria-hidden="true">#</a> 4.2.2 ImportOptions</h4><p><strong>功能描述</strong></p><p>ImportOptions类, 用于配置nncase导入选项</p><p><strong>类定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>py<span class="token punctuation">:</span><span class="token punctuation">:</span>class_<span class="token operator">&lt;</span>import_options<span class="token operator">&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">&quot;ImportOptions&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span>py<span class="token punctuation">:</span><span class="token punctuation">:</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;output_arrays&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>import_options<span class="token punctuation">:</span><span class="token punctuation">:</span>output_arrays<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各属性说明如下</p><table><thead><tr><th>属性名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>output_arrays</td><td>string</td><td>否</td><td>输出名称</td></tr></tbody></table><p><strong>代码示例</strong></p><p>实例化ImportOptions, 配置各属性的值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># import_options</span>
import_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>ImportOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
import_options<span class="token punctuation">.</span>output_arrays <span class="token operator">=</span> <span class="token string">&#39;output&#39;</span> <span class="token comment"># Your output node name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-3-ptqtensoroptions" tabindex="-1"><a class="header-anchor" href="#_4-2-3-ptqtensoroptions" aria-hidden="true">#</a> 4.2.3 PTQTensorOptions</h4><p><strong>功能描述</strong></p><p>PTQTensorOptions类, 用于配置nncase PTQ选项</p><p><strong>类定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>py<span class="token punctuation">:</span><span class="token punctuation">:</span>class_<span class="token operator">&lt;</span>ptq_tensor_options<span class="token operator">&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">&quot;PTQTensorOptions&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span>py<span class="token punctuation">:</span><span class="token punctuation">:</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;calibrate_method&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptq_tensor_options<span class="token punctuation">:</span><span class="token punctuation">:</span>calibrate_method<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;samples_count&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptq_tensor_options<span class="token punctuation">:</span><span class="token punctuation">:</span>samples_count<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;set_tensor_data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>ptq_tensor_options <span class="token operator">&amp;</span>o<span class="token punctuation">,</span> py<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token builtin">bytes</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        uint8_t <span class="token operator">*</span><span class="token builtin">buffer</span><span class="token punctuation">;</span>
        py<span class="token punctuation">:</span><span class="token punctuation">:</span>ssize_t length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>PyBytes_AsStringAndSize<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>ptr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reinterpret_cast<span class="token operator">&lt;</span>char <span class="token operator">**</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token builtin">buffer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
            throw std<span class="token punctuation">:</span><span class="token punctuation">:</span>invalid_argument<span class="token punctuation">(</span><span class="token string">&quot;Invalid bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        o<span class="token punctuation">.</span>tensor_data<span class="token punctuation">.</span>assign<span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">,</span> <span class="token builtin">buffer</span> <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各属性说明如下</p><table><thead><tr><th>字段名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>calibrate_method</td><td>string</td><td>否</td><td>校准方法 , 支持&#39;no_clip&#39;, &#39;l2&#39;, &#39;kld_m0&#39;, &#39;kld_m1&#39;, &#39;kld_m2&#39;, &#39;cdf&#39;, 默认是&#39;no_clip&#39;</td></tr><tr><td>samples_count</td><td>int</td><td>否</td><td>样本个数</td></tr></tbody></table><h5 id="set-tensor-data" tabindex="-1"><a class="header-anchor" href="#set-tensor-data" aria-hidden="true">#</a> set_tensor_data()</h5><p><strong>功能描述</strong></p><p>设置校正数据</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set_tensor_data<span class="token punctuation">(</span>calib_data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>calib_data</td><td>byte[]</td><td>是</td><td>校正数据</td></tr></tbody></table><p><strong>返回值</strong></p><p>N/A</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># ptq_options</span>
ptq_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>PTQTensorOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
ptq_options<span class="token punctuation">.</span>samples_count <span class="token operator">=</span> cfg<span class="token punctuation">.</span>generate_calibs<span class="token punctuation">.</span>batch_size
ptq_options<span class="token punctuation">.</span>set_tensor_data<span class="token punctuation">(</span>np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span><span class="token punctuation">[</span>sample<span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span> <span class="token keyword">for</span> sample <span class="token keyword">in</span> self<span class="token punctuation">.</span>calibs<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-4-compiler" tabindex="-1"><a class="header-anchor" href="#_4-2-4-compiler" aria-hidden="true">#</a> 4.2.4 Compiler</h4><p><strong>功能描述</strong></p><p>Compiler类, 用于编译神经网络模型</p><p><strong>类定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>py<span class="token punctuation">:</span><span class="token punctuation">:</span>class_<span class="token operator">&lt;</span>compiler<span class="token operator">&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">&quot;Compiler&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span>py<span class="token punctuation">:</span><span class="token punctuation">:</span>init<span class="token punctuation">(</span><span class="token operator">&amp;</span>compiler<span class="token punctuation">:</span><span class="token punctuation">:</span>create<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;import_tflite&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compiler<span class="token punctuation">:</span><span class="token punctuation">:</span>import_tflite<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;import_onnx&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compiler<span class="token punctuation">:</span><span class="token punctuation">:</span>import_onnx<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;import_caffe&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compiler<span class="token punctuation">:</span><span class="token punctuation">:</span>import_caffe<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;compile&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>compiler<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token builtin">compile</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;use_ptq&quot;</span><span class="token punctuation">,</span> py<span class="token punctuation">:</span><span class="token punctuation">:</span>overload_cast<span class="token operator">&lt;</span>ptq_tensor_options<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>compiler<span class="token punctuation">:</span><span class="token punctuation">:</span>use_ptq<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;gencode&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>compiler <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>ostream <span class="token operator">&amp;</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span>gencode<span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;gencode_tobytes&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>compiler <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token punctuation">:</span><span class="token punctuation">:</span>stringstream ss<span class="token punctuation">;</span>
        c<span class="token punctuation">.</span>gencode<span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> py<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;create_evaluator&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>compiler <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> uint32_t stage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        auto <span class="token operator">&amp;</span>graph <span class="token operator">=</span> c<span class="token punctuation">.</span>graph<span class="token punctuation">(</span>stage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>make_unique<span class="token operator">&lt;</span>graph_evaluator<span class="token operator">&gt;</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>target<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>compiler <span class="token operator">=</span> nncase<span class="token punctuation">.</span>Compiler<span class="token punctuation">(</span>compile_options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="import-tflite" tabindex="-1"><a class="header-anchor" href="#import-tflite" aria-hidden="true">#</a> import_tflite()</h5><p><strong>功能描述</strong></p><p>导入tflite模型</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>import_tflite<span class="token punctuation">(</span>model_content<span class="token punctuation">,</span> import_options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>model_content</td><td>byte[]</td><td>是</td><td>读取的模型内容</td></tr><tr><td>import_options</td><td>ImportOptions</td><td>是</td><td>导入选项</td></tr></tbody></table><p><strong>返回值</strong></p><p>N/A</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model_content <span class="token operator">=</span> read_model_file<span class="token punctuation">(</span>model<span class="token punctuation">)</span>
compiler<span class="token punctuation">.</span>import_tflite<span class="token punctuation">(</span>model_content<span class="token punctuation">,</span> import_options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="import-onnx" tabindex="-1"><a class="header-anchor" href="#import-onnx" aria-hidden="true">#</a> import_onnx()</h5><p><strong>功能描述</strong></p><p>导入onnx模型</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>import_onnx<span class="token punctuation">(</span>model_content<span class="token punctuation">,</span> import_options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>model_content</td><td>byte[]</td><td>是</td><td>读取的模型内容</td></tr><tr><td>import_options</td><td>ImportOptions</td><td>是</td><td>导入选项</td></tr></tbody></table><p><strong>返回值</strong></p><p>N/A</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model_content <span class="token operator">=</span> read_model_file<span class="token punctuation">(</span>model<span class="token punctuation">)</span>
compiler<span class="token punctuation">.</span>import_onnx<span class="token punctuation">(</span>model_content<span class="token punctuation">,</span> import_options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="import-caffe" tabindex="-1"><a class="header-anchor" href="#import-caffe" aria-hidden="true">#</a> import_caffe()</h5><p><strong>功能描述</strong></p><p>导入caffe模型</p><blockquote><p>用户需在本地机器自行编译/安装caffe.</p></blockquote><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>import_caffe<span class="token punctuation">(</span>caffemodel<span class="token punctuation">,</span> prototxt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>caffemodel</td><td>byte[]</td><td>是</td><td>读取的caffemodel内容</td></tr><tr><td>prototxt</td><td>byte[]</td><td>是</td><td>读取的prototxt内容</td></tr></tbody></table><p><strong>返回值</strong></p><p>N/A</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># import</span>
caffemodel <span class="token operator">=</span> read_model_file<span class="token punctuation">(</span><span class="token string">&#39;test.caffemodel&#39;</span><span class="token punctuation">)</span>
prototxt <span class="token operator">=</span> read_model_file<span class="token punctuation">(</span><span class="token string">&#39;test.prototxt&#39;</span><span class="token punctuation">)</span>
compiler<span class="token punctuation">.</span>import_caffe<span class="token punctuation">(</span>caffemodel<span class="token punctuation">,</span> prototxt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="use-ptq" tabindex="-1"><a class="header-anchor" href="#use-ptq" aria-hidden="true">#</a> use_ptq()</h5><p><strong>功能描述</strong></p><p>设置PTQ配置选项</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>use_ptq<span class="token punctuation">(</span>ptq_options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>ptq_options</td><td>PTQTensorOptions</td><td>是</td><td>PTQ配置选项</td></tr></tbody></table><p><strong>返回值</strong></p><p>N/A</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>compiler<span class="token punctuation">.</span>use_ptq<span class="token punctuation">(</span>ptq_options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="compile" tabindex="-1"><a class="header-anchor" href="#compile" aria-hidden="true">#</a> compile()</h5><p><strong>功能描述</strong></p><p>编译神经网络模型</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><p>N/A</p><p><strong>返回值</strong></p><p>N/A</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>compiler<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="gencode-tobytes" tabindex="-1"><a class="header-anchor" href="#gencode-tobytes" aria-hidden="true">#</a> gencode_tobytes()</h5><p><strong>功能描述</strong></p><p>生成代码字节流</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>gencode_tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><p>N/A</p><p><strong>返回值</strong></p><p>bytes[]</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>kmodel <span class="token operator">=</span> compiler<span class="token punctuation">.</span>gencode_tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>infer_dir<span class="token punctuation">,</span> <span class="token string">&#39;test.kmodel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>kmodel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-编译模型示例" tabindex="-1"><a class="header-anchor" href="#_4-3-编译模型示例" aria-hidden="true">#</a> 4.3 编译模型示例</h3><p>下面示例中使用到的模型和python编译脚本</p><ul><li>模型位于/path/to/nncase_sdk/examples/models/子目录</li><li>python编译脚本位于/path/to/nncase_sdk/examples/scripts子目录</li></ul><h4 id="_4-3-1-编译float32-tflite模型" tabindex="-1"><a class="header-anchor" href="#_4-3-1-编译float32-tflite模型" aria-hidden="true">#</a> 4.3.1 编译float32 tflite模型</h4><ul><li>mobilenetv2_tflite_fp32_image.py脚本如下</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> nncase
<span class="token keyword">import</span> os
<span class="token keyword">import</span> argparse

<span class="token keyword">def</span> <span class="token function">read_model_file</span><span class="token punctuation">(</span>model_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>model_file<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        model_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> model_content

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>prog<span class="token operator">=</span><span class="token string">&quot;nncase&quot;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--target&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;target to run&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--model&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;model file&#39;</span><span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># compile_options</span>
    dump_dir <span class="token operator">=</span> <span class="token string">&#39;tmp/mobilenetv2_tflite_fp32_image&#39;</span>
    compile_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>CompileOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
    compile_options<span class="token punctuation">.</span>target <span class="token operator">=</span> args<span class="token punctuation">.</span>target
    compile_options<span class="token punctuation">.</span>dump_ir <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>dump_asm <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>dump_dir <span class="token operator">=</span> dump_dir

    <span class="token comment"># compiler</span>
    compiler <span class="token operator">=</span> nncase<span class="token punctuation">.</span>Compiler<span class="token punctuation">(</span>compile_options<span class="token punctuation">)</span>

    <span class="token comment"># import_options</span>
    import_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>ImportOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># import</span>
    model_content <span class="token operator">=</span> read_model_file<span class="token punctuation">(</span>args<span class="token punctuation">.</span>model<span class="token punctuation">)</span>
    compiler<span class="token punctuation">.</span>import_tflite<span class="token punctuation">(</span>model_content<span class="token punctuation">,</span> import_options<span class="token punctuation">)</span>

    <span class="token comment"># compile</span>
    compiler<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># kmodel</span>
    kmodel <span class="token operator">=</span> compiler<span class="token punctuation">.</span>gencode_tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dump_dir<span class="token punctuation">,</span> <span class="token string">&#39;test.kmodel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>kmodel<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行如下命令即可编译mobilenetv2的tflite模型, target为k510</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /path/to/nncase_sdk/examples
python3 scripts/mobilenetv2_tflite_fp32_image.py <span class="token parameter variable">--target</span> k510 <span class="token parameter variable">--model</span> models/mobilenet_v2_1.0_224.tflite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-2-编译float32-onnx模型" tabindex="-1"><a class="header-anchor" href="#_4-3-2-编译float32-onnx模型" aria-hidden="true">#</a> 4.3.2 编译float32 onnx模型</h4>`,138),v={href:"https://github.com/daquexian/onnx-simplifier",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,"mobilenetv2_onnx_fp32_image.py 脚本如下",-1),_=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> onnxsim
<span class="token keyword">import</span> onnx
<span class="token keyword">import</span> nncase
<span class="token keyword">import</span> argparse

<span class="token keyword">def</span> <span class="token function">parse_model_input_output</span><span class="token punctuation">(</span>model_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    onnx_model <span class="token operator">=</span> onnx<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model_file<span class="token punctuation">)</span>
    input_all <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">.</span>name <span class="token keyword">for</span> node <span class="token keyword">in</span> onnx_model<span class="token punctuation">.</span>graph<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">]</span>
    input_initializer <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">.</span>name <span class="token keyword">for</span> node <span class="token keyword">in</span> onnx_model<span class="token punctuation">.</span>graph<span class="token punctuation">.</span>initializer<span class="token punctuation">]</span>
    input_names <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>input_all<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>input_initializer<span class="token punctuation">)</span><span class="token punctuation">)</span>
    input_tensors <span class="token operator">=</span> <span class="token punctuation">[</span>node <span class="token keyword">for</span> node <span class="token keyword">in</span> onnx_model<span class="token punctuation">.</span>graph<span class="token punctuation">.</span><span class="token builtin">input</span> <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token keyword">in</span> input_names<span class="token punctuation">]</span>

    <span class="token comment"># input</span>
    inputs<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> _<span class="token punctuation">,</span> e <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>input_tensors<span class="token punctuation">)</span><span class="token punctuation">:</span>
        onnx_type <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">.</span>tensor_type
        input_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        input_dict<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>name
        input_dict<span class="token punctuation">[</span><span class="token string">&#39;dtype&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> onnx<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>TENSOR_TYPE_TO_NP_TYPE<span class="token punctuation">[</span>onnx_type<span class="token punctuation">.</span>elem_type<span class="token punctuation">]</span>
        input_dict<span class="token punctuation">[</span><span class="token string">&#39;shape&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>dim_value <span class="token keyword">if</span> i<span class="token punctuation">.</span>dim_value <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> d<span class="token punctuation">)</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> d <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>
            onnx_type<span class="token punctuation">.</span>shape<span class="token punctuation">.</span>dim<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        inputs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>input_dict<span class="token punctuation">)</span>


    <span class="token keyword">return</span> onnx_model<span class="token punctuation">,</span> inputs

<span class="token keyword">def</span> <span class="token function">onnx_simplify</span><span class="token punctuation">(</span>model_file<span class="token punctuation">,</span> dump_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    onnx_model<span class="token punctuation">,</span> inputs <span class="token operator">=</span> parse_model_input_output<span class="token punctuation">(</span>model_file<span class="token punctuation">)</span>
    onnx_model <span class="token operator">=</span> onnx<span class="token punctuation">.</span>shape_inference<span class="token punctuation">.</span>infer_shapes<span class="token punctuation">(</span>onnx_model<span class="token punctuation">)</span>
    input_shapes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token builtin">input</span> <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>
        input_shapes<span class="token punctuation">[</span><span class="token builtin">input</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">[</span><span class="token string">&#39;shape&#39;</span><span class="token punctuation">]</span>

    onnx_model<span class="token punctuation">,</span> check <span class="token operator">=</span> onnxsim<span class="token punctuation">.</span>simplify<span class="token punctuation">(</span>onnx_model<span class="token punctuation">,</span> input_shapes<span class="token operator">=</span>input_shapes<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> check<span class="token punctuation">,</span> <span class="token string">&quot;Simplified ONNX model could not be validated&quot;</span>

    model_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dump_dir<span class="token punctuation">,</span> <span class="token string">&#39;simplified.onnx&#39;</span><span class="token punctuation">)</span>
    onnx<span class="token punctuation">.</span>save_model<span class="token punctuation">(</span>onnx_model<span class="token punctuation">,</span> model_file<span class="token punctuation">)</span>
    <span class="token keyword">return</span> model_file


<span class="token keyword">def</span> <span class="token function">read_model_file</span><span class="token punctuation">(</span>model_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>model_file<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        model_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> model_content


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>prog<span class="token operator">=</span><span class="token string">&quot;nncase&quot;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--target&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;target to run&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--model&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;model file&#39;</span><span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

    dump_dir <span class="token operator">=</span> <span class="token string">&#39;tmp/mobilenetv2_onnx_fp32_image&#39;</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dump_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>dump_dir<span class="token punctuation">)</span>

    <span class="token comment"># onnx simplify</span>
    model_file <span class="token operator">=</span> onnx_simplify<span class="token punctuation">(</span>args<span class="token punctuation">.</span>model<span class="token punctuation">,</span> dump_dir<span class="token punctuation">)</span>

    <span class="token comment"># compile_options</span>
    compile_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>CompileOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
    compile_options<span class="token punctuation">.</span>target <span class="token operator">=</span> args<span class="token punctuation">.</span>target
    compile_options<span class="token punctuation">.</span>dump_ir <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>dump_asm <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>dump_dir <span class="token operator">=</span> dump_dir

    <span class="token comment"># compiler</span>
    compiler <span class="token operator">=</span> nncase<span class="token punctuation">.</span>Compiler<span class="token punctuation">(</span>compile_options<span class="token punctuation">)</span>

    <span class="token comment"># import_options</span>
    import_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>ImportOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># import</span>
    model_content <span class="token operator">=</span> read_model_file<span class="token punctuation">(</span>model_file<span class="token punctuation">)</span>
    compiler<span class="token punctuation">.</span>import_onnx<span class="token punctuation">(</span>model_content<span class="token punctuation">,</span> import_options<span class="token punctuation">)</span>

    <span class="token comment"># compile</span>
    compiler<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># kmodel</span>
    kmodel <span class="token operator">=</span> compiler<span class="token punctuation">.</span>gencode_tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dump_dir<span class="token punctuation">,</span> <span class="token string">&#39;test.kmodel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>kmodel<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行如下命令即可编译mobilenetv2的onnx模型, target为k510</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /path/to/nncase_sdk/examples
python3 scripts/mobilenetv2_onnx_fp32_image.py <span class="token parameter variable">--target</span> k510 <span class="token parameter variable">--model</span> models/mobilenetv2-7.onnx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-3-编译float32-caffe模型" tabindex="-1"><a class="header-anchor" href="#_4-3-3-编译float32-caffe模型" aria-hidden="true">#</a> 4.3.3 编译float32 caffe模型</h4>`,4),h={href:"https://github.com/kendryte/caffe/releases",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,"conv2d_caffe_fp32.py 脚本如下",-1),y=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> nncase
<span class="token keyword">import</span> os
<span class="token keyword">import</span> argparse

<span class="token keyword">def</span> <span class="token function">read_model_file</span><span class="token punctuation">(</span>model_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>model_file<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        model_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> model_content

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>prog<span class="token operator">=</span><span class="token string">&quot;nncase&quot;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--target&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;target to run&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--caffemodel&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;caffemodel file&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--prototxt&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;prototxt file&#39;</span><span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># compile_options</span>
    dump_dir <span class="token operator">=</span> <span class="token string">&#39;tmp/conv2d_caffe_fp32&#39;</span>
    compile_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>CompileOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
    compile_options<span class="token punctuation">.</span>target <span class="token operator">=</span> args<span class="token punctuation">.</span>target
    compile_options<span class="token punctuation">.</span>dump_ir <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>dump_asm <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>dump_dir <span class="token operator">=</span> dump_dir

    <span class="token comment"># compiler</span>
    compiler <span class="token operator">=</span> nncase<span class="token punctuation">.</span>Compiler<span class="token punctuation">(</span>compile_options<span class="token punctuation">)</span>

    <span class="token comment"># import_options</span>
    import_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>ImportOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># import</span>
    caffemodel <span class="token operator">=</span> read_model_file<span class="token punctuation">(</span>args<span class="token punctuation">.</span>caffemodel<span class="token punctuation">)</span>
    prototxt <span class="token operator">=</span> read_model_file<span class="token punctuation">(</span>args<span class="token punctuation">.</span>prototxt<span class="token punctuation">)</span>
    compiler<span class="token punctuation">.</span>import_caffe<span class="token punctuation">(</span>caffemodel<span class="token punctuation">,</span> prototxt<span class="token punctuation">)</span>

    <span class="token comment"># compile</span>
    compiler<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># kmodel</span>
    kmodel <span class="token operator">=</span> compiler<span class="token punctuation">.</span>gencode_tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dump_dir<span class="token punctuation">,</span> <span class="token string">&#39;test.kmodel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>kmodel<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行如下命令即可编译conv2d的caffe模型, target为k510</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /path/to/nncase_sdk/examples
python3 scripts/conv2d_caffe_fp32.py <span class="token parameter variable">--target</span> k510 <span class="token parameter variable">--caffemodel</span> models/test.caffemodel <span class="token parameter variable">--prototxt</span> models/test.prototxt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-4-编译添加前处理float32-onnx模型" tabindex="-1"><a class="header-anchor" href="#_4-3-4-编译添加前处理float32-onnx模型" aria-hidden="true">#</a> 4.3.4 编译添加前处理float32 onnx模型</h4>`,4),f={href:"https://github.com/daquexian/onnx-simplifier",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,"mobilenetv2_onnx_fp32_preprocess.py脚本如下",-1),w=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> onnxsim
<span class="token keyword">import</span> onnx
<span class="token keyword">import</span> nncase
<span class="token keyword">import</span> argparse

<span class="token keyword">def</span> <span class="token function">parse_model_input_output</span><span class="token punctuation">(</span>model_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    onnx_model <span class="token operator">=</span> onnx<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model_file<span class="token punctuation">)</span>
    input_all <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">.</span>name <span class="token keyword">for</span> node <span class="token keyword">in</span> onnx_model<span class="token punctuation">.</span>graph<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">]</span>
    input_initializer <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">.</span>name <span class="token keyword">for</span> node <span class="token keyword">in</span> onnx_model<span class="token punctuation">.</span>graph<span class="token punctuation">.</span>initializer<span class="token punctuation">]</span>
    input_names <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>input_all<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>input_initializer<span class="token punctuation">)</span><span class="token punctuation">)</span>
    input_tensors <span class="token operator">=</span> <span class="token punctuation">[</span>node <span class="token keyword">for</span> node <span class="token keyword">in</span> onnx_model<span class="token punctuation">.</span>graph<span class="token punctuation">.</span><span class="token builtin">input</span> <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token keyword">in</span> input_names<span class="token punctuation">]</span>

    <span class="token comment"># input</span>
    inputs<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> _<span class="token punctuation">,</span> e <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>input_tensors<span class="token punctuation">)</span><span class="token punctuation">:</span>
        onnx_type <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">.</span>tensor_type
        input_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        input_dict<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>name
        input_dict<span class="token punctuation">[</span><span class="token string">&#39;dtype&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> onnx<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>TENSOR_TYPE_TO_NP_TYPE<span class="token punctuation">[</span>onnx_type<span class="token punctuation">.</span>elem_type<span class="token punctuation">]</span>
        input_dict<span class="token punctuation">[</span><span class="token string">&#39;shape&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>dim_value <span class="token keyword">if</span> i<span class="token punctuation">.</span>dim_value <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> d<span class="token punctuation">)</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> d <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>
            onnx_type<span class="token punctuation">.</span>shape<span class="token punctuation">.</span>dim<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        inputs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>input_dict<span class="token punctuation">)</span>


    <span class="token keyword">return</span> onnx_model<span class="token punctuation">,</span> inputs

<span class="token keyword">def</span> <span class="token function">onnx_simplify</span><span class="token punctuation">(</span>model_file<span class="token punctuation">,</span> dump_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    onnx_model<span class="token punctuation">,</span> inputs <span class="token operator">=</span> parse_model_input_output<span class="token punctuation">(</span>model_file<span class="token punctuation">)</span>
    onnx_model <span class="token operator">=</span> onnx<span class="token punctuation">.</span>shape_inference<span class="token punctuation">.</span>infer_shapes<span class="token punctuation">(</span>onnx_model<span class="token punctuation">)</span>
    input_shapes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token builtin">input</span> <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>
        input_shapes<span class="token punctuation">[</span><span class="token builtin">input</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">[</span><span class="token string">&#39;shape&#39;</span><span class="token punctuation">]</span>

    onnx_model<span class="token punctuation">,</span> check <span class="token operator">=</span> onnxsim<span class="token punctuation">.</span>simplify<span class="token punctuation">(</span>onnx_model<span class="token punctuation">,</span> input_shapes<span class="token operator">=</span>input_shapes<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> check<span class="token punctuation">,</span> <span class="token string">&quot;Simplified ONNX model could not be validated&quot;</span>

    model_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dump_dir<span class="token punctuation">,</span> <span class="token string">&#39;simplified.onnx&#39;</span><span class="token punctuation">)</span>
    onnx<span class="token punctuation">.</span>save_model<span class="token punctuation">(</span>onnx_model<span class="token punctuation">,</span> model_file<span class="token punctuation">)</span>
    <span class="token keyword">return</span> model_file


<span class="token keyword">def</span> <span class="token function">read_model_file</span><span class="token punctuation">(</span>model_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>model_file<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        model_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> model_content


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>prog<span class="token operator">=</span><span class="token string">&quot;nncase&quot;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--target&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;target to run&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--model&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;model file&#39;</span><span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

    dump_dir <span class="token operator">=</span> <span class="token string">&#39;tmp/mobilenetv2_onnx_fp32_preprocess&#39;</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dump_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>dump_dir<span class="token punctuation">)</span>

    <span class="token comment"># onnx simplify</span>
    model_file <span class="token operator">=</span> onnx_simplify<span class="token punctuation">(</span>args<span class="token punctuation">.</span>model<span class="token punctuation">,</span> dump_dir<span class="token punctuation">)</span>

    <span class="token comment"># compile_options</span>
    compile_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>CompileOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
    compile_options<span class="token punctuation">.</span>target <span class="token operator">=</span> args<span class="token punctuation">.</span>target
    compile_options<span class="token punctuation">.</span>input_type <span class="token operator">=</span> <span class="token string">&#39;uint8&#39;</span>
    compile_options<span class="token punctuation">.</span>preprocess <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>swapRB <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>input_layout <span class="token operator">=</span> <span class="token string">&#39;NHWC&#39;</span>
    compile_options<span class="token punctuation">.</span>output_layout <span class="token operator">=</span> <span class="token string">&#39;NCHW&#39;</span>
    compile_options<span class="token punctuation">.</span>input_shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
    compile_options<span class="token punctuation">.</span>mean <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span>
    compile_options<span class="token punctuation">.</span>std <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span>
    compile_options<span class="token punctuation">.</span>input_range <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
    compile_options<span class="token punctuation">.</span>dump_ir <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>dump_asm <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>dump_dir <span class="token operator">=</span> dump_dir

    <span class="token comment"># compiler</span>
    compiler <span class="token operator">=</span> nncase<span class="token punctuation">.</span>Compiler<span class="token punctuation">(</span>compile_options<span class="token punctuation">)</span>

    <span class="token comment"># import_options</span>
    import_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>ImportOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># import</span>
    model_content <span class="token operator">=</span> read_model_file<span class="token punctuation">(</span>model_file<span class="token punctuation">)</span>
    compiler<span class="token punctuation">.</span>import_onnx<span class="token punctuation">(</span>model_content<span class="token punctuation">,</span> import_options<span class="token punctuation">)</span>

    <span class="token comment"># compile</span>
    compiler<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># kmodel</span>
    kmodel <span class="token operator">=</span> compiler<span class="token punctuation">.</span>gencode_tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dump_dir<span class="token punctuation">,</span> <span class="token string">&#39;test.kmodel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>kmodel<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行如下命令即可编译添加前处理的mobilenetv2的onnx模型, target为k510</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /path/to/nncase_sdk/examples
python3 scripts/mobilenetv2_onnx_fp32_preprocess.py <span class="token parameter variable">--target</span> k510 <span class="token parameter variable">--model</span> models/mobilenetv2-7.onnx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-5-编译uint8量化tflite模型" tabindex="-1"><a class="header-anchor" href="#_4-3-5-编译uint8量化tflite模型" aria-hidden="true">#</a> 4.3.5 编译uint8量化tflite模型</h4><ul><li>mobilenetv2_tflite_uint8_image.py脚本如下</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> nncase
<span class="token keyword">import</span> os
<span class="token keyword">import</span> argparse
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token keyword">def</span> <span class="token function">read_model_file</span><span class="token punctuation">(</span>model_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>model_file<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        model_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> model_content

<span class="token keyword">def</span> <span class="token function">generate_data</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> batch<span class="token punctuation">)</span><span class="token punctuation">:</span>
    shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*=</span> batch
    data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token operator">*</span>shape<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
    <span class="token keyword">return</span> data

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>prog<span class="token operator">=</span><span class="token string">&quot;nncase&quot;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--target&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;target to run&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--model&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;model file&#39;</span><span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

    input_shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

    <span class="token comment"># compile_options</span>
    dump_dir <span class="token operator">=</span> <span class="token string">&#39;tmp/mobilenetv2_tflite_uint8_image&#39;</span>
    compile_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>CompileOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
    compile_options<span class="token punctuation">.</span>target <span class="token operator">=</span> args<span class="token punctuation">.</span>target
    compile_options<span class="token punctuation">.</span>input_type <span class="token operator">=</span> <span class="token string">&#39;float32&#39;</span>
    compile_options<span class="token punctuation">.</span>input_layout <span class="token operator">=</span> <span class="token string">&#39;NHWC&#39;</span>
    compile_options<span class="token punctuation">.</span>output_layout <span class="token operator">=</span> <span class="token string">&#39;NHWC&#39;</span>
    compile_options<span class="token punctuation">.</span>dump_ir <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>dump_asm <span class="token operator">=</span> <span class="token boolean">True</span>
    compile_options<span class="token punctuation">.</span>dump_dir <span class="token operator">=</span> dump_dir

    <span class="token comment"># compiler</span>
    compiler <span class="token operator">=</span> nncase<span class="token punctuation">.</span>Compiler<span class="token punctuation">(</span>compile_options<span class="token punctuation">)</span>

    <span class="token comment"># import_options</span>
    import_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>ImportOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># quantize model</span>
    compile_options<span class="token punctuation">.</span>quant_type <span class="token operator">=</span> <span class="token string">&#39;uint8&#39;</span>

    <span class="token comment"># ptq_options</span>
    ptq_options <span class="token operator">=</span> nncase<span class="token punctuation">.</span>PTQTensorOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ptq_options<span class="token punctuation">.</span>samples_count <span class="token operator">=</span> <span class="token number">10</span>
    ptq_options<span class="token punctuation">.</span>set_tensor_data<span class="token punctuation">(</span>generate_data<span class="token punctuation">(</span>input_shape<span class="token punctuation">,</span> ptq_options<span class="token punctuation">.</span>samples_count<span class="token punctuation">)</span><span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># import</span>
    model_content <span class="token operator">=</span> read_model_file<span class="token punctuation">(</span>args<span class="token punctuation">.</span>model<span class="token punctuation">)</span>
    compiler<span class="token punctuation">.</span>import_tflite<span class="token punctuation">(</span>model_content<span class="token punctuation">,</span> import_options<span class="token punctuation">)</span>

    <span class="token comment"># compile</span>
    compiler<span class="token punctuation">.</span>use_ptq<span class="token punctuation">(</span>ptq_options<span class="token punctuation">)</span>
    compiler<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># kmodel</span>
    kmodel <span class="token operator">=</span> compiler<span class="token punctuation">.</span>gencode_tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dump_dir<span class="token punctuation">,</span> <span class="token string">&#39;test.kmodel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>kmodel<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行如下命令即可编译uint8量化的mobilenetv2的tflite模型, target为k510</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /path/to/nncase_sdk/examples
python3 scripts/mobilenetv2_tflite_uint8_image.py <span class="token parameter variable">--target</span> k510 <span class="token parameter variable">--model</span> models/mobilenet_v2_1.0_224.tflite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-推理模型apis" tabindex="-1"><a class="header-anchor" href="#_4-4-推理模型apis" aria-hidden="true">#</a> 4.4 推理模型APIs</h3><p>除了编译模型APIs, nncase还提供了推理模型的APIs, 在PC上可推理前面编译生成的kmodel, 用来验证nncase推理结果和相应深度学习框架的runtime的结果是否一致等.</p><h4 id="_4-4-1-memoryrange" tabindex="-1"><a class="header-anchor" href="#_4-4-1-memoryrange" aria-hidden="true">#</a> 4.4.1 MemoryRange</h4><p><strong>功能描述</strong></p><p>MemoryRange类, 用于表示内存范围</p><p><strong>类定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>py<span class="token punctuation">:</span><span class="token punctuation">:</span>class_<span class="token operator">&lt;</span>memory_range<span class="token operator">&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">&quot;MemoryRange&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;location&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memory_range<span class="token punctuation">:</span><span class="token punctuation">:</span>memory_location<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_property<span class="token punctuation">(</span>
        <span class="token string">&quot;dtype&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>const memory_range <span class="token operator">&amp;</span><span class="token builtin">range</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> to_dtype<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">.</span>datatype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>memory_range <span class="token operator">&amp;</span><span class="token builtin">range</span><span class="token punctuation">,</span> py<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token builtin">object</span> dtype<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token builtin">range</span><span class="token punctuation">.</span>datatype <span class="token operator">=</span> from_dtype<span class="token punctuation">(</span>py<span class="token punctuation">:</span><span class="token punctuation">:</span>dtype<span class="token punctuation">:</span><span class="token punctuation">:</span>from_args<span class="token punctuation">(</span>dtype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memory_range<span class="token punctuation">:</span><span class="token punctuation">:</span>start<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_readwrite<span class="token punctuation">(</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memory_range<span class="token punctuation">:</span><span class="token punctuation">:</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各属性说明如下</p><table><thead><tr><th>属性名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>location</td><td>int</td><td>否</td><td>内存位置, 0表示input, 1表示output, 2表示rdata, 3表示data, 4表示shared_data</td></tr><tr><td>dtype</td><td>python数据类型</td><td>否</td><td>数据类型</td></tr><tr><td>start</td><td>int</td><td>否</td><td>内存起始地址</td></tr><tr><td>size</td><td>int</td><td>否</td><td>内存大小</td></tr></tbody></table><p><strong>代码示例</strong></p><p>实例化MemoryRange</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mr <span class="token operator">=</span> nncase<span class="token punctuation">.</span>MemoryRange<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-4-2-runtimetensor" tabindex="-1"><a class="header-anchor" href="#_4-4-2-runtimetensor" aria-hidden="true">#</a> 4.4.2 RuntimeTensor</h4><p><strong>功能描述</strong></p><p>RuntimeTensor类, 用于表示运行时tensor</p><p><strong>类定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>py<span class="token punctuation">:</span><span class="token punctuation">:</span>class_<span class="token operator">&lt;</span>runtime_tensor<span class="token operator">&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">&quot;RuntimeTensor&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_static<span class="token punctuation">(</span><span class="token string">&quot;from_numpy&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>py<span class="token punctuation">:</span><span class="token punctuation">:</span>array arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        auto src_buffer <span class="token operator">=</span> arr<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        auto datatype <span class="token operator">=</span> from_dtype<span class="token punctuation">(</span>arr<span class="token punctuation">.</span>dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        auto tensor <span class="token operator">=</span> host_runtime_tensor<span class="token punctuation">:</span><span class="token punctuation">:</span>create<span class="token punctuation">(</span>
            datatype<span class="token punctuation">,</span>
            to_rt_shape<span class="token punctuation">(</span>src_buffer<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">,</span>
            to_rt_strides<span class="token punctuation">(</span>src_buffer<span class="token punctuation">.</span>itemsize<span class="token punctuation">,</span> src_buffer<span class="token punctuation">.</span>strides<span class="token punctuation">)</span><span class="token punctuation">,</span>
            gsl<span class="token punctuation">:</span><span class="token punctuation">:</span>make_span<span class="token punctuation">(</span>reinterpret_cast<span class="token operator">&lt;</span>gsl<span class="token punctuation">:</span><span class="token punctuation">:</span>byte <span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>src_buffer<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span> src_buffer<span class="token punctuation">.</span>size <span class="token operator">*</span> src_buffer<span class="token punctuation">.</span>itemsize<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span>gsl<span class="token punctuation">:</span><span class="token punctuation">:</span>byte <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> arr<span class="token punctuation">.</span>dec_ref<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
                          <span class="token punctuation">.</span>unwrap_or_throw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">.</span>inc_ref<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tensor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;copy_to&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>runtime_tensor <span class="token operator">&amp;</span><span class="token keyword">from</span><span class="token punctuation">,</span> runtime_tensor <span class="token operator">&amp;</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">from</span><span class="token punctuation">.</span>copy_to<span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span>unwrap_or_throw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;to_numpy&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>runtime_tensor <span class="token operator">&amp;</span>tensor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        auto host <span class="token operator">=</span> tensor<span class="token punctuation">.</span>as_host<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unwrap_or_throw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        auto src_map <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>move<span class="token punctuation">(</span>hrt<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token builtin">map</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> hrt<span class="token punctuation">:</span><span class="token punctuation">:</span>map_read<span class="token punctuation">)</span><span class="token punctuation">.</span>unwrap_or_throw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        auto src_buffer <span class="token operator">=</span> src_map<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> py<span class="token punctuation">:</span><span class="token punctuation">:</span>array<span class="token punctuation">(</span>
            to_dtype<span class="token punctuation">(</span>tensor<span class="token punctuation">.</span>datatype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            tensor<span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            to_py_strides<span class="token punctuation">(</span>runtime<span class="token punctuation">:</span><span class="token punctuation">:</span>get_bytes<span class="token punctuation">(</span>tensor<span class="token punctuation">.</span>datatype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tensor<span class="token punctuation">.</span>strides<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            src_buffer<span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_property_readonly<span class="token punctuation">(</span><span class="token string">&quot;dtype&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>runtime_tensor <span class="token operator">&amp;</span>tensor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> to_dtype<span class="token punctuation">(</span>tensor<span class="token punctuation">.</span>datatype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_property_readonly<span class="token punctuation">(</span><span class="token string">&quot;shape&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>runtime_tensor <span class="token operator">&amp;</span>tensor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> to_py_shape<span class="token punctuation">(</span>tensor<span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各属性说明如下</p><table><thead><tr><th>属性名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>dtype</td><td>int</td><td>否</td><td>tensor的数据类型</td></tr><tr><td>shape</td><td>list</td><td>否</td><td>tensor的形状</td></tr></tbody></table><h5 id="from-numpy" tabindex="-1"><a class="header-anchor" href="#from-numpy" aria-hidden="true">#</a> from_numpy()</h5><p><strong>功能描述</strong></p><p>从numpy.ndarray构造RuntimeTensor对象</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>from_numpy<span class="token punctuation">(</span>py<span class="token punctuation">:</span><span class="token punctuation">:</span>array arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>arr</td><td>numpy.ndarray</td><td>是</td><td>numpy.ndarray对象</td></tr></tbody></table><p><strong>返回值</strong></p><p>RuntimeTensor</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tensor <span class="token operator">=</span> nncase<span class="token punctuation">.</span>RuntimeTensor<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="copy-to" tabindex="-1"><a class="header-anchor" href="#copy-to" aria-hidden="true">#</a> copy_to()</h5><p><strong>功能描述</strong></p><p>拷贝RuntimeTensor</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>copy_to<span class="token punctuation">(</span>RuntimeTensor to<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>to</td><td>RuntimeTensor</td><td>是</td><td>RuntimeTensor对象</td></tr></tbody></table><p><strong>返回值</strong></p><p>N/A</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sim<span class="token punctuation">.</span>get_output_tensor<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>copy_to<span class="token punctuation">(</span>to<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="to-numpy" tabindex="-1"><a class="header-anchor" href="#to-numpy" aria-hidden="true">#</a> to_numpy()</h5><p><strong>功能描述</strong></p><p>将RuntimeTensor转换为numpy.ndarray对象</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><p>N/A</p><p><strong>返回值</strong></p><p>numpy.ndarray对象</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>arr <span class="token operator">=</span> sim<span class="token punctuation">.</span>get_output_tensor<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-4-3-simulator" tabindex="-1"><a class="header-anchor" href="#_4-4-3-simulator" aria-hidden="true">#</a> 4.4.3 Simulator</h4><p><strong>功能描述</strong></p><p>Simulator类, 用于在PC上推理kmodel</p><p><strong>类定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>py<span class="token punctuation">:</span><span class="token punctuation">:</span>class_<span class="token operator">&lt;</span>interpreter<span class="token operator">&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">&quot;Simulator&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span>py<span class="token punctuation">:</span><span class="token punctuation">:</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;load_model&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>interpreter <span class="token operator">&amp;</span>interp<span class="token punctuation">,</span> gsl<span class="token punctuation">:</span><span class="token punctuation">:</span>span<span class="token operator">&lt;</span>const gsl<span class="token punctuation">:</span><span class="token punctuation">:</span>byte<span class="token operator">&gt;</span> <span class="token builtin">buffer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> interp<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unwrap_or_throw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_property_readonly<span class="token punctuation">(</span><span class="token string">&quot;inputs_size&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>interpreter<span class="token punctuation">:</span><span class="token punctuation">:</span>inputs_size<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>def_property_readonly<span class="token punctuation">(</span><span class="token string">&quot;outputs_size&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>interpreter<span class="token punctuation">:</span><span class="token punctuation">:</span>outputs_size<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;get_input_desc&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>interpreter<span class="token punctuation">:</span><span class="token punctuation">:</span>input_desc<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;get_output_desc&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>interpreter<span class="token punctuation">:</span><span class="token punctuation">:</span>output_desc<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;get_input_tensor&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>interpreter <span class="token operator">&amp;</span>interp<span class="token punctuation">,</span> size_t index<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> interp<span class="token punctuation">.</span>input_tensor<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>unwrap_or_throw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;set_input_tensor&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>interpreter <span class="token operator">&amp;</span>interp<span class="token punctuation">,</span> size_t index<span class="token punctuation">,</span> runtime_tensor tensor<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> interp<span class="token punctuation">.</span>input_tensor<span class="token punctuation">(</span>index<span class="token punctuation">,</span> tensor<span class="token punctuation">)</span><span class="token punctuation">.</span>unwrap_or_throw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;get_output_tensor&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>interpreter <span class="token operator">&amp;</span>interp<span class="token punctuation">,</span> size_t index<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> interp<span class="token punctuation">.</span>output_tensor<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>unwrap_or_throw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;set_output_tensor&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>interpreter <span class="token operator">&amp;</span>interp<span class="token punctuation">,</span> size_t index<span class="token punctuation">,</span> runtime_tensor tensor<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> interp<span class="token punctuation">.</span>output_tensor<span class="token punctuation">(</span>index<span class="token punctuation">,</span> tensor<span class="token punctuation">)</span><span class="token punctuation">.</span>unwrap_or_throw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">def</span><span class="token punctuation">(</span><span class="token string">&quot;run&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>interpreter <span class="token operator">&amp;</span>interp<span class="token punctuation">)</span> <span class="token punctuation">{</span> interp<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unwrap_or_throw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各属性说明如下</p><table><thead><tr><th>属性名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>inputs_size</td><td>int</td><td>否</td><td>输入个数</td></tr><tr><td>outputs_size</td><td>int</td><td>否</td><td>输出个数</td></tr></tbody></table><p><strong>代码示例</strong></p><p>实例化Simulator</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sim <span class="token operator">=</span> nncase<span class="token punctuation">.</span>Simulator<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="load-model" tabindex="-1"><a class="header-anchor" href="#load-model" aria-hidden="true">#</a> load_model()</h5><p><strong>功能描述</strong></p><p>加载kmodel</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>load_model<span class="token punctuation">(</span>model_content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>model_content</td><td>byte[]</td><td>是</td><td>kmodel字节流</td></tr></tbody></table><p><strong>返回值</strong></p><p>N/A</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sim<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span>kmodel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="get-input-desc" tabindex="-1"><a class="header-anchor" href="#get-input-desc" aria-hidden="true">#</a> get_input_desc()</h5><p><strong>功能描述</strong></p><p>获取指定索引的输入的描述信息</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>get_input_desc<span class="token punctuation">(</span>index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>int</td><td>是</td><td>输入的索引</td></tr></tbody></table><p><strong>返回值</strong></p><p>MemoryRange</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>input_desc_0 <span class="token operator">=</span> sim<span class="token punctuation">.</span>get_input_desc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="get-output-desc" tabindex="-1"><a class="header-anchor" href="#get-output-desc" aria-hidden="true">#</a> get_output_desc()</h5><p><strong>功能描述</strong></p><p>获取指定索引的输出的描述信息</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>get_output_desc<span class="token punctuation">(</span>index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>int</td><td>是</td><td>输出的索引</td></tr></tbody></table><p><strong>返回值</strong></p><p>MemoryRange</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>output_desc_0 <span class="token operator">=</span> sim<span class="token punctuation">.</span>get_output_desc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="get-input-tensor" tabindex="-1"><a class="header-anchor" href="#get-input-tensor" aria-hidden="true">#</a> get_input_tensor()</h5><p><strong>功能描述</strong></p><p>获取指定索引的输入的RuntimeTensor</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>get_input_tensor<span class="token punctuation">(</span>index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>int</td><td>是</td><td>输入tensor的索引</td></tr></tbody></table><p><strong>返回值</strong></p><p>RuntimeTensor</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>input_tensor_0 <span class="token operator">=</span> sim<span class="token punctuation">.</span>get_input_tensor<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="set-input-tensor" tabindex="-1"><a class="header-anchor" href="#set-input-tensor" aria-hidden="true">#</a> set_input_tensor()</h5><p><strong>功能描述</strong></p><p>设置指定索引的输入的RuntimeTensor</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set_input_tensor<span class="token punctuation">(</span>index<span class="token punctuation">,</span> tensor<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>int</td><td>是</td><td>输入RuntimeTensor的索引</td></tr><tr><td>tensor</td><td>RuntimeTensor</td><td>是</td><td>输入RuntimeTensor</td></tr></tbody></table><p><strong>返回值</strong></p><p>N/A</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sim<span class="token punctuation">.</span>set_input_tensor<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nncase<span class="token punctuation">.</span>RuntimeTensor<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="get-output-tensor" tabindex="-1"><a class="header-anchor" href="#get-output-tensor" aria-hidden="true">#</a> get_output_tensor()</h5><p><strong>功能描述</strong></p><p>获取指定索引的输出的RuntimeTensor</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>get_output_tensor<span class="token punctuation">(</span>index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>int</td><td>是</td><td>输出RuntimeTensor的索引</td></tr></tbody></table><p><strong>返回值</strong></p><p>RuntimeTensor</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>output_arr_0 <span class="token operator">=</span> sim<span class="token punctuation">.</span>get_output_tensor<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="set-output-tensor" tabindex="-1"><a class="header-anchor" href="#set-output-tensor" aria-hidden="true">#</a> set_output_tensor()</h5><p><strong>功能描述</strong></p><p>设置指定索引的输出的RuntimeTensor</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set_output_tensor<span class="token punctuation">(</span>index<span class="token punctuation">,</span> tensor<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>int</td><td>是</td><td>输出RuntimeTensor的索引</td></tr><tr><td>tensor</td><td>RuntimeTensor</td><td>是</td><td>输出RuntimeTensor</td></tr></tbody></table><p><strong>返回值</strong></p><p>N/A</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sim<span class="token punctuation">.</span>set_output_tensor<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tensor<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> run()</h5><p><strong>功能描述</strong></p><p>运行kmodel推理</p><p><strong>接口定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><p>N/A</p><p><strong>返回值</strong></p><p>N/A</p><p><strong>代码示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sim<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-5-推理模型示例" tabindex="-1"><a class="header-anchor" href="#_4-5-推理模型示例" aria-hidden="true">#</a> 4.5 推理模型示例</h3><p><strong>前置条件</strong>: mobilenetv2_onnx_fp32_image.py脚本已编译过mobilenetv2-7.onnx模型</p><p>mobilenetv2_onnx_simu.py位于/path/to/nncase_sdk/examples/scripts子目录， 内容如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> copy
<span class="token keyword">import</span> argparse
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> onnxruntime <span class="token keyword">as</span> ort
<span class="token keyword">import</span> nncase

<span class="token keyword">def</span> <span class="token function">read_model_file</span><span class="token punctuation">(</span>model_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>model_file<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        model_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> model_content

<span class="token keyword">def</span> <span class="token function">cosine</span><span class="token punctuation">(</span>gt<span class="token punctuation">,</span> pred<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>gt @ pred<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>gt<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>prog<span class="token operator">=</span><span class="token string">&quot;nncase&quot;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--model_file&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;original model file&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--kmodel_file&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;kmodel file&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--input_file&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;input bin file for kmodel&#39;</span><span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># create simulator</span>
    sim <span class="token operator">=</span> nncase<span class="token punctuation">.</span>Simulator<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># read kmodel</span>
    kmodel <span class="token operator">=</span> read_model_file<span class="token punctuation">(</span>args<span class="token punctuation">.</span>kmodel_file<span class="token punctuation">)</span>

    <span class="token comment"># load kmodel</span>
    sim<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span>kmodel<span class="token punctuation">)</span>

    <span class="token comment"># read input.bin</span>
    input_tensor<span class="token operator">=</span>sim<span class="token punctuation">.</span>get_input_tensor<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin">input</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span>args<span class="token punctuation">.</span>input_file<span class="token punctuation">,</span> input_tensor<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>input_tensor<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>

    <span class="token comment"># set input for simulator</span>
    sim<span class="token punctuation">.</span>set_input_tensor<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nncase<span class="token punctuation">.</span>RuntimeTensor<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># simulator inference</span>
    nncase_results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    sim<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sim<span class="token punctuation">.</span>outputs_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        nncase_result <span class="token operator">=</span> sim<span class="token punctuation">.</span>get_output_tensor<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
        nncase_results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>nncase_result<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># cpu inference</span>
    cpu_results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    ort_session <span class="token operator">=</span> ort<span class="token punctuation">.</span>InferenceSession<span class="token punctuation">(</span>args<span class="token punctuation">.</span>model_file<span class="token punctuation">)</span>
    input_name <span class="token operator">=</span> ort_session<span class="token punctuation">.</span>get_inputs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name
    output_name <span class="token operator">=</span> ort_session<span class="token punctuation">.</span>get_outputs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name
    cpu_results <span class="token operator">=</span> ort_session<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>output_name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> input_name <span class="token punctuation">:</span> <span class="token builtin">input</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment"># compare</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sim<span class="token punctuation">.</span>outputs_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        cos <span class="token operator">=</span> cosine<span class="token punctuation">(</span>np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>nncase_results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>cpu_results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;output {0} cosine similarity : {1}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> cos<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行推理脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /path/to/nncase_sdk/examples
python3 scripts/mobilenetv2_onnx_simu.py <span class="token parameter variable">--model_file</span> models/mobilenetv2-7.onnx <span class="token parameter variable">--kmodel_file</span> tmp/mobilenetv2_onnx_fp32_image/test.kmodel <span class="token parameter variable">--input_file</span> mobilenetv2_onnx_fp32_image/data/input_0_0.bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>nncase simulator和cpu推理结果对比如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">..</span>. <span class="token punctuation">..</span>.
output <span class="token number">0</span> cosine similarity <span class="token builtin class-name">:</span> <span class="token number">0.9992437958717346</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-nncase-运行时库" tabindex="-1"><a class="header-anchor" href="#_5-nncase-运行时库" aria-hidden="true">#</a> 5 nncase 运行时库</h2><h3 id="_5-1-nncase-runtime-简介" tabindex="-1"><a class="header-anchor" href="#_5-1-nncase-runtime-简介" aria-hidden="true">#</a> 5.1 nncase Runtime 简介</h3><p>nncase runtime用于在AI设备加载kmodel/设置输入数据/执行KPU计算/获取输出数据等.</p><p>目前只提供<strong>C++版本</strong>的APIs, 相关的头文件和静态库在nncase sdk/riscv64目录下.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tree <span class="token parameter variable">-L</span> <span class="token number">3</span> riscv64/
riscv64/
├── include
│   ├── gsl
│   │   └── gsl-lite.hpp
│   ├── gsl-lite
│   │   └── gsl-lite.hpp
│   ├── mpark
│   │   ├── config.hpp
│   │   ├── in_place.hpp
│   │   ├── lib.hpp
│   │   └── variant.hpp
│   └── nncase
│       ├── functional
│       ├── kernels
│       ├── runtime
│       └── version.h
└── lib
    ├── cmake
    │   ├── nncasefunctional
    │   ├── nncase_rt_modules_k510
    │   └── nncaseruntime
    ├── libnncase.functional.a
    ├── libnncase.rt_modules.k510.a
    └── libnncase.runtime.a

<span class="token number">13</span> directories, <span class="token number">10</span> files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-runtime-apis" tabindex="-1"><a class="header-anchor" href="#_5-2-runtime-apis" aria-hidden="true">#</a> 5.2 Runtime APIs</h3><h4 id="_5-2-1-class-runtime-tensor" tabindex="-1"><a class="header-anchor" href="#_5-2-1-class-runtime-tensor" aria-hidden="true">#</a> 5.2.1 class runtime_tensor</h4><p>用于存储模型输入/输出数据的tensor</p><h5 id="hrt-create" tabindex="-1"><a class="header-anchor" href="#hrt-create" aria-hidden="true">#</a> hrt::create()</h5><p><strong>功能描述</strong></p><p>创建runtime_tensor</p><p><strong>接口定义</strong></p><div class="language-C++ line-numbers-mode" data-ext="C++"><pre class="language-C++"><code>(1) NNCASE_API result&lt;runtime_tensor&gt; create(datatype_t datatype, runtime_shape_t shape, memory_pool_t pool = pool_cpu_only, uintptr_t physical_address = 0) noexcept;

(2) NNCASE_API result&lt;runtime_tensor&gt; create(datatype_t datatype, runtime_shape_t shape, gsl::span&lt;gsl::byte&gt; data, bool copy, memory_pool_t pool = pool_cpu_only, uintptr_t physical_address = 0) noexcept;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>datatype</td><td>datatype_t</td><td>是</td><td>数据类型, 如dt_float32</td></tr><tr><td>shape</td><td>runtime_shape_t</td><td>是</td><td>tensor的形状</td></tr><tr><td>data</td><td>gsl::span&lt;gsl::byte&gt;</td><td>是</td><td>用户态数据buffer</td></tr><tr><td>copy</td><td>bool</td><td>是</td><td>是否拷贝</td></tr><tr><td>pool</td><td>memory_pool_t</td><td>否</td><td>内存池类型, 默认值为pool_cpu_only</td></tr><tr><td>physical_address</td><td>uintptr_t</td><td>否</td><td>物理地址, 默认值为0</td></tr></tbody></table><p><strong>返回值</strong></p><p>result&lt;runtime_tensor&gt;</p><p>代码示例</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>// create input
auto in_shape = interp.input_shape(0);
auto input_tensor = host_runtime_tensor::create(dt_float32, in_shape,
                                                {(gsl::byte *)mat.data, mat.cols * mat.rows * mat.elemSize()},
                                                true, hrt::pool_shared).expect(&quot;cannot create input tensor&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-2-class-interpreter" tabindex="-1"><a class="header-anchor" href="#_5-2-2-class-interpreter" aria-hidden="true">#</a> 5.2.2 class interpreter</h4><p>interpreter是nncase runtime的运行实例, 它提供了load_model()/run()/input_tensor()/output_tensor()等核心功能函数.</p><h5 id="load-model-1" tabindex="-1"><a class="header-anchor" href="#load-model-1" aria-hidden="true">#</a> load_model()</h5><p><strong>功能描述</strong></p><p>加载kmodel模型</p><p><strong>接口定义</strong></p><div class="language-C++ line-numbers-mode" data-ext="C++"><pre class="language-C++"><code> NNCASE_NODISCARD result&lt;void&gt; load_model(gsl::span&lt;const gsl::byte&gt; buffer) noexcept;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>buffer</td><td>gsl::span <code>&lt;const gsl::byte&gt;</code></td><td>是</td><td>kmodel buffer</td></tr></tbody></table><p><strong>返回值</strong></p><p>result <code>&lt;void&gt;</code></p><p><strong>代码示例</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>template &lt;class T&gt;
std::vector&lt;T&gt;read_binary_file(const char *file_name)
{
  std::ifstream ifs(file_name, std::ios::binary);
  ifs.seekg(0, ifs.end);
  size_t len = ifs.tellg();
  std::vector&lt;T&gt; vec(len / sizeof(T), 0);
  ifs.seekg(0, ifs.beg);
  ifs.read(reinterpret_cast&lt;char*&gt;(vec.data()), len);
  ifs.close();
  return vec;
}

interpreter interp;
auto model = read_binary_file&lt;unsigned char&gt;(kmodel);
interp.load_model({(const gsl::byte *)model.data(), model.size()}).expect(&quot;cannot load model.&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="inputs-size" tabindex="-1"><a class="header-anchor" href="#inputs-size" aria-hidden="true">#</a> inputs_size()</h5><p><strong>功能描述</strong></p><p>获取模型输入的个数</p><p><strong>接口定义</strong></p><div class="language-C++ line-numbers-mode" data-ext="C++"><pre class="language-C++"><code>size_t inputs_size() const noexcept;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><p>N/A</p><p><strong>返回值</strong></p><p>size_t</p><p><strong>代码示例</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>auto inputs_size = interp.inputs_size();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="outputs-size" tabindex="-1"><a class="header-anchor" href="#outputs-size" aria-hidden="true">#</a> outputs_size()</h5><p><strong>功能描述</strong></p><p>获取模型输出的个数</p><p><strong>接口定义</strong></p><div class="language-C++ line-numbers-mode" data-ext="C++"><pre class="language-C++"><code>size_t outputs_size() const noexcept;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><p>N/A</p><p><strong>返回值</strong></p><p>size_t</p><p><strong>代码示例</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>auto outputs_size = interp.outputs_size();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="input-shape" tabindex="-1"><a class="header-anchor" href="#input-shape" aria-hidden="true">#</a> input_shape()</h5><p><strong>功能描述</strong></p><p>获取模型指定输入的shape</p><p><strong>接口定义</strong></p><div class="language-C++ line-numbers-mode" data-ext="C++"><pre class="language-C++"><code>const runtime_shape_t &amp;input_shape(size_t index) const noexcept;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>size_t</td><td>是</td><td>输入的索引</td></tr></tbody></table><p><strong>返回值</strong></p><p>runtime_shape_t</p><p><strong>代码示例</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>auto in_shape = interp.input_shape(0);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="output-shape" tabindex="-1"><a class="header-anchor" href="#output-shape" aria-hidden="true">#</a> output_shape()</h5><p><strong>功能描述</strong></p><p>获取模型指定输出的shape</p><p><strong>接口定义</strong></p><div class="language-C++ line-numbers-mode" data-ext="C++"><pre class="language-C++"><code>const runtime_shape_t &amp;output_shape(size_t index) const noexcept;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>size_t</td><td>是</td><td>输出的索引</td></tr></tbody></table><p><strong>返回值</strong></p><p>runtime_shape_t</p><p><strong>代码示例</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>auto out_shape = interp.output_shape(0);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="input-tensor" tabindex="-1"><a class="header-anchor" href="#input-tensor" aria-hidden="true">#</a> input_tensor()</h5><p><strong>功能描述</strong></p><p>获取/设置指定索引的input tensor</p><p><strong>接口定义</strong></p><div class="language-C++ line-numbers-mode" data-ext="C++"><pre class="language-C++"><code>(1) result&lt;runtime_tensor&gt; input_tensor(size_t index) noexcept;
(2) result&lt;void&gt; input_tensor(size_t index, runtime_tensor tensor) noexcept;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>size_t</td><td>是</td><td>kmodel buffer</td></tr><tr><td>tensor</td><td>runtime_tensor</td><td>是</td><td>输入对应的runtime tensor</td></tr></tbody></table><p><strong>返回值</strong></p><p>(1) 返回result&lt;runtime_tensor&gt;</p><p>(2) 返回result <code>&lt;void&gt;</code></p><p><strong>代码示例</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>// set input
interp.input_tensor(0, input_tensor).expect(&quot;cannot set input tensor&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="output-tensor" tabindex="-1"><a class="header-anchor" href="#output-tensor" aria-hidden="true">#</a> output_tensor()</h5><p><strong>功能描述</strong></p><p>获取/设置指定索引的output tensor</p><p><strong>接口定义</strong></p><div class="language-C++ line-numbers-mode" data-ext="C++"><pre class="language-C++"><code>(1) result&lt;runtime_tensor&gt; output_tensor(size_t index) noexcept;
(2) result&lt;void&gt; output_tensor(size_t index, runtime_tensor tensor) noexcept;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>size_t</td><td>是</td><td></td></tr><tr><td>tensor</td><td>runtime_tensor</td><td>是</td><td>输入对应的runtime tensor</td></tr></tbody></table><p><strong>返回值</strong></p><p>(1) 返回result&lt;runtime_tensor&gt;</p><p>(2) 返回result <code>&lt;void&gt;</code></p><p><strong>代码示例</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>// get output
auto output_tensor = interp.output_tensor(0).expect(&quot;cannot get output tensor&quot;);
auto mapped_buf = std::move(hrt::map(output_tensor, hrt::map_read).unwrap_or_throw());
float *output_data = reinterpret_cast&lt;float *&gt;(mapped_buf.buffer().data());
auto out_shape = interp.output_shape(0);
auto it = std::max_element(output_data, output_data + compute_size(out_shape));
size_t idx = it - output_data;
std::cout &lt;&lt; &quot;image classification result: &quot; &lt;&lt; labels[idx] &lt;&lt; &quot;(&quot; &lt;&lt; *it &lt;&lt; &quot;)&quot; &lt;&lt; std::endl;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="run-1" tabindex="-1"><a class="header-anchor" href="#run-1" aria-hidden="true">#</a> run()</h5><p><strong>功能描述</strong></p><p>执行kpu计算</p><p><strong>接口定义</strong></p><div class="language-C++ line-numbers-mode" data-ext="C++"><pre class="language-C++"><code>result&lt;void&gt; run() noexcept;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输入参数</strong></p><p>N/A</p><p><strong>返回值</strong></p><p>result <code>&lt;void&gt;</code></p><p><strong>代码示例</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>// run
interp.run().expect(&quot;error occurred in running model&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-runtime示例" tabindex="-1"><a class="header-anchor" href="#_5-3-runtime示例" aria-hidden="true">#</a> 5.3 Runtime示例</h3><p>示例代码位于/path/to/nncase_sdk/examples/mobilenetv2_onnx_fp32_image</p><p><strong>前置条件</strong></p><ul><li>mobilenetv2_onnx_fp32_image.py脚本已编译过mobilenetv2-7.onnx模型</li><li>由于该示例依赖OpenCV库，需要在示例的CMakeLists.txt中指定OpenCV的路径。</li></ul><p><strong>交叉编译app</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /path/to/nncase_sdk/examples
./build.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后在out/bin目录下生成mobilenetv2_onnx_fp32_image</p><p><strong>k510 EVB上板运行</strong></p><p>将下面几个文件拷贝到k510 EVB板上</p><table><thead><tr><th>文件</th><th>备注</th></tr></thead><tbody><tr><td>mobilenetv2_onnx_fp32_image</td><td>交叉编译examples生成</td></tr><tr><td>test.kmodel</td><td>使用mobilenetv2_onnx_fp32_image.py编译mobilenetv2-7.onnx生成</td></tr><tr><td>cat.png和labels_1000.txt</td><td>位于/path/to/nncase_sdk/examples/mobilenetv2_onnx_fp32_image/data/子目录下</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$LD_LIBRARY_PATH</span>:/mnt/zhangyang/nncase_check/lib/gomp:/mnt/zhangyang/nncase_check/lib/opencv
$ ./mobilenetv2_onnx_fp32_image test.kmodel cat.png labels_1000.txt
<span class="token keyword">case</span> ./mobilenetv2_onnx_fp32_image build at Mar  <span class="token number">1</span> <span class="token number">2022</span> <span class="token number">16</span>:31:29
interp.run<span class="token punctuation">(</span><span class="token punctuation">)</span> duration: <span class="token number">12.6642</span> ms
image classification result: tiger cat<span class="token punctuation">(</span><span class="token number">9.25</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-函数式编程库-运行时支持" tabindex="-1"><a class="header-anchor" href="#_6-函数式编程库-运行时支持" aria-hidden="true">#</a> 6 函数式编程库(运行时支持)</h2><h3 id="_6-1-functional简介" tabindex="-1"><a class="header-anchor" href="#_6-1-functional简介" aria-hidden="true">#</a> 6.1 Functional简介</h3><p>nncase Functional用于提升用户对模型进行前后处理时的易用性</p><p>目前只提供C++版本的APIs, 相关的头文件和库在nncase sdk的riscv64目录下.</p><h3 id="_6-2-apis" tabindex="-1"><a class="header-anchor" href="#_6-2-apis" aria-hidden="true">#</a> 6.2 APIS</h3><h4 id="_6-2-1-square" tabindex="-1"><a class="header-anchor" href="#_6-2-1-square" aria-hidden="true">#</a> 6.2.1 square</h4><p><strong>功能描述</strong></p><p>计算平方,目前支持输入uint8/int8,输出也为uint8/int8,注意输入为定点且输出为浮点时需要设置量化参数.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1adff2f60c7c045a9840519eab2c04d127"><code>square</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码示例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_type <span class="token operator">==</span> dt_uint8 <span class="token operator">or</span> input_type <span class="token operator">==</span> dt_int8<span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>output_type <span class="token operator">==</span> dt_float32 <span class="token operator">or</span> output_type <span class="token operator">==</span> dt_bfloat16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> squared <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">square</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-2-sqrt" tabindex="-1"><a class="header-anchor" href="#_6-2-2-sqrt" aria-hidden="true">#</a> 6.2.2 sqrt</h4><p><strong>功能描述</strong></p><p>计算根号值,目前支持输入uint8/int8,输出也为uint8/int8,注意输入为定点且输出为浮点时需要设置量化参数.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1a53f8dde3dd4e27058b5dc743eb5dd076"><code>sqrt</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码示例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_type <span class="token operator">==</span> dt_uint8 <span class="token operator">or</span> input_type <span class="token operator">==</span> dt_int8<span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>output_type <span class="token operator">==</span> dt_float32 <span class="token operator">or</span> output_type <span class="token operator">==</span> dt_bfloat16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> output <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">sqrt</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-3-log" tabindex="-1"><a class="header-anchor" href="#_6-2-3-log" aria-hidden="true">#</a> 6.2.3 log</h4><p><strong>功能描述</strong></p><p>计算log值,输入的负数会被转换为Nan,目前支持输入uint8/int8,输出也为uint8/int8,注意输入为定点且输出为浮点时需要设置量化参数.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1a91df53276c3f1511427d4ac1a0140b71"><code>log</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码示例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_type <span class="token operator">==</span> dt_uint8 <span class="token operator">or</span> input_type <span class="token operator">==</span> dt_int8<span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>output_type <span class="token operator">==</span> dt_float32 <span class="token operator">or</span> output_type <span class="token operator">==</span> dt_bfloat16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> output <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-4-exp" tabindex="-1"><a class="header-anchor" href="#_6-2-4-exp" aria-hidden="true">#</a> 6.2.4 exp</h4><p><strong>功能描述</strong></p><p>计算exp值,目前支持输入uint8/int8,输出也为uint8/int8,注意输入为定点且输出为浮点时需要设置量化参数.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1a2c6ce457805a5ba515fa7454fb4aede0"><code>exp</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码示例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_type <span class="token operator">==</span> dt_uint8 <span class="token operator">or</span> input_type <span class="token operator">==</span> dt_int8<span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>output_type <span class="token operator">==</span> dt_float32 <span class="token operator">or</span> output_type <span class="token operator">==</span> dt_bfloat16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> output <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">exp</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-5-sin" tabindex="-1"><a class="header-anchor" href="#_6-2-5-sin" aria-hidden="true">#</a> 6.2.5 sin</h4><p><strong>功能描述</strong></p><p>计算sin值,目前支持输入uint8/int8,输出也为uint8/int8,注意输入为定点且输出为浮点时需要设置量化参数.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1a9605b2b0dc9a6892ce878bda14586890"><code>sin</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_type <span class="token operator">==</span> dt_uint8 <span class="token operator">or</span> input_type <span class="token operator">==</span> dt_int8<span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>output_type <span class="token operator">==</span> dt_float32 <span class="token operator">or</span> output_type <span class="token operator">==</span> dt_bfloat16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> output <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">sin</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-6-cos" tabindex="-1"><a class="header-anchor" href="#_6-2-6-cos" aria-hidden="true">#</a> 6.2.6 cos</h4><p><strong>功能描述</strong></p><p>计算cos值,目前支持输入uint8/int8,输出也为uint8/int8,注意输入为定点且输出为浮点时需要设置量化参数.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1a71d36c13c82f4c411f24d030cf333249"><code>cos</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_type <span class="token operator">==</span> dt_uint8 <span class="token operator">or</span> input_type <span class="token operator">==</span> dt_int8<span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>output_type <span class="token operator">==</span> dt_float32 <span class="token operator">or</span> output_type <span class="token operator">==</span> dt_bfloat16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> output <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">cos</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-7-round" tabindex="-1"><a class="header-anchor" href="#_6-2-7-round" aria-hidden="true">#</a> 6.2.7 round</h4><p><strong>功能描述</strong></p><p>计算round值,目前支持输入uint8/int8,输出也为uint8/int8,注意输入为定点且输出为浮点时需要设置量化参数.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1a81db8ac4866004f75fb65db876262785"><code>round</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_type <span class="token operator">==</span> dt_uint8 <span class="token operator">or</span> input_type <span class="token operator">==</span> dt_int8<span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>output_type <span class="token operator">==</span> dt_float32 <span class="token operator">or</span> output_type <span class="token operator">==</span> dt_bfloat16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> output <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">round</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-8-floor" tabindex="-1"><a class="header-anchor" href="#_6-2-8-floor" aria-hidden="true">#</a> 6.2.8 floor</h4><p><strong>功能描述</strong></p><p>计算floor值,目前支持输入uint8/int8,输出也为uint8/int8,注意输入为定点且输出为浮点时需要设置量化参数.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1a1079af8fe9fb6edbb2906d91fac12635"><code>floor</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_type <span class="token operator">==</span> dt_uint8 <span class="token operator">or</span> input_type <span class="token operator">==</span> dt_int8<span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>output_type <span class="token operator">==</span> dt_float32 <span class="token operator">or</span> output_type <span class="token operator">==</span> dt_bfloat16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> output <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">floor</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-9-ceil" tabindex="-1"><a class="header-anchor" href="#_6-2-9-ceil" aria-hidden="true">#</a> 6.2.9 ceil</h4><p><strong>功能描述</strong></p><p>计算ceil值,目前支持输入uint8/int8,输出也为uint8/int8,注意输入为定点且输出为浮点时需要设置量化参数.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1ad3b78c97f1e5348a26de7e5ba2396fb7"><code>ceil</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_type <span class="token operator">==</span> dt_uint8 <span class="token operator">or</span> input_type <span class="token operator">==</span> dt_int8<span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>output_type <span class="token operator">==</span> dt_float32 <span class="token operator">or</span> output_type <span class="token operator">==</span> dt_bfloat16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> output <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">ceil</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-10-abs" tabindex="-1"><a class="header-anchor" href="#_6-2-10-abs" aria-hidden="true">#</a> 6.2.10 abs</h4><p><strong>功能描述</strong></p><p>计算abs值,目前支持输入uint8/int8,输出也为uint8/int8,注意输入为定点且输出为浮点时需要设置量化参数.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1ad8290dc793bae0dc22b3baf9e0f80c14"><code>abs</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_type <span class="token operator">==</span> dt_uint8 <span class="token operator">or</span> input_type <span class="token operator">==</span> dt_int8<span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>output_type <span class="token operator">==</span> dt_float32 <span class="token operator">or</span> output_type <span class="token operator">==</span> dt_bfloat16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> output <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-11-neg" tabindex="-1"><a class="header-anchor" href="#_6-2-11-neg" aria-hidden="true">#</a> 6.2.11 neg</h4><p><strong>功能描述</strong></p><p>计算neg值,目前支持输入uint8/int8,输出也为uint8/int8,注意输入为定点且输出为浮点时需要设置量化参数.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1aa1b7858802e1afce78db72163c5210d8"><code>neg</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_type <span class="token operator">==</span> dt_uint8 <span class="token operator">or</span> input_type <span class="token operator">==</span> dt_int8<span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>output_type <span class="token operator">==</span> dt_float32 <span class="token operator">or</span> output_type <span class="token operator">==</span> dt_bfloat16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">auto</span> output <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">neg</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-12-quantize" tabindex="-1"><a class="header-anchor" href="#_6-2-12-quantize" aria-hidden="true">#</a> 6.2.12 quantize</h4><p><strong>功能描述</strong></p><p>输入dt_bfloat16, dt_float32 数据,输出dt_int8或 dt_uint8输出</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1ad8ad779083b5c08da520d2f1c2469c3a"><code>quantize</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入, 类型必须为float32 或 bfloat16</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> quantized <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">quantize</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> dt_int8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-2-13-dequantize" tabindex="-1"><a class="header-anchor" href="#_6-2-13-dequantize" aria-hidden="true">#</a> 6.2.13 dequantize</h4><p><strong>功能描述</strong></p><p>输入 uint8 or int8 输入,转换到 float or bfloat数据. 注意,用户必须提前为数据设置好正确的量化参数用于反量化.</p><p><strong>接口定义</strong></p><p><code>public inline NNCASE_API</code><a href="#classnncase_1_1result"><code>result</code></a><code>&lt; runtime::runtime_tensor &gt;</code><a href="#ops_8h_1ab91a262349baf393c91abad6f393de24"><code>dequantize</code></a><code>(runtime::runtime_tensor &amp; input,datatype_t dtype) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>input</code></td><td>runtime_tensor</td><td>是</td><td>输入</td></tr><tr><td><code>dtype</code></td><td>datatype_t</td><td>是</td><td>输出tensor datatype</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>input<span class="token punctuation">.</span><span class="token function">quant_param</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> dequantized <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">dequantize</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-14-crop" tabindex="-1"><a class="header-anchor" href="#_6-2-14-crop" aria-hidden="true">#</a> 6.2.14 crop</h4><p><strong>功能描述</strong></p><p>给定bboxs,从原始tensor中裁剪并resize输出到新tensor中. 接受dt_bfloat16, dt_float32, dt_int8, dt_uint8类型输出,输出相同类型.</p><p><strong>接口定义</strong></p><p><code>NNCASE_API inline result&lt;runtime::runtime_tensor&gt; crop(runtime::runtime_tensor &amp;input, runtime::runtime_tensor &amp;bbox, size_t out_h, size_t out_w, image_resize_mode_t resize_mode, bool align_corners, bool half_pixel_centers) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>input</td><td>runtime_tensor</td><td>是</td><td>输入数据,需要 [n,c,h,w] 格式排布 ,如果数据为uint8或int8 请保证数据量化参数的正确性</td></tr><tr><td>bbox</td><td>runtime_tensor</td><td>是</td><td>输入bbox数据, 需要 [1,1,m,4] 格式排布, 内部数据为[y0,x0,y1,x1], 类型为[float32,bfloat16]</td></tr><tr><td>out_h</td><td>size_t</td><td>是</td><td>输出数据height</td></tr><tr><td>out_w</td><td>size_t</td><td>是</td><td>输入数据width</td></tr><tr><td>resize_mode</td><td>image_resize_mode_t</td><td>是</td><td>resize方法模式</td></tr><tr><td>align_corners</td><td>bool</td><td>是</td><td>resize 是否 align_corners</td></tr><tr><td>half_pixel_centers</td><td>bool</td><td>是</td><td>resize是否pixel中心对齐</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> bbox <span class="token operator">=</span> <span class="token function">get_rand_bbox</span><span class="token punctuation">(</span>input_shape<span class="token punctuation">,</span> roi_amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">[</span>out_h<span class="token punctuation">,</span> out_w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get_rand_out_hw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> output_opt <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">crop</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> bbox<span class="token punctuation">,</span> out_h<span class="token punctuation">,</span> out_w<span class="token punctuation">,</span> resize_mode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-15-resize" tabindex="-1"><a class="header-anchor" href="#_6-2-15-resize" aria-hidden="true">#</a> 6.2.15 resize</h4><p><strong>功能描述</strong></p><p>给定输出高度 宽度,把输入tensor resize到新尺寸. 接受dt_bfloat16, dt_float32, dt_int8, dt_uint8类型输出,输出相同类型.</p><p><strong>接口定义</strong></p><p><code>NNCASE_API inline result&lt;runtime::runtime_tensor&gt; resize(runtime::runtime_tensor &amp;input, size_t out_h, size_t out_w, image_resize_mode_t resize_mode, bool align_corners, bool half_pixel_centers) noexcept</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>input</td><td>runtime_tensor</td><td>是</td><td>输入数据,需要 [n,c,h,w] 格式排布, 如果数据为uint8或int8 请保证数据量化参数的正确性</td></tr><tr><td>out_h</td><td>size_t</td><td>是</td><td>输出数据height</td></tr><tr><td>out_w</td><td>size_t</td><td>是</td><td>输入数据width</td></tr><tr><td>resize_mode</td><td>image_resize_mode_t</td><td>是</td><td>resize方法模式</td></tr><tr><td>align_corners</td><td>bool</td><td>是</td><td>resize 是否 align_corners</td></tr><tr><td>half_pixel_centers</td><td>bool</td><td>是</td><td>resize是否pixel中心对齐</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">[</span>out_h<span class="token punctuation">,</span> out_w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get_rand_out_hw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> output_opt <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> out_h<span class="token punctuation">,</span> out_w<span class="token punctuation">,</span> resize_mode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-16-pad" tabindex="-1"><a class="header-anchor" href="#_6-2-16-pad" aria-hidden="true">#</a> 6.2.16 pad</h4><p><strong>功能描述</strong></p><p>在每个维度上padding数据,接受dt_bfloat16, dt_float32, dt_int8, dt_uint8类型输出,输出相同类型.</p><p><strong>接口定义</strong></p><p><code>NNCASE_API inline result&lt;runtime::runtime_tensor&gt; pad(runtime::runtime_tensor &amp;input, runtime_paddings_t &amp;paddings, pad_mode_t pad_mode, float fill_v)</code></p><p><strong>输入参数</strong></p><table><thead><tr><th>参数名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>input</td><td>runtime_tensor</td><td>是</td><td>输入数据,如果数据为uint8或int8 请保证数据量化参数的正确性</td></tr><tr><td>padding</td><td>runtime_paddings_t</td><td>是</td><td>每个维度的padding值, 注意顺序为逆向. 比如padding值为 <code>[ {2,3}, {1,3} ]</code>表示在最后一维前面pad 2,后面pad 3. 倒数第二维前面pad 1, 后面pad 2</td></tr><tr><td>pad_mode</td><td>pad_mode_t</td><td>是</td><td>目前暂时只支持const 模式</td></tr><tr><td>fill_v</td><td>float</td><td>是</td><td>填充值</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>result&lt;runtime_tensor&gt;</code></p><p><strong>代码实例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>runtime_paddings_t paddings<span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> output <span class="token operator">=</span> <span class="token class-name">F</span><span class="token double-colon punctuation">::</span><span class="token function">pad</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> paddings<span class="token punctuation">,</span> pad_constant<span class="token punctuation">,</span> pad_value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-量化白皮书" tabindex="-1"><a class="header-anchor" href="#_7-量化白皮书" aria-hidden="true">#</a> 7 量化白皮书</h2><h3 id="_7-1-分类模型量化白皮书" tabindex="-1"><a class="header-anchor" href="#_7-1-分类模型量化白皮书" aria-hidden="true">#</a> 7.1 分类模型量化白皮书</h3><table><thead><tr><th>分类模型</th><th>cpu精度(Top-1)</th><th>浮点精度(Top-1)</th><th>uint8精度(Top-1)</th><th>int8精度(Top-1)</th></tr></thead><tbody><tr><td>alexnet</td><td>0.531</td><td>0.53</td><td>N/A</td><td>0.52</td></tr><tr><td>densenet 121</td><td>0.732</td><td>0.732</td><td>0.723</td><td>N/A</td></tr><tr><td>inception v3</td><td>0.766</td><td>0.765</td><td>0.773</td><td>0.77</td></tr><tr><td>inception v4</td><td>0.789</td><td>0.789</td><td>0.793</td><td>0.792</td></tr><tr><td>mobilenet v1</td><td>0.731</td><td>0.73</td><td>0.723</td><td>0.718</td></tr><tr><td>mobilenet v2</td><td>0.713</td><td>0.715</td><td>0.713</td><td>0.719</td></tr><tr><td>resnet50 v2</td><td>0.747</td><td>0.74</td><td>0.748</td><td>0.749</td></tr><tr><td>vgg 16</td><td>0.689</td><td>0.687</td><td>0.690</td><td>0.689</td></tr></tbody></table><blockquote><p>本表格主要为了对比量化的性能，cpu精度为完整ImageNet验证集数据，浮点和量化精度为验证集中1000类按照序号首先出现的图片作为数据子集测试的结果。</p><p>Alexnet和DenseNet的测试结果为旧数据，均为验证集前1000张图像作为数据子集的测试结果，N/A为当时的测试数据子集与CPU不同，因此不作为比较。</p><p>因为所选网络不一定来源于官方或者预处理等存在差异，可能与官方性能有所不同。</p></blockquote><h3 id="_7-2-检测模型量化白皮书" tabindex="-1"><a class="header-anchor" href="#_7-2-检测模型量化白皮书" aria-hidden="true">#</a> 7.2 检测模型量化白皮书</h3><ol><li><p>YOLOV3</p><table><thead><tr><th>COCOAPI</th><th>官方结果</th><th>CPU浮点精度</th><th>gnne浮点精度</th><th>uint8精度</th><th>int8精度</th></tr></thead><tbody><tr><td>Average Precision (AP) @ [IoU = 0.50:0.95| area = all | maxDets = 100]</td><td>0.314</td><td>0.307</td><td>0.306</td><td>0.295</td><td>0.288</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.50| area = all | maxDets = 100]</td><td>0.559</td><td>0.555</td><td>0.554</td><td>0.555</td><td>0.554</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.75| area = all | maxDets = 100]</td><td>0.318</td><td>0.308</td><td>0.307</td><td>0.287</td><td>0.275</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.50:0.95| area = small | maxDets = 100]</td><td>0.142</td><td>0.150</td><td>0.149</td><td>0.147</td><td>0.144</td></tr><tr><td>Average Precision (AP) @ [IoU= 0.50:0.95| area = medium | maxDets = 100]</td><td>0.341</td><td>0.332</td><td>0.332</td><td>0.322</td><td>0.316</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.50:0.95| area = large | maxDets = 100]</td><td>0.464</td><td>0.437</td><td>0.437</td><td>0.414</td><td>0.404</td></tr><tr><td>Average Recall (AR) @ [IoU= 0.50:0.95| area = all | maxDets = 1]</td><td>0.278</td><td>0.270</td><td>0.271</td><td>0.262</td><td>0.256</td></tr><tr><td>Average Recall (AR) @ [IoU= 0.50:0.95| area = all | maxDets = 10]</td><td>0.419</td><td>0.412</td><td>0.412</td><td>0.399</td><td>0.392</td></tr><tr><td>Average Recall (AR) @ [IoU = 0.50:0.95| area = all | maxDets = 100]</td><td>0.442</td><td>0.433</td><td>0.433</td><td>0.421</td><td>0.414</td></tr><tr><td>Average Recall (AR) @ [IoU = 0.50:0.95| area = small | maxDets = 100]</td><td>0.239</td><td>0.251</td><td>0.251</td><td>0.248</td><td>0.246</td></tr><tr><td>Average Recall (AR) @ [IoU= 0.50:0.95| area = medium | maxDets = 100]</td><td>0.482</td><td>0.462</td><td>0.463</td><td>0.451</td><td>0.443</td></tr><tr><td>Average Recall (AR) @ [IoU = 0.50:0.95| area = large | maxDets = 100]</td><td>0.611</td><td>0.586</td><td>0.585</td><td>0.559</td><td>0.550</td></tr></tbody></table></li><li><p>ssd-mobilenetv1</p><table><thead><tr><th>COCOAPI</th><th>官方结果</th><th>CPU浮点精度</th><th>gnne浮点精度</th><th>uint8精度</th><th>int8精度</th></tr></thead><tbody><tr><td>Average Precision (AP) @ [IoU = 0.50:0.95| area = all | maxDets = 100]</td><td>0.184</td><td>0.184</td><td>0.184</td><td>0.183</td><td>0.183</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.50| area = all | maxDets = 100]</td><td>0.306</td><td>0.307</td><td>0.306</td><td>0.305</td><td>0.306</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.75| area = all | maxDets = 100]</td><td>0.191</td><td>0.192</td><td>0.190</td><td>0.189</td><td>0.190</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.50:0.95| area = small | maxDets = 100]</td><td>0.017</td><td>0.017</td><td>0.017</td><td>0.017</td><td>0.017</td></tr><tr><td>Average Precision (AP) @ [IoU= 0.50:0.95| area = medium | maxDets = 100]</td><td>0.157</td><td>0.157</td><td>0.157</td><td>0.156</td><td>0.155</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.50:0.95| area = large | maxDets = 100]</td><td>0.371</td><td>0.372</td><td>0.371</td><td>0.370</td><td>0.369</td></tr><tr><td>Average Recall (AR) @ [IoU= 0.50:0.95| area = all | maxDets = 1]</td><td>0.180</td><td>0.180</td><td>0.180</td><td>0.181</td><td>0.181</td></tr><tr><td>Average Recall (AR) @ [IoU= 0.50:0.95| area = all | maxDets = 10]</td><td>0.242</td><td>0.242</td><td>0.242</td><td>0.243</td><td>0.243</td></tr><tr><td>Average Recall (AR) @ [IoU = 0.50:0.95| area = all | maxDets = 100]</td><td>0.242</td><td>0.242</td><td>0.242</td><td>0.243</td><td>0.243</td></tr><tr><td>Average Recall (AR) @ [IoU = 0.50:0.95| area = small | maxDets = 100]</td><td>0.026</td><td>0.026</td><td>0.026</td><td>0.026</td><td>0.026</td></tr><tr><td>Average Recall (AR) @ [IoU= 0.50:0.95| area = medium | maxDets = 100]</td><td>0.206</td><td>0.206</td><td>0.206</td><td>0.206</td><td>0.205</td></tr><tr><td>Average Recall (AR) @ [IoU = 0.50:0.95| area = large | maxDets = 100]</td><td>0.489</td><td>0.491</td><td>0.490</td><td>0.490</td><td>0.491</td></tr></tbody></table></li><li><p>YOLOV5S</p><table><thead><tr><th>COCOAPI</th><th>官方结果</th><th>CPU浮点精度</th><th>gnne浮点精度</th><th>uint8精度</th><th>int8精度</th></tr></thead><tbody><tr><td>Average Precision (AP) @ [IoU = 0.50:0.95| area = all | maxDets = 100]</td><td>0.367</td><td>0.365</td><td>0.335</td><td>0.334</td><td>0.335</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.50| area = all | maxDets = 100]</td><td>0.555</td><td>0.552</td><td>0.518</td><td>0.518</td><td>0.518</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.75| area = all | maxDets = 100]</td><td>0.398</td><td>0.395</td><td>0.364</td><td>0.363</td><td>0.362</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.50:0.95| area = small | maxDets = 100]</td><td>0.223</td><td>0.220</td><td>0.199</td><td>0.199</td><td>0.197</td></tr><tr><td>Average Precision (AP) @ [IoU= 0.50:0.95| area = medium | maxDets = 100]</td><td>0.419</td><td>0.418</td><td>0.387</td><td>0.386</td><td>0.386</td></tr><tr><td>Average Precision (AP) @ [IoU = 0.50:0.95| area = large | maxDets = 100]</td><td>0.463</td><td>0.459</td><td>0.423</td><td>0.422</td><td>0.423</td></tr><tr><td>Average Recall (AR) @ [IoU= 0.50:0.95| area = all | maxDets = 1]</td><td>0.306</td><td>0.306</td><td>0.288</td><td>0.287</td><td>0.287</td></tr><tr><td>Average Recall (AR) @ [IoU= 0.50:0.95| area = all | maxDets = 10]</td><td>0.518</td><td>0.518</td><td>0.487</td><td>0.486</td><td>0.487</td></tr><tr><td>Average Recall (AR) @ [IoU = 0.50:0.95| area = all | maxDets = 100]</td><td>0.576</td><td>0.576</td><td>0.540</td><td>0.539</td><td>0.540</td></tr><tr><td>Average Recall (AR) @ [IoU = 0.50:0.95| area = small | maxDets = 100]</td><td>0.391</td><td>0.399</td><td>0.350</td><td>0.350</td><td>0.347</td></tr><tr><td>Average Recall (AR) @ [IoU= 0.50:0.95| area = medium | maxDets = 100]</td><td>0.641</td><td>0.640</td><td>0.606</td><td>0.605</td><td>0.607</td></tr><tr><td>Average Recall (AR) @ [IoU = 0.50:0.95| area = large | maxDets = 100]</td><td>0.716</td><td>0.710</td><td>0.680</td><td>0.683</td><td>0.685</td></tr></tbody></table></li></ol><h2 id="_8-faq" tabindex="-1"><a class="header-anchor" href="#_8-faq" aria-hidden="true">#</a> 8 FAQ</h2><p>1.安装wheel时报错: &quot;xxx.whl is not a supported wheel on this platform.&quot;**</p><p>Q: 安装nncase wheel包, 出现ERROR: nncase-1.0.0.20210830-cp37-cp37m-manylinux_2_24_x86_64.whl is not a supported wheel on this platform.</p><p>A: 升级 pip &gt;= 20.3</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> pip3 <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.<strong>CRB运行App推理程序时, 报错&quot;std::bad_alloc&quot;</strong></p><p>Q: CRB上运行App推理程序, 抛出&quot;std::bad_alloc&quot;异常</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./cpp.sh
<span class="token keyword">case</span> ./yolov3_bfloat16 build at Sep <span class="token number">16</span> <span class="token number">2021</span> <span class="token number">18</span>:12:03
terminate called after throwing an instance of <span class="token string">&#39;std::bad_alloc&#39;</span>
  what<span class="token punctuation">(</span><span class="token punctuation">)</span>:  std::bad_alloc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A: std::bad_alloc异常通常是因为内存分配失败导致的, 可做如下排查.</p><ul><li>检查生成的kmodel是否超过当前系统可用内存(如yolov3 bfloat16 kmodel大小为121MB, 当前linux可用内存只有70MB, 则会抛出该异常). 若超过, 可尝试使用训练后量化来减小kmodel大小.</li><li>检查App是否存在内存泄露</li></ul><p>3.<strong>运行App推理程序时[..t_runtime_tensor.cpp:310 (create)] data.size_bytes() == size = false (bool)</strong></p><p>Q: simulator运行App推理程序, 抛出&quot;[..t_runtime_tensor.cpp:310 (create)] data.size_bytes() == size = false (bool)&quot;异常</p><p>A: 检查设置的输入tensor信息, 重点是输入shape和每个元素占用的字节数(fp32/uint8)</p>`,488);function q(A,R){const a=o("ExternalLinkIcon");return i(),c("div",null,[l,n("ul",null,[n("li",null,[s("nncase wheel包在"),n("a",d,[s("nncase github"),t(a)]),s("发布, 支持Python 3.6/3.7/3.8/3.9/3.10, 用户可根据操作系统和Python选择相应版本下载 .")]),r]),n("p",null,[s("用户若没有Ubuntu环境, 可使用"),n("a",k,[s("nncase docker"),t(a)]),s("(Ubuntu 20.04 + Python 3.8)")]),m,n("ul",null,[n("li",null,[s("针对onnx模型, 建议先使用"),n("a",v,[s("ONNX Simplifier"),t(a)]),s("进行简化, 然后再使用nncase编译.")]),b]),_,n("ul",null,[n("li",null,[s("caffe wheel包从"),n("a",h,[s("kendryte caffe"),t(a)]),s("获取")]),g]),y,n("ul",null,[n("li",null,[s("针对onnx模型, 建议先使用"),n("a",f,[s("ONNX Simplifier"),t(a)]),s("进行简化, 然后再使用nncase编译.")]),x]),w])}const P=e(u,[["render",q],["__file","05-nncase_Developer_Guides.html.vue"]]);export{P as default};
