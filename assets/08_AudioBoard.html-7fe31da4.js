import{_ as n,o as s,c as a,e as t}from"./app-21fd3c9b.js";const e={},p=t(`<h1 id="alsa" tabindex="-1"><a class="header-anchor" href="#alsa" aria-hidden="true">#</a> ALSA</h1><h2 id="_8-1-音频相关概念" tabindex="-1"><a class="header-anchor" href="#_8-1-音频相关概念" aria-hidden="true">#</a> 8.1 音频相关概念</h2><p>​ 音频信号是一种连续变化的模拟信号，但计算机只能处理和记录二进制的数字信号，由自然音源得到的音频信号必须经过一定的变换，成为数字音频信号之后，才能送到计算机中作进一步的处理。</p><p>​ 数字音频系统通过将声波的波型转换成一系列二进制数据，来实现对原始声音的重现，实现这一步骤的设备常被称为（A/D）。A/D转换器以每秒钟上万次的速率对声波进行采样，每个采样点都记录下了原始模拟声波在某一时刻的状态，通常称之为样本（sample），而每一秒钟所采样的数目则称为采样频率，通过将一串连续的样本连接起来，就可以在计算机中描述一段声音了。对于采样过程中的每一个样本来说，数字音频系统会分配一定存储位来记录声波的振幅，一般称之为采样分辩率或者采样精度，采样精度越高，声音还原时就会越细腻。</p><p><img src="http://photos.100ask.net/NewHomeSite/AudioBoard_Image001.png" alt=""></p><p>​ 数字音频涉及到的概念非常多，对于在Linux下进行音频编程的程序员来说，最重要的是7406解声音数字化的两个关键步骤：采样和量化。</p><ul><li><p>采样就是每隔一定时间就读一次声音信号的幅度，从本质上讲，采样是时间上的数字化。</p></li><li><p>量化则是将采样得到的声音信号幅度转换为数字值，从本质上讲，量化则是幅度上的数字化。</p></li></ul><h3 id="_8-1-1-采样频率" tabindex="-1"><a class="header-anchor" href="#_8-1-1-采样频率" aria-hidden="true">#</a> 8.1.1 采样频率</h3><p>​ 采样频率是指将模拟声音波形进行数字化时，每秒钟抽取声波幅度样本的次数。采样频率的选择应该遵循奈奎斯特（Harry Nyquist）采样理论：如果对某一模拟信号进行采样，则采样后可还原的最高信号频率只有采样频率的一半，或者说只要采样频率高于输入信号最高频率的两倍，就能从采样信号系列重构原始信号。</p><p><img src="http://photos.100ask.net/NewHomeSite/AudioBoard_Image002.png" alt=""></p><p>​ 如上图所示 用40KHz的频率去采样20KHz的信号可以正确捕捉到原始信号。用30KHz的频率去采样20KHz的信号会出现混淆信号。</p><p>​ 一般重建音乐信号时采用的最低采样频率为44.1KHz。在许多高品质的系统中，采用的48KHz的采样频率。</p><table><thead><tr><th>系统</th><th>采样频率</th></tr></thead><tbody><tr><td>电话</td><td>8000Hz</td></tr><tr><td>CD</td><td>44100Hz</td></tr><tr><td>专业音频</td><td>48000Hz</td></tr><tr><td>DVD音频</td><td>96000Hz</td></tr></tbody></table><h3 id="_8-1-2-量化位数" tabindex="-1"><a class="header-anchor" href="#_8-1-2-量化位数" aria-hidden="true">#</a> 8.1.2 量化位数</h3><p>​ 量化位数是对模拟音频信号的幅度进行数字化，它决定了模拟信号数字化以后的动态范围，常用的有8位、12位和16位。量化位越高，信号的动态范围越大，数字化后的音频信号就越可能接近原始信号，但所需要的存贮空间也越大。</p><p>​ 音频应用中常用的数字表示方法为脉冲编码调制(Pulse-Code-Modulated，PCM)信号。在这种表示方法中，每个采样周期用一个数字电平对模拟信号的幅度进行编码。得到的数字波形是一组采样自输入模拟波形的近似值。由于所有A/D转换器的分辨率都是有限的，所以在数字音频系统中，A/D转换器带来的量化噪声是不可避免的。</p><p><img src="http://photos.100ask.net/NewHomeSite/AudioBoard_Image003.png" alt=""></p><h2 id="_8-2-alsa架构" tabindex="-1"><a class="header-anchor" href="#_8-2-alsa架构" aria-hidden="true">#</a> 8.2 ALSA架构</h2><p>​ ALSA全称是Advanced Linux Sound Architecture，中文音译是Linux高级声音体系。ALSA 是Linux内核2.6后续版本中支持音频系统的标准接口程序，由ALSA库、内核驱动和相关测 试开发工具组成，更好的管理Linux中音频系统。</p><p>​ 本小节将介绍ALSA的架构。</p><h3 id="_8-2-1-alsa架构介绍" tabindex="-1"><a class="header-anchor" href="#_8-2-1-alsa架构介绍" aria-hidden="true">#</a> 8.2.1 ALSA架构介绍</h3><p>​ ALSA是Linux系统中为声卡提供驱动的内核组件。它提供了专门的库函数来简化相应应用程序的编写。相较于OSS的编程接口,ALSA的函数库更加便于使用。</p><p>​ 对应用程序而言ALSA无疑是一个更佳的选择,因为它具有更加友好的编程接口,并且完全兼容于OSS。</p><p>​ ALSA系统包括7个子项目：</p><ul><li>驱动包alsa-driver</li><li>开发包alsa-libs</li><li>开发包插件alsa-libplugins</li><li>设置管理工具包alsa-utils</li><li>OSS接口兼容模拟层工具alsa-oss</li><li>特殊音频固件支持包alsa-finnware</li><li>其他声音相关处理小程序包alsa-tools</li></ul><p>ALSA声卡驱动与用户空间体系结构交互如下图所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/AudioBoard_Image004.png" alt=""></p><h2 id="_8-3-移植alsa库及工具" tabindex="-1"><a class="header-anchor" href="#_8-3-移植alsa库及工具" aria-hidden="true">#</a> 8.3 移植ALSA库及工具</h2><p>移植ALSA主要是移植alsa-Ub和alsa-utils。</p><ul><li><p><strong>alsa-lib</strong>：用户空间函数库, 封装驱动提供的抽象接口, 通过文件libasound.so提供API给应用程序使用。</p></li><li><p><strong>alsa-utils</strong>：实用工具包,通过调用alsa-lib实现播放音频(aplay)、录音(arecord) 等工具。</p></li></ul><p><img src="http://photos.100ask.net/NewHomeSite/AudioBoard_Image005.png" alt=""></p><p>​ ALSA Util是纯应用层的软件，相当于ALSA设备的测试程序，ALSA-Lib则是支持应用API的中间层程序，ALSA-Util中的应用程序中会调用到ALSA-Lib中的接口来操作到我们的音频编解码芯片的寄存器，而lib中接口就是依赖于最底层驱动代码，因此移植ALSA程序的顺序就是先后移植Driver,Lib,Util。</p><h3 id="_8-3-1-alsa库下载" tabindex="-1"><a class="header-anchor" href="#_8-3-1-alsa库下载" aria-hidden="true">#</a> 8.3.1 ALSA库下载</h3><p>​ ALSA首先需要在ALSA的官网上下载官网http://www.alsa-project.org下载alsa-lib和alsa-utils。</p><p><img src="http://photos.100ask.net/NewHomeSite/AudioBoard_Image006.png" alt=""></p><p>如上图所示我们下载的版本为：</p><ul><li>alsa-lib-1.2.2.tar.bz2</li><li>alsa-utils-1.2.2.tar.bz2</li></ul><h3 id="_8-3-2-alsa-lib编译" tabindex="-1"><a class="header-anchor" href="#_8-3-2-alsa-lib编译" aria-hidden="true">#</a> 8.3.2 ALSA Lib编译</h3><p>​ ALSA Lib移植不需要修改源码，只需要重新编译库代码以支持自己的平台。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tar <span class="token operator">-</span>xvf alsa<span class="token operator">-</span>lib<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.27</span><span class="token number">.2</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>bz2 
cd alsa<span class="token operator">-</span>lib<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.27</span><span class="token number">.2</span>  
CC<span class="token operator">=</span>arm<span class="token operator">-</span>none<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabi<span class="token operator">-</span>gcc
<span class="token punctuation">.</span><span class="token operator">/</span>configure <span class="token operator">--</span>host<span class="token operator">=</span>arm<span class="token operator">-</span>linux  <span class="token operator">--</span>prefix<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>m<span class="token operator">/</span><span class="token number">3</span>rd<span class="token operator">/</span>alsa<span class="token operator">/</span>install<span class="token operator">/</span>  
make  
make install 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在上述命令中./configure配置的几个重要的配置选项解释如下：</p><ul><li><p>--host指定编译器，这里指定为交叉编译器，运行本配置命令前务必保证编译器已经可以在Shell下可以直接执行了。</p></li><li><p>--prefix指定编译后文件的安装路径，这样安装命令就还会指定的这个目录中创建lib和include两个目录。</p></li></ul><h3 id="_8-3-3-alsa-util编译" tabindex="-1"><a class="header-anchor" href="#_8-3-3-alsa-util编译" aria-hidden="true">#</a> 8.3.3 ALSA Util编译</h3><p>​ ALSA Util可以生成用于播放，录制，配置音频的应用可执行文件，测试驱动代码时用处很大，编译过程如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tar <span class="token operator">-</span>xvf alsa<span class="token operator">-</span>utils<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.27</span><span class="token number">.2</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>bz2  
cd alsa<span class="token operator">-</span>utils<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.27</span><span class="token number">.2</span>  
CC<span class="token operator">=</span>arm<span class="token operator">-</span>none<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabi<span class="token operator">-</span>gcc 
<span class="token punctuation">.</span><span class="token operator">/</span>configure <span class="token operator">--</span>prefix<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>m<span class="token operator">/</span><span class="token number">3</span>rd<span class="token operator">/</span>alsa<span class="token operator">/</span>install<span class="token operator">/</span> <span class="token operator">--</span>host<span class="token operator">=</span>arm<span class="token operator">-</span>linux <span class="token operator">--</span>with<span class="token operator">-</span>alsa<span class="token operator">-</span>inc<span class="token operator">-</span>prefix<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>m<span class="token operator">/</span><span class="token number">3</span>rd<span class="token operator">/</span>alsa<span class="token operator">/</span>install<span class="token operator">/</span>include <span class="token operator">--</span>with<span class="token operator">-</span>alsa<span class="token operator">-</span>prefix<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>m<span class="token operator">/</span><span class="token number">3</span>rd<span class="token operator">/</span>alsa<span class="token operator">/</span>install<span class="token operator">/</span>lib <span class="token operator">--</span>disable<span class="token operator">-</span>alsamixer <span class="token operator">--</span>disable<span class="token operator">-</span>xmlto <span class="token operator">--</span>disable<span class="token operator">-</span>nls  
make  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-4-alsa库和工具移植入嵌入式平台" tabindex="-1"><a class="header-anchor" href="#_8-3-4-alsa库和工具移植入嵌入式平台" aria-hidden="true">#</a> 8.3.4 ALSA库和工具移植入嵌入式平台</h3><p>​ ALSA库和测试工具的移植就是将相应库文件和可执行文件放在目标板上，以下文件 必须被拷贝至对应位置 :</p><p>（1）ALSA Lib文件，放在/lib/中。</p><p>（2）配置文件放在/usr/local/share中，与编译时指定的目录相同。</p><p>（3）测试应用文件，ALSA Util能产生aplay、amixer、arecord，我们可以把这些可执行文件放在/usr/sbin中。</p><p>（4）内核目录中保证有/dev/snd/目录，这个目录下存放controlC0，pcmC0D0，/usr/sbintimer，timer这些设备文件，如果这些设备文件已经在/dev目录下，可手动拷贝到/snd目录中。</p><p>​ 在LINUX系统中，每个设备文件都是文件。音频设备也是一样，它的设备文件被放在/dev/snd目录下，我们来看下这些设备文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ls <span class="token operator">/</span>dev<span class="token operator">/</span>snd <span class="token operator">-</span>l
crw<span class="token operator">-</span>rw<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">1</span> root audio <span class="token number">116</span><span class="token punctuation">,</span>  <span class="token number">2</span> <span class="token number">5</span>月  <span class="token number">19</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">24</span> controlC0     用于声卡的
crw<span class="token operator">-</span>rw<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">1</span> root audio <span class="token number">116</span><span class="token punctuation">,</span>  <span class="token number">4</span> <span class="token number">6</span>月   <span class="token number">6</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">31</span> pcmC0D0c
crw<span class="token operator">-</span>rw<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">1</span> root audio <span class="token number">116</span><span class="token punctuation">,</span>  <span class="token number">3</span> <span class="token number">6</span>月  <span class="token number">11</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">53</span> pcmC0D0p
crw<span class="token operator">-</span>rw<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">1</span> root audio <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">33</span> <span class="token number">5</span>月  <span class="token number">19</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">24</span> timer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）controlC0：音频控制设备文件，例如通道选择，混音，麦克风的控制等；</p><p>（2）pcmC0D0c：声卡0设备0的录音设备，c表示capter；</p><p>（3）pcmC0D0p：声卡0设备0的播音设备，p表示play；</p><p>（4）timer：定时器设置。</p><h2 id="_8-4-alsa的调试" tabindex="-1"><a class="header-anchor" href="#_8-4-alsa的调试" aria-hidden="true">#</a> 8.4 ALSA的调试</h2><p>​ 本小节将着重讲解tinyalsa工具使用，tinyalsa 是 alsa-lib 的一个简化版。它提供了 pcm 和 control 的基本接口；没有太多太复杂的操作、功能。可以按需使用接口。 tinyalsa-utils 是基于 tinyalsa 的一些工具，下面对几个常用的工具作介绍。</p><h3 id="_8-4-1-amixer" tabindex="-1"><a class="header-anchor" href="#_8-4-1-amixer" aria-hidden="true">#</a> 8.4.1 amixer</h3><p>​ 与 amixer 作用类似，用于操作 mixer control。</p><p>使用方法：</p><ul><li>常用选项</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-D,--device</td><td>指定声卡设备, 默认使用card0</td></tr></tbody></table><ul><li>常用命令</li></ul><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>controls</td><td>列出指定声卡的所有控件</td></tr><tr><td>contents</td><td>列出指定声卡的所有控件的具体信息</td></tr><tr><td>get</td><td>获取指定控件的信息</td></tr><tr><td>set</td><td>设定指定控件的值</td></tr></tbody></table><p>举例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>获取audiocodec声卡的所有控件名
amixer <span class="token operator">-</span>Dhw<span class="token operator">:</span>audiocodec controls
获取当前硬件音量
amixer <span class="token operator">-</span>Dhw<span class="token operator">:</span>audiocodec cget name<span class="token operator">=</span><span class="token char">&#39;LINEOUT volume&#39;</span>
设置当前硬件音量
amixer <span class="token operator">-</span>Dhw<span class="token operator">:</span>audiocodec cget name<span class="token operator">=</span><span class="token char">&#39;LINEOUT volume&#39;</span> <span class="token number">25</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-4-2-aplay" tabindex="-1"><a class="header-anchor" href="#_8-4-2-aplay" aria-hidden="true">#</a> 8.4.2 aplay</h3><p>​ aplay 是命令行的 ALSA 声卡驱动的播放工具，用于播放功能。 使用方法：</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-D,--device</td><td>指定声卡设备, 默认使用 default</td></tr><tr><td>-l,--list-devices</td><td>列出当前所有声卡</td></tr><tr><td>-t,--file-type</td><td>指定播放文件的格式, 如 voc,wav,raw, 不指定的情况下会去读取文件头部作识别</td></tr><tr><td>-c,--channels</td><td>指定通道数</td></tr><tr><td>-f,--format</td><td>指定采样格式</td></tr><tr><td>-r,--rate</td><td>采样率</td></tr><tr><td>-d,--duration</td><td>指定播放的时间</td></tr><tr><td>--period-size</td><td>指定 period size</td></tr><tr><td>--buffer-size</td><td>指定 buffer size</td></tr></tbody></table><p>举例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>aplay <span class="token operator">-</span>Dhw<span class="token operator">:</span>audiocodec <span class="token operator">/</span>mnt<span class="token operator">/</span>UDISK<span class="token operator">/</span>test<span class="token punctuation">.</span>wav
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_8-4-3-arecord" tabindex="-1"><a class="header-anchor" href="#_8-4-3-arecord" aria-hidden="true">#</a> 8.4.3 arecord</h3><p>​ arecord 是命令行的 ALSA 声卡驱动的录音工具，用于录音功能。 使用方法：</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-D,--device</td><td>指定声卡设备, 默认使用 default</td></tr><tr><td>-l,--list-devices</td><td>列出当前所有声卡</td></tr><tr><td>-t,--file-type</td><td>指定播放文件的格式, 如 voc,wav,raw, 不指定的情况下会去读取文件头部作识别</td></tr><tr><td>-c,--channels</td><td>指定通道数</td></tr><tr><td>-f,--format</td><td>指定采样格式</td></tr><tr><td>-r,--rate</td><td>采样率</td></tr><tr><td>-d,--duration</td><td>指定播放的时间</td></tr><tr><td>--period-size</td><td>指定 period size</td></tr><tr><td>--buffer-size</td><td>指定 buffer size</td></tr></tbody></table><p>举例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>录制<span class="token number">5</span>s<span class="token punctuation">,</span>通道数为<span class="token number">2</span><span class="token punctuation">,</span> 采样率为<span class="token number">16000</span><span class="token punctuation">,</span> 采样精度为<span class="token number">16</span>bit<span class="token punctuation">,</span> 保存为wav文件
arecord <span class="token operator">-</span>Dhw<span class="token operator">:</span>audiocodec <span class="token operator">-</span>f S16_LE <span class="token operator">-</span>r <span class="token number">16000</span> <span class="token operator">-</span>c <span class="token number">2</span> <span class="token operator">-</span>d <span class="token number">5</span> <span class="token operator">/</span>mnt<span class="token operator">/</span>UDISK<span class="token operator">/</span>test<span class="token punctuation">.</span>wav
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-5-常用接口说明" tabindex="-1"><a class="header-anchor" href="#_8-5-常用接口说明" aria-hidden="true">#</a> 8.5 常用接口说明</h2><p>​ 从代码角度体现了alsa-lib和alsa-driver及hardwared的交互关系。用户层的alsa-lib通过操作alsa-driver创建的设备文件/dev/snd/pcmC0D0p等对内核层进行访问。内核层的alsa-drivier驱动再经由sound core对硬件声卡芯片进行访问。</p><p><img src="http://photos.100ask.net/NewHomeSite/AudioBoard_Image007.png" alt=""></p><h3 id="_8-5-1-pcm接口" tabindex="-1"><a class="header-anchor" href="#_8-5-1-pcm接口" aria-hidden="true">#</a> 8.5.1 PCM接口</h3><p>​ 为了方便操作访问， alsa-lib 中封装了相关接口, 通过 pcmCXDXp/pcmCXDXc 节点 (/dev/snd/pcmCXDXx) 去实现播放、录音功能。</p><p>​ 主要涉及到的接口：</p><table><thead><tr><th>函数名</th><th>解释</th></tr></thead><tbody><tr><td>snd_pcm_open</td><td></td></tr><tr><td>snd_pcm_info</td><td></td></tr><tr><td>snd_pcm_hw_params_any</td><td></td></tr><tr><td>snd_pcm_hw_params_set_access</td><td></td></tr><tr><td>snd_pcm_hw_params_set_format</td><td></td></tr><tr><td>snd_pcm_hw_params_set_channels</td><td></td></tr><tr><td>snd_pcm_hw_params_set_rate_near</td><td></td></tr><tr><td>snd_pcm_hw_params_set_buffer_size_near</td><td></td></tr><tr><td>snd_pcm_hw_params</td><td></td></tr><tr><td>snd_pcm_sw_params_current</td><td></td></tr><tr><td>snd_pcm_sw_params</td><td></td></tr><tr><td>snd_pcm_readi</td><td></td></tr><tr><td>snd_pcm_writei</td><td></td></tr><tr><td>snd_pcm_close</td><td></td></tr></tbody></table><p>​ 详细 pcm 接口说明请查阅：</p><p>https://www.alsa-project.org/alsa-doc/alsa-lib/pcm.html https://www.alsa-project.org/alsa-doc/alsa-lib/group___p_c_m.html</p><h2 id="_8-6-基于alsa的音量控制程序设计" tabindex="-1"><a class="header-anchor" href="#_8-6-基于alsa的音量控制程序设计" aria-hidden="true">#</a> 8.6 基于ALSA的音量控制程序设计</h2><h3 id="_8-6-1-程序设计" tabindex="-1"><a class="header-anchor" href="#_8-6-1-程序设计" aria-hidden="true">#</a> 8.6.1 程序设计</h3><ul><li>文件列表：</li></ul><table><thead><tr><th>序号</th><th>文件名</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>AlsaVolume.h</td><td>音量控制头文件</td></tr><tr><td>2</td><td>AlsaVolume.cpp</td><td>音量控制程序</td></tr></tbody></table><ul><li>成员函数设计：</li></ul><table><thead><tr><th>序号</th><th>函数名</th><th>参数</th><th>参数描述</th><th>函数描述</th></tr></thead><tbody><tr><td>1</td><td>setMasterVolume</td><td>long volume</td><td>音量值</td><td>设置音量</td></tr><tr><td>2</td><td>getCurrentVolume</td><td>无</td><td>无</td><td>获取当前音量</td></tr><tr><td>3</td><td>increaseVolume</td><td>无</td><td>无</td><td>单步减小音量接口函数</td></tr><tr><td>4</td><td>decreaseVolume</td><td>无</td><td>无</td><td>单步增加音量接口函数</td></tr></tbody></table><ul><li>成员变量设计：</li></ul><table><thead><tr><th>序号</th><th>成员变量名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>_VOLUMECHANGE</td><td>const float</td><td>音量调节步进大小</td></tr><tr><td>2</td><td>handle</td><td>snd_mixer_t*</td><td>Mixer handle</td></tr><tr><td>3</td><td>element_handle</td><td>snd_mixer_elem_t*</td><td>Mixer element handle</td></tr><tr><td>4</td><td>minVolume</td><td>long</td><td>最小音量</td></tr><tr><td>5</td><td>maxVolume</td><td>long</td><td>最大音量</td></tr></tbody></table><h3 id="_8-6-2-alsavolume-类的定义" tabindex="-1"><a class="header-anchor" href="#_8-6-2-alsavolume-类的定义" aria-hidden="true">#</a> 8.6.2 AlsaVolume 类的定义</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;alsa/asoundlib.h&gt;</span></span>
namespace rv1108_audio<span class="token punctuation">{</span>
class AlsaVolume
<span class="token punctuation">{</span>
  public<span class="token operator">:</span>
    <span class="token function">AlsaVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">AlsaVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">setMasterVolume</span><span class="token punctuation">(</span><span class="token keyword">long</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">long</span> <span class="token function">getCurrentVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token function">increaseVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token function">decreaseVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  protected<span class="token operator">:</span>
    <span class="token keyword">const</span> <span class="token keyword">float</span> _VOLUMECHANGE <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> 
  private<span class="token operator">:</span>
    <span class="token class-name">snd_mixer_t</span><span class="token operator">*</span> handle <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
    <span class="token class-name">snd_mixer_elem_t</span><span class="token operator">*</span> element_handle <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
    <span class="token keyword">long</span> minVolume<span class="token punctuation">,</span>maxVolume<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token comment">// namespace rv1108_camera</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-6-3-alsavolume类中成员函数的实现" tabindex="-1"><a class="header-anchor" href="#_8-6-3-alsavolume类中成员函数的实现" aria-hidden="true">#</a> 8.6.3 AlsaVolume类中成员函数的实现</h3><ul><li>AlsaVolume类的构造函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>AlsaVolume<span class="token operator">::</span><span class="token function">AlsaVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">snd_mixer_selem_id_t</span><span class="token operator">*</span> sid <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> card <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> selem_name <span class="token operator">=</span> <span class="token string">&quot;Playback&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//1. 打开混音设备</span>
    <span class="token keyword">auto</span> res <span class="token operator">=</span> <span class="token function">snd_mixer_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>handle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2. attach HCTL to open mixer</span>
    res <span class="token operator">=</span> <span class="token function">snd_mixer_attach</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> card<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//3. Register mixer simple element class.</span>
<span class="token function">snd_mixer_selem_register</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//4. 取得第一個 element，也就是 Master</span>
<span class="token function">snd_mixer_load</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//5. allocate an invalid snd_mixer_selem_id_t using standard alloca</span>
<span class="token function">snd_mixer_selem_id_alloca</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//6. 设置元素ID的位置</span>
<span class="token function">snd_mixer_selem_id_set_index</span><span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//7. 设置元素ID的名字</span>
    <span class="token function">snd_mixer_selem_id_set_name</span><span class="token punctuation">(</span>sid<span class="token punctuation">,</span> selem_name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//8. 查找元素</span>
    element_handle <span class="token operator">=</span> <span class="token function">snd_mixer_find_selem</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> sid<span class="token punctuation">)</span><span class="token punctuation">;</span>

    res <span class="token operator">=</span> <span class="token function">snd_mixer_selem_get_playback_volume_range</span><span class="token punctuation">(</span>element_handle<span class="token punctuation">,</span> 
                                                                           <span class="token operator">&amp;</span>minVolume<span class="token punctuation">,</span> 
                                                                           <span class="token operator">&amp;</span>maxVolume<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置音量函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> AlsaVolume<span class="token operator">::</span><span class="token function">setMasterVolume</span><span class="token punctuation">(</span><span class="token keyword">long</span> volume<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> alsaVolume <span class="token operator">=</span> volume <span class="token operator">*</span> <span class="token punctuation">(</span>maxVolume <span class="token operator">-</span> minVolume<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span> <span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">snd_mixer_selem_set_playback_volume_all</span><span class="token punctuation">(</span>element_handle<span class="token punctuation">,</span> alsaVolume<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span>
        <span class="token function">snd_mixer_close</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取当前音量函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> AlsaVolume<span class="token operator">::</span><span class="token function">getCurrentVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> alsaVolume<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">snd_mixer_selem_get_playback_volume</span><span class="token punctuation">(</span>element_handle<span class="token punctuation">,</span> SND_MIXER_SCHN_MONO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>alsaVolume<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span>
        <span class="token function">snd_mixer_close</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>alsaVolume<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>maxVolume <span class="token operator">-</span> minVolume<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>音量步进减少函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> AlsaVolume<span class="token operator">::</span><span class="token function">decreaseVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> newVolume <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getCurrentVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">+</span> _VOLUMECHANGE<span class="token punctuation">)</span> <span class="token comment">// check that we won&#39;t go below minimum volume</span>
        newVolume <span class="token operator">=</span> <span class="token function">getCurrentVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> _VOLUMECHANGE<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        newVolume <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">setMasterVolume</span><span class="token punctuation">(</span>newVolume<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newVolume<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>音量步进增加函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> AlsaVolume<span class="token operator">::</span><span class="token function">increaseVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> newVolume <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getCurrentVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token operator">-</span> _VOLUMECHANGE<span class="token punctuation">)</span> <span class="token comment">// check that we don&#39;t go above the max volume</span>
        newVolume <span class="token operator">=</span> <span class="token function">getCurrentVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> _VOLUMECHANGE<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        newVolume <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token function">setMasterVolume</span><span class="token punctuation">(</span>newVolume<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newVolume<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-7-alsa基类的设计" tabindex="-1"><a class="header-anchor" href="#_8-7-alsa基类的设计" aria-hidden="true">#</a> 8.7 ALSA基类的设计</h2><h3 id="_8-7-1-程序设计" tabindex="-1"><a class="header-anchor" href="#_8-7-1-程序设计" aria-hidden="true">#</a> 8.7.1 程序设计</h3><ul><li>文件列表：</li></ul><table><thead><tr><th>序号</th><th>文件名</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>AlsaBase.h</td><td>ALSA基类头文件</td></tr><tr><td>2</td><td>AlsaBase.cpp</td><td>基类的实现程序</td></tr></tbody></table><ul><li>public成员变量：</li></ul><table><thead><tr><th>序号</th><th>成员变量名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>rate</td><td>int</td><td>码率</td></tr><tr><td>2</td><td>channels</td><td>int</td><td>通道数</td></tr><tr><td>3</td><td>bits_per_frame</td><td>mutable int</td><td>每帧数据大小</td></tr><tr><td>4</td><td>default_output_buffer_size</td><td>int</td><td>默认输出缓存大小</td></tr><tr><td>5</td><td>frames</td><td>snd_pcm_uframes_t</td><td>帧数</td></tr><tr><td>6</td><td>buffer_size</td><td>snd_pcm_uframes_t</td><td>缓存大小</td></tr><tr><td>7</td><td>buffer_frames</td><td>snd_pcm_uframes_t</td><td>缓存大小</td></tr><tr><td>8</td><td>period_size</td><td>snd_pcm_uframes_t</td><td>时间段大小</td></tr><tr><td>9</td><td>period_frames</td><td>snd_pcm_uframes_t</td><td></td></tr><tr><td>10</td><td>period_time</td><td>unsigned int</td><td></td></tr><tr><td>11</td><td>buffer_time</td><td>unsigned int</td><td></td></tr><tr><td>12</td><td>bits_per_sample</td><td>size_t</td><td></td></tr></tbody></table><ul><li>protected成员变量：</li></ul><table><thead><tr><th>序号</th><th>成员变量名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>device</td><td>const char *</td><td></td></tr><tr><td>2</td><td>handle</td><td>snd_pcm_t *</td><td></td></tr><tr><td>3</td><td>params</td><td>snd_pcm_hw_params_t *</td><td></td></tr><tr><td>4</td><td>format</td><td>snd_pcm_format_t</td><td></td></tr><tr><td>5</td><td>access_type</td><td>snd_pcm_access_t</td><td></td></tr><tr><td>6</td><td>DEVICE_OPENED</td><td>bool</td><td></td></tr><tr><td>7</td><td>PARAMS_SETED</td><td>bool</td><td></td></tr></tbody></table><h3 id="_8-7-2-alsabase类中成员函数的实现" tabindex="-1"><a class="header-anchor" href="#_8-7-2-alsabase类中成员函数的实现" aria-hidden="true">#</a> 8.7.2 AlsaBase类中成员函数的实现</h3><ul><li>AlsaBase类的构造函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>AlsaBase<span class="token operator">::</span><span class="token function">AlsaBase</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
device <span class="token operator">=</span> dev<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rate <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span>
        channels <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        format <span class="token operator">=</span> SND_PCM_FORMAT_S16_LE<span class="token punctuation">;</span>
        access_type <span class="token operator">=</span> SND_PCM_ACCESS_RW_INTERLEAVED<span class="token punctuation">;</span>
        frames <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">;</span>

        DEVICE_OPENED <span class="token operator">=</span> false<span class="token punctuation">;</span>
        PARAMS_SETED <span class="token operator">=</span> false<span class="token punctuation">;</span>

        bits_per_sample <span class="token operator">=</span> <span class="token function">snd_pcm_format_physical_width</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bits_per_frame <span class="token operator">=</span> <span class="token punctuation">(</span>bits_per_sample <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> channels<span class="token punctuation">;</span>
        
        default_output_buffer_size <span class="token operator">=</span> frames <span class="token operator">*</span> bits_per_frame <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// in byte</span>

        buffer_frames <span class="token operator">=</span> frames <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>
        buffer_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        
        period_frames <span class="token operator">=</span> buffer_frames <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
        period_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

AlsaBase<span class="token operator">::</span><span class="token operator">~</span><span class="token function">AlsaBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEVICE_OPENED<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">snd_pcm_close</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> AlsaBase<span class="token operator">::</span><span class="token function">set_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>DEVICE_OPENED<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 分配硬件参数空间</span>
    <span class="token function">snd_pcm_hw_params_alloca</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//1、以默认值填充硬件参数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params_any</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//2、 Restrict a configuration space to contain only real hardware rates.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params_set_rate_resample</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//3、设置存取方式</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params_set_access</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> params<span class="token punctuation">,</span> access_type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//4、设置格式，S16_LE等</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params_set_format</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> params<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//5 设置通道</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params_set_channels</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> params<span class="token punctuation">,</span> channels<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//6 设置码率</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> rrate<span class="token punctuation">;</span>
    rrate <span class="token operator">=</span>rate<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params_set_rate_near</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rrate<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> 	   <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//7</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer_time <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> buffer_frames <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params_get_buffer_time_max</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buffer_time<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>err <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer_time <span class="token operator">&gt;</span> <span class="token number">500000</span><span class="token punctuation">)</span>
            buffer_time <span class="token operator">=</span> <span class="token number">500000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//8</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>period_time <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> period_frames <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer_time <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        period_time <span class="token operator">=</span> buffer_time <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        period_frames <span class="token operator">=</span> buffer_frames <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//9</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>period_time <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params_set_period_time_near</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span>
                                                     params<span class="token punctuation">,</span>
                                                     <span class="token operator">&amp;</span>period_time<span class="token punctuation">,</span>
                                                     <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>                                                 
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params_set_period_size_near</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span>
                                                     params<span class="token punctuation">,</span>
                                                     <span class="token operator">&amp;</span>period_frames<span class="token punctuation">,</span>
                                                     <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>                                                 
    <span class="token function">assert</span><span class="token punctuation">(</span>err <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//10</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer_time <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params_set_buffer_time_near</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> params<span class="token punctuation">,</span>
                                                     <span class="token operator">&amp;</span>buffer_time<span class="token punctuation">,</span>
                                                     <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params_set_buffer_size_near</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> params<span class="token punctuation">,</span>
                                                     <span class="token operator">&amp;</span>buffer_frames<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>err <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将参数写入设备</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">snd_pcm_hw_params</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        PARAMS_SETED <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">snd_pcm_uframes_t</span> t_buffer_frames<span class="token punctuation">;</span>
    <span class="token function">snd_pcm_hw_params_get_buffer_size</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t_buffer_frames<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buffer_frames <span class="token operator">=</span> t_buffer_frames<span class="token punctuation">;</span>

    <span class="token class-name">snd_pcm_uframes_t</span> t_period_frames<span class="token punctuation">;</span>
    <span class="token function">snd_pcm_hw_params_get_period_size</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t_period_frames<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    period_frames <span class="token operator">=</span> t_period_frames<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-8-基于alsa音频的播放" tabindex="-1"><a class="header-anchor" href="#_8-8-基于alsa音频的播放" aria-hidden="true">#</a> 8.8 基于ALSA音频的播放</h2><h3 id="_8-8-1-程序设计" tabindex="-1"><a class="header-anchor" href="#_8-8-1-程序设计" aria-hidden="true">#</a> 8.8.1 程序设计</h3><ul><li>文件列表</li></ul><table><thead><tr><th>序号</th><th>文件名</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>AlsaPlayback.h</td><td>音频播放控制头文件</td></tr><tr><td>2</td><td>AlsaPlayback.cpp</td><td>音频播放程序</td></tr></tbody></table><ul><li>成员函数设计</li></ul><table><thead><tr><th>序号</th><th>函数名</th><th>参数</th><th>参数描述</th><th>函数描述</th></tr></thead><tbody><tr><td>1</td><td>playback</td><td>const char *input_buffer <br> const long input_buffer_size</td><td></td><td>播放音频</td></tr></tbody></table><h3 id="_8-1-2-alsaplay类的定义" tabindex="-1"><a class="header-anchor" href="#_8-1-2-alsaplay类的定义" aria-hidden="true">#</a> 8.1.2 AlsaPlay类的定义</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;AlsaBase.h&quot;</span></span>
namespace rv1108_audio<span class="token punctuation">{</span>
    
class AlsaPlayback <span class="token operator">:</span> public AlsaBase
<span class="token punctuation">{</span>
    public<span class="token operator">:</span>
    <span class="token function">AlsaPlayback</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">~</span><span class="token function">AlsaPlayback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">open_device</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">playback</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input_buffer<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">long</span> input_buffer_size<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    private<span class="token operator">:</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-1-3-alsaplayback类中成员函数的实现" tabindex="-1"><a class="header-anchor" href="#_8-1-3-alsaplayback类中成员函数的实现" aria-hidden="true">#</a> 8.1.3 AlsaPlayback类中成员函数的实现</h3><ul><li>AlsaPlayback类的构造函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>AlsaPlayback<span class="token operator">::</span><span class="token function">AlsaPlayback</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>dev<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">AlsaBase</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>DEVICE_OPENED<span class="token punctuation">)</span>
	<span class="token function">open_device</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> AlsaPlayback<span class="token operator">::</span><span class="token function">open_device</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">snd_pcm_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>handle<span class="token punctuation">,</span>
                        device<span class="token punctuation">,</span>
                        SND_PCM_STREAM_PLAYBACK<span class="token punctuation">,</span>
                        <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            DEVICE_OPENED <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            DEVICE_OPENED <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>playback函数的实现</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> AlsaPlayback<span class="token operator">::</span><span class="token function">playback</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>_input_buffer<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">long</span> input_buffer_size<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>input_buffer <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>_input_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> r <span class="token operator">=</span> input_buffer_size <span class="token operator">/</span> bits_per_frame <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>
        AUDIO_DEV_LOCK<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                <span class="token function">snd_pcm_wait</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">do</span>
                <span class="token punctuation">{</span>
                        res <span class="token operator">=</span> <span class="token function">snd_pcm_writei</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> input_buffer<span class="token punctuation">,</span> frames<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token operator">-</span>EPIPE<span class="token punctuation">)</span><span class="token punctuation">{</span>
                                AUDIO_DEV_UNLOCK<span class="token punctuation">;</span>
                                <span class="token function">snd_pcm_prepare</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                r <span class="token operator">-=</span> err<span class="token punctuation">;</span>
                input_buffer <span class="token operator">+=</span> res <span class="token operator">*</span> bits_per_frame <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-9-基于alsa音频的录制" tabindex="-1"><a class="header-anchor" href="#_8-9-基于alsa音频的录制" aria-hidden="true">#</a> 8.9 基于ALSA音频的录制</h2><h3 id="_8-9-1-程序设计" tabindex="-1"><a class="header-anchor" href="#_8-9-1-程序设计" aria-hidden="true">#</a> 8.9.1 程序设计</h3><ul><li>文件列表</li></ul><table><thead><tr><th>序号</th><th>文件名</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>AlsaCapture.h</td><td>音频录制头文件</td></tr><tr><td>2</td><td>AlsaCapture.cpp</td><td>音频录制程序</td></tr></tbody></table><ul><li>成员函数设计</li></ul><table><thead><tr><th>序号</th><th>函数名</th><th>参数</th><th>参数描述</th><th>函数描述</th></tr></thead><tbody><tr><td>1</td><td>capture</td><td>无</td><td></td><td>录制音频</td></tr></tbody></table><ul><li>成员变量设计</li></ul><table><thead><tr><th>序号</th><th>成员变量名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>_VOLUMECHANGE</td><td>const float</td><td>音量调节步进大小</td></tr><tr><td>2</td><td>handle</td><td>snd_mixer_t*</td><td>Mixer handle</td></tr><tr><td>3</td><td>element_handle</td><td>snd_mixer_elem_t*</td><td>Mixer element handle</td></tr><tr><td>4</td><td>minVolume</td><td>long</td><td>最小音量</td></tr><tr><td>5</td><td>maxVolume</td><td>long</td><td>最大音量</td></tr></tbody></table><h3 id="_8-9-2-alsaplay类的定义" tabindex="-1"><a class="header-anchor" href="#_8-9-2-alsaplay类的定义" aria-hidden="true">#</a> 8.9.2 AlsaPlay类的定义</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;AlsaBase.h&quot;</span></span>
namespace rv1108_audio<span class="token punctuation">{</span>

class AlsaCapture <span class="token operator">:</span> public AlsaBase
<span class="token punctuation">{</span>
  public<span class="token operator">:</span>
    <span class="token comment">// 输出数据缓存</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>output_buffer<span class="token punctuation">;</span>
    <span class="token comment">// 输出缓存大小</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> output_buffer_size<span class="token punctuation">;</span>
    <span class="token comment">// int frames_to_read;</span>
    <span class="token comment">// 用于返回已读的帧数</span>
    <span class="token keyword">int</span> frames_readed<span class="token punctuation">;</span>

    <span class="token function">AlsaCapture</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">AlsaCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">open_device</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  private<span class="token operator">:</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-9-3-alsacapture类中成员函数的实现" tabindex="-1"><a class="header-anchor" href="#_8-9-3-alsacapture类中成员函数的实现" aria-hidden="true">#</a> 8.9.3 AlsaCapture类中成员函数的实现</h3><ul><li>AlsaCapture类的构造函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>AlsaCapture<span class="token operator">::</span><span class="token function">AlsaCapture</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>dev<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">AlsaBase</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>DEVICE_OPENED<span class="token punctuation">)</span>
        <span class="token function">open_device</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>PARAMS_SETED<span class="token punctuation">)</span>
        <span class="token function">set_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    output_buffer_size <span class="token operator">=</span> default_output_buffer_size<span class="token punctuation">;</span>
    output_buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>output_buffer_size<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> AlsaCapture<span class="token operator">::</span><span class="token function">open_device</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">snd_pcm_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>handle<span class="token punctuation">,</span>
                            device<span class="token punctuation">,</span>
                            SND_PCM_STREAM_CAPTURE<span class="token punctuation">,</span>
                            <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        DEVICE_OPENED <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        DEVICE_OPENED <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AlsaCapture类的构造函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> AlsaCapture<span class="token operator">::</span><span class="token function">capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> err<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>frames_readed <span class="token operator">=</span> <span class="token function">snd_pcm_readi</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> output_buffer<span class="token punctuation">,</span> frames<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Overrun happened</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>frames_readed <span class="token operator">==</span> <span class="token operator">-</span>EPIPE<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">snd_pcm_prepare</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> frames_readed<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,149),o=[p];function l(c,i){return s(),a("div",null,o)}const u=n(e,[["render",l],["__file","08_AudioBoard.html.vue"]]);export{u as default};
