import{_ as t,r as o,o as c,c as l,d as a,w as e,e as p,a as n}from"./app-21fd3c9b.js";const i={},u=p('<h1 id="_6-网络编程" tabindex="-1"><a class="header-anchor" href="#_6-网络编程" aria-hidden="true">#</a> <strong>6 网络编程</strong></h1><h2 id="_6-1-网络编程简介" tabindex="-1"><a class="header-anchor" href="#_6-1-网络编程简介" aria-hidden="true">#</a> <strong>6.1</strong> <strong>网络编程简介</strong></h2><p>​ 要编写通过计算机网络通信的程序，首先要确定这些程序同通信的协议（protocol），在设计一个协议的细节之前，首先要分清程序是由哪个程序发起以及响应何时产生。</p><p>​ 举例来说，一般认为WEB服务器程序是一个长时间运行的程序（守护进程deamon），它只在响应来自网络的请求时才发送网络消息。协议的另一端是web客户程序，如某种浏览器，与服务器进程的通信总是由客户进程发起。大多数网络应用就是按照划分为客户（clinet）和服务器（server）来组织的。</p><h3 id="_6-1-1-五层因特网协议栈" tabindex="-1"><a class="header-anchor" href="#_6-1-1-五层因特网协议栈" aria-hidden="true">#</a> <strong>6.1.1</strong> <strong>五层因特网协议栈</strong></h3><p>​ 为了给网络协议的设计提供一个结构，网络设计者以分层（layer）的方式组织协议以及实现这些协议的网络硬件和软件。</p><p>分层提供了一种结构化方式来讨论系统组件。模块化使更新系统组件更为容易。</p><p>协议栈是各层所有协议的总和。</p><p><img src="http://photos.100ask.net/NewHomeSite/NetworkProgram_Image001.png" alt="NetworkProgram_Image001"></p>',9),r=n("p",null,"五层因特网协议栈",-1),k=p('<p>应用层：应用层是网络应用程序及它们的应用层协议存留的地方。</p><p>运输层：因特网的运输层在应用程序端点之间传从应用层报文。</p><p>网络层：因特网呃网络层负责将称为数据包（datagram）的网络层分组从一台主机移动到另一台主机。</p><p>链路层：因特网的网络层通过源和目的地之间的一系列路由器路由数据报。</p><p>物理层：虽然链路层的任务是将整个帧从一个网络元素移动到临近的网络元素，而物理层的任务是将该帧的一个一个比特从一个节点移动到下一个节点。</p><h3 id="_6-1-2-传输层和应用层的常见协议" tabindex="-1"><a class="header-anchor" href="#_6-1-2-传输层和应用层的常见协议" aria-hidden="true">#</a> 6.1.2 传输层和应用层的常见协议</h3><p>​ 我们重点介绍和应用层编程关系密切的应用层和运输层。</p><p>​ 应用层：</p><p>​ 因特网的应用层包含很多协议，例如HTTP，SMTP，和 FTP。我们看到的某些网络功能，比如将www.baidu.com这样对人友好的端系统名字转换为32比特网络地址，也是借助于特定的应用层协议即域名系统（DNS）完成的。</p><p>​ 应用层的协议分布在多个端系统上，一个端系统中的应用程序使用协议与另一个端系统中的应用程序交换信息分组。</p><p>​ 运输层：</p><p>​ 在英特网中有两个运输协议，即TCP和UDP，利用其中的任何一个都能运输应用层报文。我们写应用程序的时候具体选择哪个运输层协议应该根据实际情况来确定（后面会具体讲解）。</p><h2 id="_6-2-网络编程之tcp-udp比较" tabindex="-1"><a class="header-anchor" href="#_6-2-网络编程之tcp-udp比较" aria-hidden="true">#</a> <strong>6.2</strong> <strong>网络编程之TCP/UDP比较</strong></h2><h3 id="_6-2-1-tcp和udp-原理上的区别" tabindex="-1"><a class="header-anchor" href="#_6-2-1-tcp和udp-原理上的区别" aria-hidden="true">#</a> 6.2.1 TCP和UDP 原理上的区别</h3><p>​ TCP向它的应用程序提供了面向连接的服务。这种服务包括了应用层报文向目的地的确保传递和流量控制（即发送方/接收方速率匹配）。这种服务包括了应用层报文划分为短报文，并提供拥塞控制机制，因此当网络拥塞时源抑制其传输速率。</p><p>​ UDP协议向它的应用程序提供无连接服务。这是一种不提供不必要服务的服务，没有可靠性，没有流量控制，也没有拥塞控制。</p><h3 id="_6-2-2-为何存在udp协议" tabindex="-1"><a class="header-anchor" href="#_6-2-2-为何存在udp协议" aria-hidden="true">#</a> 6.2.2 为何存在UDP协议</h3><p>​ 既然TCP提供了可靠数据传输服务，而UDP不能提供，那么TCP是否总是首选呢？答案是否定的，因为有许多应用更适合用UDP，原因有以下几点：</p><p>a. 关于何时发送什么数据控制的更为精细。</p><p>​ 采用UDP时只要应用进程将数据传递给UDP，UDP就会立即将其传递给网络层。而TCP有重传机制，而不管可靠交付需要多长时间。但是实时应用通常不希望过分的延迟报文段的传送，且能容忍一部分数据丢失。</p><p>b. 无需建立连接，不会引入建立连接时的延迟。</p><p>c. 无连接状态，能支持更多的活跃客户。</p><p>d. 分组首部开销较小。</p><h3 id="_6-2-3-tcp-udp网络通信大概交互图" tabindex="-1"><a class="header-anchor" href="#_6-2-3-tcp-udp网络通信大概交互图" aria-hidden="true">#</a> 6.2.3 TCP/UDP网络通信大概交互图</h3><p>​ 下面我们分别画出运用TCP协议和运用UDP协议的客户端和服务器大概交互图。</p><p><img src="http://photos.100ask.net/NewHomeSite/NetworkProgram_Image002.png" alt="NetworkProgram_Image002"></p>',26),d=n("p",null,"面向连接的TCP流模式",-1),m=n("p",null,[n("img",{src:"http://photos.100ask.net/NewHomeSite/NetworkProgram_Image003.png",alt:"NetworkProgram_Image003"})],-1),v=n("p",null,"UDP用户数据包模式",-1),b=p(`<h2 id="_6-3-网络编程主要函数介绍" tabindex="-1"><a class="header-anchor" href="#_6-3-网络编程主要函数介绍" aria-hidden="true">#</a> <strong>6.3</strong> <strong>网络编程主要函数介绍</strong></h2><p>下面全部函数的头文件都是</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-1-socket函数" tabindex="-1"><a class="header-anchor" href="#_6-3-1-socket函数" aria-hidden="true">#</a> 6.3.1 socket函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span><span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数用于创建一个套接字。</p><p><strong>domain</strong>是网络程序所在的主机采用的通讯协族(AF_UNIX和AF_INET等)。</p><p>AF_UNIX只能够用于单一的Unix 系统进程间通信，而AF_INET是针对Internet的，因而可以允许远程通信使用。</p><p><strong>type</strong>是网络程序所采用的通讯协议(SOCK_STREAM,SOCK_DGRAM等)。</p><p>SOCK_STREAM表明用的是TCP 协议，这样会提供按顺序的，可靠，双向，面向连接的比特流。</p><p>SOCK_DGRAM 表明用的是UDP协议，这样只会提不可靠，无连接的通信。</p><p>关于<strong>protocol</strong>，由于指定了type，所以这个地方一般只要用0来代替就可以了。</p><p>此函数执行成功时返回文件描述符，失败时返回-1,看errno可知道出错的详细情况。</p><h3 id="_6-3-2-bind函数" tabindex="-1"><a class="header-anchor" href="#_6-3-2-bind函数" aria-hidden="true">#</a> 6.3.2 bind函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>my_addr<span class="token punctuation">,</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从函数用于将地址绑定到一个套接字。一台电脑上可能有多个IP和端口，这个套接字要绑定到哪个IP和端口需要用bind函数来绑定。</p><p><strong>sockfd</strong>是由socket函数调用返回的文件描述符。</p><p><strong>my_addr</strong>是一个指向sockaddr的指针。</p><p><strong>addrlen</strong>是sockaddr结构的长度。</p><p><strong>sockaddr</strong>的定义：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">{</span>
unisgned <span class="token keyword">short</span>  as_family<span class="token punctuation">;</span>
<span class="token keyword">char</span> sa_data<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">// 这14个字节里面，含有 IP 和 端口，但是不明显</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过由于系统的兼容性,我们一般使用另外一个结构(struct sockaddr_in) 来代替。</p><p><strong>sockaddr_in</strong>的定义： <strong>sockaddr</strong> 和 <strong>sockaddr_in</strong> 结构体的大小是完全一样的，</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token punctuation">{</span>
<span class="token keyword">unsigned</span> <span class="token keyword">short</span>          sin_family<span class="token punctuation">;</span>     
<span class="token keyword">unsigned</span> <span class="token keyword">short</span>          sin_port<span class="token punctuation">;</span>          <span class="token comment">// 2字节   表示端口</span>
<span class="token keyword">struct</span> <span class="token class-name">in_addr</span>          sin_addr<span class="token punctuation">;</span>          <span class="token comment">// 4字节   表示IP地址</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span>           sin_zero<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 8字节   不用  2+4+8=14字节，和上面那个结构体一样</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用Internet所以sin_family一般为AF_INET。</p><p>sin_addr还是一个结构体，sin_addr.s_addr 设置为INADDR_ANY表示可以和主机的所有IP通信，也就是监测所有的IP。</p><p>sin_port是要监听的端口号。要使用 htons(SERVER_PORT) 端口号转换为网络字节序</p><p>bind将本地的端口同socket返回的文件描述符捆绑在一起.</p><p>成功是返回0,失败的情况和socket一样，返回 -1。</p><h3 id="_6-3-3-listen函数" tabindex="-1"><a class="header-anchor" href="#_6-3-3-listen函数" aria-hidden="true">#</a> 6.3.3 listen函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数宣告服务器可以接受连接请求。</p><p><strong>sockfd</strong>是bind后的文件描述符。</p><p><strong>backlog</strong>设置请求排队的最大长度。当有多个客户端程序和服务端相连时，使用这个表示可以介绍的排队长度。</p><p>listen函数将bind的文件描述符变为监听套接字。</p><p>成功是返回0,失败的情况和socket一样，返回 -1。</p><h3 id="_6-3-4-accept函数" tabindex="-1"><a class="header-anchor" href="#_6-3-4-accept函数" aria-hidden="true">#</a> 6.3.4 accept函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务器使用此函数获得连接请求，并且建立连接。</p><p><strong>sockfd</strong>是listen后的文件描述符。</p><p><strong>addr</strong>，<strong>addrlen</strong>是用来给客户端的程序填写的，服务器端只要传递指针就可以了， bind,listen和accept是服务器端用的函数。</p><p>accept调用时，服务器端的程序会一直阻塞到有一个客户程序发出了连接。</p><p>accept成功时返回最后的服务器端的文件描述符，这个时候服务器端可以向该描述符写信息了，失败时返回-1 。</p><p>（可以认为这个描述符是这个客户端的象征，之后接收发送就向该描述符操作）</p><p>问：如何把客户端的IP地址转换为我们常见的形式？</p><p>答：inet_ntoa(sockaddr.sin_addr) 把这个 sin_addr 转换为 ascii 格式的字符串</p><h3 id="_6-3-5-connect函数" tabindex="-1"><a class="header-anchor" href="#_6-3-5-connect函数" aria-hidden="true">#</a> 6.3.5 connect函数</h3><p>对于TCP的连接，这里会有3次握手</p><p>对于UDP的连接，这里是虚假的连接，目的只是为了获得IP地址这些数据而已</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span> serv_addr<span class="token punctuation">,</span><span class="token keyword">int</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以用connect建立一个连接，在connect中所指定的地址是想与之通信的服务器的地址。</p><p><strong>sockfd</strong>是socket函数返回的文件描述符，客户端的文件描述符。</p><p><strong>serv_addr</strong>储存了服务器端的连接信息，其中sin_add是服务端的地址。</p><p><strong>addrlen</strong>是serv_addr的长度。</p><p>connect函数是客户端用来同服务端连接的</p><p>成功时返回0，sockfd是同服务端通讯的文件描述符（客户端），失败时返回-1。</p><h3 id="_6-3-6-send函数" tabindex="-1"><a class="header-anchor" href="#_6-3-6-send函数" aria-hidden="true">#</a> 6.3.6 send函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> \\<span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>sockfd</strong> 指定发送端套接字描述符；</p><p><strong>buf</strong> 指明一个存放应用程序要发送数据的缓冲区；</p><p><strong>len</strong> 指明实际要发送的数据的字节数；</p><p><strong>flags</strong> 一般置0。</p><p>客户或者服务器应用程序都用send函数来向TCP连接的另一端发送数据</p><h3 id="_6-3-7-recv函数" tabindex="-1"><a class="header-anchor" href="#_6-3-7-recv函数" aria-hidden="true">#</a> 6.3.7 recv函数</h3><p>【没有数据会休眠】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">recv</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>sockfd</strong> 指定接收端套接字描述符；</p><p><strong>buf</strong> 指明一个缓冲区，该缓冲区用来存放recv函数接收到的数据；</p><p><strong>len</strong> 指明buf的长度，也就是最多可以接收多少字节的数据；</p><p><strong>flags</strong> 一般置0。</p><p>客户或者服务器应用程序都用recv函数从TCP连接的另一端接收数据。</p><p>返回值：平时会阻塞，有数据就返回实际接收到了多少个数据</p><p>​ if(iRecvLen &lt;= 0) // 则表示出错了</p><h3 id="_6-3-8-recvfrom函数-udp" tabindex="-1"><a class="header-anchor" href="#_6-3-8-recvfrom函数-udp" aria-hidden="true">#</a> 6.3.8 recvfrom函数（UDP）</h3><p>【没有数据会休眠】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>

				<span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>src_addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>recvfrom通常用于【无连接】套接字，因为此函数可以获得发送者的地址。</p><p><strong>src_addr</strong> 是一个struct sockaddr类型的变量，该变量保存源机的IP地址及端口号。</p><p><strong>addrlen</strong> 常置为sizeof （struct sockaddr）。</p><h3 id="_6-3-9-sendto函数-udp" tabindex="-1"><a class="header-anchor" href="#_6-3-9-sendto函数-udp" aria-hidden="true">#</a> 6.3.9 sendto函数（UDP）</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">sendto</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>

			   <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>dest_addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sendto和send相似，区别在于sendto允许在无连接的套接字上指定一个目标地址。</p><p><strong>dest_addr</strong> 表示目地机的IP地址和端口号信息，</p><p><strong>addrlen</strong> 常常被赋值为sizeof （struct sockaddr）。注意这个不是传入地址了。</p><p><strong>sendto</strong> 函数也返回实际发送的数据字节长度或在出现发送错误时返回－1。</p><h3 id="_6-3-10-close函数" tabindex="-1"><a class="header-anchor" href="#_6-3-10-close函数" aria-hidden="true">#</a> 6.3.10 close函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">close</span><span class="token punctuation">(</span>iSocketClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-3-11-辅助函数" tabindex="-1"><a class="header-anchor" href="#_6-3-11-辅助函数" aria-hidden="true">#</a> 6.3.11 辅助函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>

<span class="token comment">// 将 short 类型的整型端口号转换为 sockaddr_in 中的 sin_port 类型的网络端口号</span>
<span class="token comment">// 将主机字节顺序转换为网络字节顺序</span>
<span class="token class-name">uint16_t</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> hostshort<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>

<span class="token comment">// 将 IP 地址结构体转换为 ascii码常见格式</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>

$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out <span class="token number">226.000</span><span class="token number">.000</span><span class="token number">.037</span>      # Last byte is in octal
<span class="token number">226.0</span><span class="token number">.0</span><span class="token number">.31</span>
$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out <span class="token number">0x7f.1</span>               # First byte is in hex
<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>
    
<span class="token comment">// 参数1：cp 就是 192.168.1.1 这种格式的IP地址字符串</span>
<span class="token comment">// 参数2：inp 就是 struct in_addr 格式的IP地址，也就是 </span>
<span class="token keyword">int</span> <span class="token function">inet_aton</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cp<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token operator">*</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-4-tcp编程简单示例" tabindex="-1"><a class="header-anchor" href="#_6-4-tcp编程简单示例" aria-hidden="true">#</a> 6.4 TCP编程简单示例</h2><p>​ 服务器首先进行初始化操作：调用函数socket创建一个套接字，函数bind将这个套接字与服务器的公认地址绑定在一起，函数listen将这个套接字换成倾听套接字，然后调用函数accept来等待客户机的请求。过了一段时间后，客户机启动，调用socket创建一个套接字，然后调用函数connect来与服务器建立连接。连接建立之后，客户机和服务器通过读、写套接字来进行通信。</p><h3 id="_6-4-1-服务器端代码" tabindex="-1"><a class="header-anchor" href="#_6-4-1-服务器端代码" aria-hidden="true">#</a> 6.<strong>4.1</strong> 服务器端代码</h3><p>参考：TCP/server_line.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span>#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span>#include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span>#include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span>#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span>#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>socket<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span>#include <span class="token operator">&lt;</span>netinet<span class="token operator">/</span>in<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">7</span>#include <span class="token operator">&lt;</span>arpa<span class="token operator">/</span>inet<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">8</span>#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">9</span>#include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">10</span>
<span class="token number">11</span>#define SERVER_PORT <span class="token number">8180</span>
<span class="token number">12</span>#define C_QUEUE     <span class="token number">10</span> 
<span class="token number">13</span>
<span class="token number">14</span><span class="token comment">/************************************************************
15*函数功能描述：从8180端口接收客户端数据
16*输入参数：无
17*输出参数：打印客户IP以及发来的信息
18*返回值：无
19*修改日期		版本号		修改人		修改内容
20*2020/05/13		v1.0.0		zonghzha	reat
21*************************************************************/</span>
<span class="token number">22</span>
<span class="token number">23</span>int <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token number">24</span><span class="token punctuation">{</span>
<span class="token number">25</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">26</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token number">27</span>    <span class="token keyword">int</span> duty_socket<span class="token punctuation">;</span>
<span class="token number">28</span>    <span class="token keyword">int</span> customer_socket<span class="token punctuation">;</span>
<span class="token number">29</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> socket_server_addr<span class="token punctuation">;</span>
<span class="token number">30</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> socket_client_addr<span class="token punctuation">;</span>
<span class="token number">31</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token number">32</span>    <span class="token keyword">int</span> addr_len<span class="token punctuation">;</span>
<span class="token number">33</span>
<span class="token number">34</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>	
<span class="token number">36</span>	  <span class="token comment">/* 服务器端开始建立socket描述符 */</span>
<span class="token number">37</span>    duty_socket <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">38</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>duty_socket <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">39</span>    <span class="token punctuation">{</span>
<span class="token number">40</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;socket error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">41</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">42</span>    <span class="token punctuation">}</span>
<span class="token number">43</span>    
<span class="token number">44</span>	  <span class="token comment">/* 服务器端填充 sockaddr_in结构 */</span>
<span class="token number">45</span>    socket_server_addr<span class="token punctuation">.</span>sin_family   <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
<span class="token number">46</span>	  <span class="token comment">/* 端口号转换为网络字节序 */</span>
<span class="token number">47</span>    socket_server_addr<span class="token punctuation">.</span>sin_port     <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERVER_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">48</span>	  <span class="token comment">/* 接收本机所有网口的数据 */</span>
<span class="token number">49</span>    socket_server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr  <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span>
<span class="token number">50</span>    <span class="token function">memset</span><span class="token punctuation">(</span>socket_server_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">51</span>    
<span class="token number">52</span>	  <span class="token comment">/* 捆绑sockfd描述符 */</span>
<span class="token number">53</span>    ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>duty_socket<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>socket_server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">54</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">55</span>    <span class="token punctuation">{</span>
<span class="token number">56</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bind error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">57</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">58</span>    <span class="token punctuation">}</span>
<span class="token number">59</span>    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>duty_socket<span class="token punctuation">,</span> C_QUEUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">60</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">61</span>    <span class="token punctuation">{</span>
<span class="token number">62</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;listen error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">63</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">64</span>    <span class="token punctuation">}</span>
<span class="token number">65</span>    
<span class="token number">66</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">67</span>    <span class="token punctuation">{</span>
<span class="token number">68</span>        addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">69</span>		  <span class="token comment">/* 服务器阻塞,直到客户程序建立连接 */</span>
<span class="token number">70</span>        customer_socket <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>duty_socket<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>socket_client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">71</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>customer_socket <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">72</span>        <span class="token punctuation">{</span>
<span class="token number">73</span>			  <span class="token comment">/*inet_ntoa的作用是将一个32位Ipv4地址转换为相应的点分十进制数串*/</span>
<span class="token number">74</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Get connect from %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>socket_client_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">75</span>        <span class="token punctuation">}</span>
<span class="token number">76</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">77</span>        <span class="token punctuation">{</span>
<span class="token number">78</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">79</span>            <span class="token punctuation">{</span>
<span class="token number">80</span>                <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">81</span>				  <span class="token comment">/*接收数据*/</span>
<span class="token number">82</span>                len <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>customer_socket<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">83</span>                buf<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
<span class="token number">84</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">85</span>                <span class="token punctuation">{</span>
<span class="token number">86</span>                    <span class="token function">close</span><span class="token punctuation">(</span>customer_socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">87</span>                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">88</span>                <span class="token punctuation">}</span>
<span class="token number">89</span>                <span class="token keyword">else</span>
<span class="token number">90</span>                <span class="token punctuation">{</span>
<span class="token number">91</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Get connect from %s, Msg is %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>socket_client_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">92</span>                <span class="token punctuation">}</span>
<span class="token number">93</span>            <span class="token punctuation">}</span>
<span class="token number">94</span>        <span class="token punctuation">}</span>
<span class="token number">95</span>    <span class="token punctuation">}</span>
<span class="token number">96</span>    
<span class="token number">97</span>    <span class="token function">close</span><span class="token punctuation">(</span>duty_socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">98</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">99</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-2-客户端代码" tabindex="-1"><a class="header-anchor" href="#_6-4-2-客户端代码" aria-hidden="true">#</a> 6.4.2 客户端代码</h3><p>参考：TCP/client_line.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span>#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span>#include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span>#include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span>#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span>#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>socket<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span>#include <span class="token operator">&lt;</span>netinet<span class="token operator">/</span>in<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">7</span>#include <span class="token operator">&lt;</span>arpa<span class="token operator">/</span>inet<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">8</span>#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">9</span>
<span class="token number">10</span>#define SERVER_PORT <span class="token number">8180</span>
<span class="token number">11</span><span class="token comment">/************************************************************
12*函数功能描述：向指定IP的8180端口发送数据
13*输入参数：点分十进制服务器IP
14*输出参数：无
15*返回值：无
16*修改日期		版本号		修改人		修改内容
17*2020/05/13		v1.0.0		zonghzha	creat
18*************************************************************/</span>
<span class="token number">19</span>
<span class="token number">20</span>int <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token number">21</span><span class="token punctuation">{</span>
<span class="token number">22</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">23</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token number">24</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> socket_server_addr<span class="token punctuation">;</span>
<span class="token number">25</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token number">26</span>    <span class="token keyword">int</span> addr_len<span class="token punctuation">;</span>
<span class="token number">27</span>    <span class="token keyword">int</span> client_socket<span class="token punctuation">;</span>
<span class="token number">28</span>
<span class="token number">29</span>    
<span class="token number">30</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token number">31</span>    <span class="token punctuation">{</span>
<span class="token number">32</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">33</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s &lt;server_ip&gt;\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">34</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">35</span>    <span class="token punctuation">}</span>
<span class="token number">36</span>    
<span class="token number">37</span>    <span class="token comment">/* 客户程序开始建立 sockfd描述符 */</span>
<span class="token number">38</span>    client_socket <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">39</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>client_socket <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">40</span>    <span class="token punctuation">{</span>
<span class="token number">41</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;socket error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">43</span>    <span class="token punctuation">}</span>
<span class="token number">44</span>    
<span class="token number">45</span>	  <span class="token comment">/* 客户程序填充服务端的资料 */</span>
<span class="token number">46</span>    socket_server_addr<span class="token punctuation">.</span>sin_family   <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
<span class="token number">47</span>	  <span class="token comment">/*主机字节序转换为网络字节序*/</span>
<span class="token number">48</span>    socket_server_addr<span class="token punctuation">.</span>sin_port     <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERVER_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">49</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inet_aton</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>socket_server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">50</span>    <span class="token punctuation">{</span>
<span class="token number">51</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid server ip\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">52</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">53</span>    <span class="token punctuation">}</span>
<span class="token number">54</span>    <span class="token function">memset</span><span class="token punctuation">(</span>socket_server_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">55</span>    <span class="token comment">/* 客户程序发起连接请求 */</span>
<span class="token number">56</span>    ret <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>socket_server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">57</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">58</span>    <span class="token punctuation">{</span>
<span class="token number">59</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;connect error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">60</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">61</span>    <span class="token punctuation">}</span>
<span class="token number">62</span>
<span class="token number">63</span>    
<span class="token number">64</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">65</span>    <span class="token punctuation">{</span>
<span class="token number">66</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">67</span>        <span class="token punctuation">{</span>
<span class="token number">68</span>            len <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">69</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">70</span>            <span class="token punctuation">{</span>
<span class="token number">71</span>                <span class="token function">close</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">72</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">73</span>            <span class="token punctuation">}</span>
<span class="token number">74</span>        <span class="token punctuation">}</span>
<span class="token number">75</span>    <span class="token punctuation">}</span>
<span class="token number">76</span>    
<span class="token number">77</span>    <span class="token function">close</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">78</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">79</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-3-makefile文件" tabindex="-1"><a class="header-anchor" href="#_6-4-3-makefile文件" aria-hidden="true">#</a> 6.4.3 Makefile文件</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>all<span class="token operator">:</span>server client
server<span class="token operator">:</span>server<span class="token punctuation">.</span>c
	gcc $<span class="token operator">^</span> <span class="token operator">-</span>o $@
client<span class="token operator">:</span>client<span class="token punctuation">.</span>c
	gcc $<span class="token operator">^</span> <span class="token operator">-</span>o $@
clean<span class="token operator">:</span>
	rm server client <span class="token operator">-</span>f

（注意：命令语句的开头要用“Tab”键。）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-4-执行" tabindex="-1"><a class="header-anchor" href="#_6-4-4-执行" aria-hidden="true">#</a> 6.4.4 执行</h3><p>服务器端：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>client <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端输入：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>good night
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务器端显示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Get connect from <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>
Get connect from <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">,</span> Msg is good night
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-5-udp编程简单示例" tabindex="-1"><a class="header-anchor" href="#_6-5-udp编程简单示例" aria-hidden="true">#</a> 6.5 UDP编程简单示例</h2><p>​ UDP服务器首先进行初始化操作：调用函数socket创建一个数据报类型的套接字，函数bind将这个套接字与服务器的公认地址绑定在一起。然后调用函数recvfrom接收UDP客户机的数据报。UDP客户机首先调用函数socket创建一个数据报套接字，然后调用函数sendto向服务器发送数据报。在结束通信后，客户机调用close关闭UDP套接字，服务器继续使用这个UDP套接字接收其它客户机的数据报。</p><h3 id="_6-5-1-服务器端代码" tabindex="-1"><a class="header-anchor" href="#_6-5-1-服务器端代码" aria-hidden="true">#</a> 6.<strong>5.1</strong> 服务器端代码</h3><p>参考UDP/server_line.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span>#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span>#include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span>#include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span><span class="token comment">//#include &lt;sys/type.h&gt;</span>
<span class="token number">5</span>#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>socket<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span>#include <span class="token operator">&lt;</span>netinet<span class="token operator">/</span>in<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">7</span>#include <span class="token operator">&lt;</span>arpa<span class="token operator">/</span>inet<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">8</span>#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">9</span>#include <span class="token operator">&lt;</span>signal<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">10</span>
<span class="token number">11</span><span class="token comment">/*服务器端口为8180*/</span>
<span class="token number">12</span>#define SERVER_PORT <span class="token number">8180</span>
<span class="token number">13</span>
<span class="token number">14</span><span class="token comment">/************************************************************
15*函数功能描述：从8180端口接收客户端数据
16*输入参数：无
17*输出参数：打印客户IP以及发来的信息
18*返回值：无
19*修改日期			版本号			修改人			修改内容
20*2020/05/13			v1.0.0			zonghzha		creat
21*************************************************************/</span>
<span class="token number">22</span>
<span class="token number">23</span>
<span class="token number">24</span>int <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token number">25</span><span class="token punctuation">{</span>
<span class="token number">26</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">27</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token number">28</span>    <span class="token keyword">int</span> duty_socket<span class="token punctuation">;</span>
<span class="token number">29</span>    <span class="token keyword">int</span> customer_socket<span class="token punctuation">;</span>
<span class="token number">30</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> socket_server_addr<span class="token punctuation">;</span>
<span class="token number">31</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> socket_client_addr<span class="token punctuation">;</span>
<span class="token number">32</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token number">33</span>    <span class="token keyword">int</span> addr_len<span class="token punctuation">;</span>
<span class="token number">34</span>
<span class="token number">35</span>	  <span class="token comment">/* 创建数据报套接字 */</span>
<span class="token number">36</span>    duty_socket <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>duty_socket <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">38</span>    <span class="token punctuation">{</span>
<span class="token number">39</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;socket error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">41</span>    <span class="token punctuation">}</span>
<span class="token number">42</span>    
<span class="token number">43</span>	  <span class="token comment">/* 服务器端填充 sockaddr_in结构 */</span>
<span class="token number">44</span>    socket_server_addr<span class="token punctuation">.</span>sin_family   <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
<span class="token number">45</span>    socket_server_addr<span class="token punctuation">.</span>sin_port     <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERVER_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">46</span>    socket_server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr  <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span>
<span class="token number">47</span>    <span class="token function">memset</span><span class="token punctuation">(</span>socket_server_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">48</span>    
<span class="token number">49</span>	  <span class="token comment">/*绑定套接字*/</span>
<span class="token number">50</span>    ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>duty_socket<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>socket_server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">51</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">52</span>    <span class="token punctuation">{</span>
<span class="token number">53</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bind error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">54</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">55</span>    <span class="token punctuation">}</span>
<span class="token number">56</span>
<span class="token number">57</span>    
<span class="token number">58</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">59</span>    <span class="token punctuation">{</span>
<span class="token number">60</span>        addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">61</span>		  <span class="token comment">/* 接收客户端数据报，返回的为接收到的字节数 */</span> 
<span class="token number">62</span>        len <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>duty_socket<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>socket_client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">63</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">64</span>        <span class="token punctuation">{</span>
<span class="token number">65</span>            buf<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
<span class="token number">66</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Get Msg from %s : %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>socket_client_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">67</span>        <span class="token punctuation">}</span>
<span class="token number">68</span>   
<span class="token number">69</span>    <span class="token punctuation">}</span>
<span class="token number">70</span>    
<span class="token number">71</span>    <span class="token function">close</span><span class="token punctuation">(</span>duty_socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">72</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">73</span><span class="token punctuation">}</span>
<span class="token number">74</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-2-客户端代码" tabindex="-1"><a class="header-anchor" href="#_6-5-2-客户端代码" aria-hidden="true">#</a> <strong>6.5.2</strong> <strong>客户端代码</strong></h3><h4 id="_6-5-2-1-客户端程序1" tabindex="-1"><a class="header-anchor" href="#_6-5-2-1-客户端程序1" aria-hidden="true">#</a> 6.<strong>5.2.1</strong> 客户端程序1</h4><p>参考UDP/client_line_1.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span>#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span>#include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span>#include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span>#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>socket<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span>#include <span class="token operator">&lt;</span>netinet<span class="token operator">/</span>in<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span>#include <span class="token operator">&lt;</span>arpa<span class="token operator">/</span>inet<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">7</span>#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">8</span>
<span class="token number">9</span>#define SERVER_PORT <span class="token number">8180</span>
<span class="token number">10</span>
<span class="token number">11</span><span class="token comment">/************************************************************
12*函数功能描述：向指定IP的8180端口发送数据
13*输入参数：点分十进制服务器IP
14*输出参数：无
15*返回值：无
16*修改日期			版本号			修改人			修改内容
17*2020/05/13			v1.0.0			zonghzha		creat
18*************************************************************/</span>
<span class="token number">19</span>
<span class="token number">20</span>int <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token number">21</span><span class="token punctuation">{</span>
<span class="token number">22</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">23</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token number">24</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> socket_server_addr<span class="token punctuation">;</span>
<span class="token number">25</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token number">26</span>    <span class="token keyword">int</span> addr_len<span class="token punctuation">;</span>
<span class="token number">27</span>    <span class="token keyword">int</span> client_socket<span class="token punctuation">;</span>
<span class="token number">28</span>
<span class="token number">29</span>    
<span class="token number">30</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token number">31</span>    <span class="token punctuation">{</span>
<span class="token number">32</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">33</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s &lt;server_ip&gt;\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">34</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">35</span>    <span class="token punctuation">}</span>
<span class="token number">36</span>    
<span class="token number">37</span>    <span class="token comment">/*创建套接字*/</span>
<span class="token number">38</span>    client_socket <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">39</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>client_socket <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">40</span>    <span class="token punctuation">{</span>
<span class="token number">41</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;socket error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">43</span>    <span class="token punctuation">}</span>
<span class="token number">44</span>    
<span class="token number">45</span>	  <span class="token comment">/* 填充服务端的资料 */</span>
<span class="token number">46</span>    socket_server_addr<span class="token punctuation">.</span>sin_family   <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
<span class="token number">47</span>    socket_server_addr<span class="token punctuation">.</span>sin_port     <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERVER_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">48</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inet_aton</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>socket_server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">49</span>    <span class="token punctuation">{</span>
<span class="token number">50</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid server ip\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">51</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">52</span>    <span class="token punctuation">}</span>
<span class="token number">53</span>    <span class="token function">memset</span><span class="token punctuation">(</span>socket_server_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">54</span>    
<span class="token number">55</span>
<span class="token number">56</span>
<span class="token number">57</span>    
<span class="token number">58</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">59</span>    <span class="token punctuation">{</span>
<span class="token number">60</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">61</span>        <span class="token punctuation">{</span>
<span class="token number">62</span> <span class="token comment">//           len = send(client_socket, buf, strlen(buf), 0);</span>
<span class="token number">63</span>			  <span class="token comment">/*向服务器端发送数据报*/</span>
<span class="token number">64</span>            addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">65</span>            len <span class="token operator">=</span> <span class="token function">sendto</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>socket_server_addr<span class="token punctuation">,</span> addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">66</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">67</span>            <span class="token punctuation">{</span>
<span class="token number">68</span>                <span class="token function">close</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">69</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">70</span>            <span class="token punctuation">}</span>
<span class="token number">71</span>        <span class="token punctuation">}</span>
<span class="token number">72</span>    <span class="token punctuation">}</span>
<span class="token number">73</span>    
<span class="token number">74</span>    <span class="token function">close</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">75</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">76</span><span class="token punctuation">}</span>
<span class="token number">77</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问：用UDP协议写网络通讯程序不可以用connect函数吗？</p><p>答：非也。</p><h4 id="_6-5-2-2-客户端程序2" tabindex="-1"><a class="header-anchor" href="#_6-5-2-2-客户端程序2" aria-hidden="true">#</a> 6.<strong>5.2.2</strong> <strong>客户端程序2</strong></h4><p>参考UDP/client_line_2.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span>#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span>#include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span>#include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span>#include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>socket<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span>#include <span class="token operator">&lt;</span>netinet<span class="token operator">/</span>in<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span>#include <span class="token operator">&lt;</span>arpa<span class="token operator">/</span>inet<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">7</span>#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">8</span>
<span class="token number">9</span><span class="token comment">/*服务器端口为8180*/</span>
<span class="token number">10</span>#define SERVER_PORT <span class="token number">8180</span>
<span class="token number">11</span>
<span class="token number">12</span><span class="token comment">/************************************************************
13*函数功能描述：向指定IP的8180端口发送数据
14*输入参数：点分十进制服务器IP
15*输出参数：无
16*返回值：无
17*修改日期			版本号			修改人			修改内容
18*2020/05/13			v1.0.0			zonghzha		creat
19*************************************************************/</span>
<span class="token number">20</span>
<span class="token number">21</span>int <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token number">22</span><span class="token punctuation">{</span>
<span class="token number">23</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">24</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token number">25</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> socket_server_addr<span class="token punctuation">;</span>
<span class="token number">26</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token number">27</span>    <span class="token keyword">int</span> addr_len<span class="token punctuation">;</span>
<span class="token number">28</span>    <span class="token keyword">int</span> client_socket<span class="token punctuation">;</span>
<span class="token number">29</span>
<span class="token number">30</span>    
<span class="token number">31</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token number">32</span>    <span class="token punctuation">{</span>
<span class="token number">33</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">34</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s &lt;server_ip&gt;\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">36</span>    <span class="token punctuation">}</span>
<span class="token number">37</span>    
<span class="token number">38</span>    <span class="token comment">/*创建数据报套接字*/</span>
<span class="token number">39</span>    client_socket <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>client_socket <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">41</span>    <span class="token punctuation">{</span>
<span class="token number">42</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;socket error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">43</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">44</span>    <span class="token punctuation">}</span>
<span class="token number">45</span>    
<span class="token number">46</span>    socket_server_addr<span class="token punctuation">.</span>sin_family   <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
<span class="token number">47</span>    socket_server_addr<span class="token punctuation">.</span>sin_port     <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERVER_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">48</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inet_aton</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>socket_server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">49</span>    <span class="token punctuation">{</span>
<span class="token number">50</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid server ip\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">51</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">52</span>    <span class="token punctuation">}</span>
<span class="token number">53</span>    <span class="token function">memset</span><span class="token punctuation">(</span>socket_server_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">54</span>    
<span class="token number">55</span>    ret <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>socket_server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">56</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">57</span>    <span class="token punctuation">{</span>
<span class="token number">58</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;connect error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">59</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">60</span>    <span class="token punctuation">}</span>
<span class="token number">61</span>
<span class="token number">62</span>    
<span class="token number">63</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">64</span>    <span class="token punctuation">{</span>
<span class="token number">65</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">66</span>        <span class="token punctuation">{</span>
<span class="token number">67</span>            len <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">68</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">69</span>            <span class="token punctuation">{</span>
<span class="token number">70</span>                <span class="token function">close</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">71</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">72</span>            <span class="token punctuation">}</span>
<span class="token number">73</span>        <span class="token punctuation">}</span>
<span class="token number">74</span>    <span class="token punctuation">}</span>
<span class="token number">75</span>    
<span class="token number">76</span>    <span class="token function">close</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">77</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">78</span><span class="token punctuation">}</span>
<span class="token number">79</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在客户端代码2中，connect函数并非真的在协议层建立了连接，它只是指定了服务器的地址和端口号信息。</p><p>​ 因为在connect中指定了服务器的地址和端口号信息，所以后面的send就可以直接发送了，而不用再次指定地址和端口号。</p><h3 id="_6-5-3-makefile文件" tabindex="-1"><a class="header-anchor" href="#_6-5-3-makefile文件" aria-hidden="true">#</a> 6.5.3 Makefile文件</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>all<span class="token operator">:</span>server client_1 client_2
server<span class="token operator">:</span>server<span class="token punctuation">.</span>c
	gcc $<span class="token operator">^</span> <span class="token operator">-</span>o $@
client_1<span class="token operator">:</span>client_1<span class="token punctuation">.</span>c
	gcc $<span class="token operator">^</span> <span class="token operator">-</span>o $@
client_2<span class="token operator">:</span>client_2<span class="token punctuation">.</span>c
	gcc $<span class="token operator">^</span> <span class="token operator">-</span>o $@
clean<span class="token operator">:</span>
	rm server client_1 client_2 <span class="token operator">-</span>f

（注意：命令语句的开头要用“Tab”键。）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-4-执行" tabindex="-1"><a class="header-anchor" href="#_6-5-4-执行" aria-hidden="true">#</a> 6.5.4 执行</h3><p>服务器端执行：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端执行：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>client_1 <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端输入：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>good night
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务器端显示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Get Msg from <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">:</span> good night
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,136);function g(_,h){const s=o("center");return c(),l("div",null,[u,a(s,null,{default:e(()=>[r]),_:1}),k,a(s,null,{default:e(()=>[d]),_:1}),m,a(s,null,{default:e(()=>[v]),_:1}),b])}const y=t(i,[["render",g],["__file","06_NetworkProgram.html.vue"]]);export{y as default};
