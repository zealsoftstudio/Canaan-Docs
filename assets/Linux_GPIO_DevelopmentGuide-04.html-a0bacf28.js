import{_ as e,o as p,c as t,e as i}from"./app-21fd3c9b.js";const m={},n=i('<h2 id="_4-模块接口说明" tabindex="-1"><a class="header-anchor" href="#_4-模块接口说明" aria-hidden="true">#</a> 4 模块接口说明</h2><h3 id="_4-1-pinctrl-接口说明" tabindex="-1"><a class="header-anchor" href="#_4-1-pinctrl-接口说明" aria-hidden="true">#</a> 4.1 pinctrl 接口说明</h3><h4 id="_4-1-1-pin4ctrl-get" tabindex="-1"><a class="header-anchor" href="#_4-1-1-pin4ctrl-get" aria-hidden="true">#</a> 4.1.1 pin4ctrl_get</h4><p><em>•</em> 函数原型：struct pinctrl *pinctrl_get(struct device *dev);</p><p><em>•</em> 作用：获取设备的 pin 操作句柄，所有 pin 操作必须基于此 pinctrl 句柄。</p><p><em>•</em> 参数：</p><ul><li>dev: 指向申请 pin 操作句柄的设备句柄。</li></ul><p><em>•</em> 返回：</p><ul><li><p>成功，返回 pinctrl 句柄。</p></li><li><p>失败，返回 NULL。</p></li></ul><h4 id="_4-1-2-pinctrl-put" tabindex="-1"><a class="header-anchor" href="#_4-1-2-pinctrl-put" aria-hidden="true">#</a> 4.1.2 pinctrl_put</h4><p><em>•</em> 函数原型：void pinctrl_put(struct pinctrl *p)</p><p><em>•</em> 作用：释放 pinctrl 句柄，必须与 pinctrl_get 配对使用。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> p: 指向释放的 pinctrl 句柄。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 没有返回值。</p><p><strong>!</strong> 警告</p><p>必须与 <strong>pinctrl_get</strong> 配对使用。</p><h4 id="_4-1-3-devm-pinctrl-get" tabindex="-1"><a class="header-anchor" href="#_4-1-3-devm-pinctrl-get" aria-hidden="true">#</a> 4.1.3 devm_pinctrl_get</h4><p><em>•</em> 函数原型：struct pinctrl *devm_pinctrl_get(struct device *dev)</p><p><em>•</em> 作用：根据设备获取 pin 操作句柄，所有 pin 操作必须基于此 pinctrl 句柄，与 pinctrl_get功能完全一样，只是 devm_pinctrl_get 会将申请到的 pinctrl 句柄做记录，绑定到设备句柄信息中。设备驱动申请 pin 资源，推荐优先使用 devm_pinctrl_get 接口。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> dev: 指向申请 pin 操作句柄的设备句柄。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 成功，返回 pinctrl 句柄。</p><p>​ <em>•</em> 失败，返回 NULL。</p><h4 id="_4-1-4-devm-pinctrl-put" tabindex="-1"><a class="header-anchor" href="#_4-1-4-devm-pinctrl-put" aria-hidden="true">#</a> 4.1.4 devm_pinctrl_put</h4><p><em>•</em> 函数原型：void devm_pinctrl_put(struct pinctrl *p)</p><p><em>•</em> 作用：释放 pinctrl 句柄，必须与 devm_pinctrl_get 配对使用。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> p: 指向释放的 pinctrl 句柄。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 没有返回值。</p><p><strong>!</strong> 警告</p><p>必须与 <strong>devm_pinctrl_get</strong> 配对使用，可以不显式的调用该接口。</p><h4 id="_4-1-5-pinctrl-lookup-state" tabindex="-1"><a class="header-anchor" href="#_4-1-5-pinctrl-lookup-state" aria-hidden="true">#</a> 4.1.5 pinctrl_lookup_state</h4><p><em>•</em> 函数原型：struct pinctrl_state *pinctrl_lookup_state(struct pinctrl *p, const char *name)</p><p><em>•</em> 作用：根据 pin 操作句柄，查找 state 状态句柄。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> p: 指向要操作的 pinctrl 句柄。</p><p>​ <em>•</em> name: 指向状态名称，如 “default”、“sleep” 等。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 成功，返回执行 pin 状态的句柄 struct pinctrl_state *。</p><p>​ <em>•</em> 失败，返回 NULL。</p><h4 id="_4-1-6-pinctrl-select-state" tabindex="-1"><a class="header-anchor" href="#_4-1-6-pinctrl-select-state" aria-hidden="true">#</a> 4.1.6 pinctrl_select_state</h4><p><em>•</em> 函数原型：int pinctrl_select_state(struct pinctrl *p, struct pinctrl_state *s)</p><p><em>•</em> 作用：将 pin 句柄对应的 pinctrl 设置为 state 句柄对应的状态。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> p: 指向要操作的 pinctrl 句柄。</p><p>​ <em>•</em> s: 指向 state 句柄。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 成功，返回 0。</p><p>​ <em>•</em> 失败，返回错误码。</p><h4 id="_4-1-7-devm-pinctrl-get-select" tabindex="-1"><a class="header-anchor" href="#_4-1-7-devm-pinctrl-get-select" aria-hidden="true">#</a> 4.1.7 devm_pinctrl_get_select</h4><p><em>•</em> 函数原型：struct pinctrl *devm_pinctrl_get_select(struct device *dev, const char *name)</p><p><em>•</em> 作用：获取设备的 pin 操作句柄，并将句柄设定为指定状态。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> dev: 指向管理 pin 操作句柄的设备句柄。</p><p>​ <em>•</em> name: 要设置的 state 名称，如 “default”、“sleep” 等。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 成功，返回 pinctrl 句柄。</p><p>​ <em>•</em> 失败，返回 NULL。</p><h4 id="_4-1-8-devm-pinctrl-get-select-default" tabindex="-1"><a class="header-anchor" href="#_4-1-8-devm-pinctrl-get-select-default" aria-hidden="true">#</a> 4.1.8 devm_pinctrl_get_select_default</h4><p><em>•</em> 函数原型：struct pinctrl *devm_pinctrl_get_select_default(struct device *dev)</p><p><em>•</em> 作用：获取设备的 pin 操作句柄，并将句柄设定为默认状态。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> dev: 指向管理 pin 操作句柄的设备句柄。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 成功，返回 pinctrl 句柄。</p><p>​ <em>•</em> 失败，返回 NULL。</p><h4 id="_4-1-9-pin-config-get" tabindex="-1"><a class="header-anchor" href="#_4-1-9-pin-config-get" aria-hidden="true">#</a> 4.1.9 pin_config_get</h4><p><em>•</em> 作用：获取指定 pin 的属性。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> dev_name: 指向 pinctrl 设备。</p><p>​ <em>•</em> name: 指向 pin 名称。</p><p>​ <em>•</em> config: 保存 pin 的配置信息。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 成功，返回 pin 编号。</p><p>​ <em>•</em> 失败，返回错误码。</p><p><strong>!</strong> 警告</p><p>该接口在 <strong>linux-5.4</strong> 已经移除。</p><h4 id="_4-1-10-pin-config-set" tabindex="-1"><a class="header-anchor" href="#_4-1-10-pin-config-set" aria-hidden="true">#</a> 4.1.10 pin_config_set</h4><p><em>•</em> 作用：设置指定 pin 的属性。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> dev_name: 指向 pinctrl 设备。</p><p>​ <em>•</em> name: 指向 pin 名称。</p><p>​ <em>•</em> config:pin 的配置信息。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 成功，返回 0。</p><p>​ <em>•</em> 失败，返回错误码。</p><p><strong>!</strong> 警告</p><p>该接口在 <strong>linux-5.4</strong> 已经移除。</p><h3 id="_4-2-gpio-接口说明" tabindex="-1"><a class="header-anchor" href="#_4-2-gpio-接口说明" aria-hidden="true">#</a> 4.2 gpio 接口说明</h3><h4 id="_4-2-1-gpio-request" tabindex="-1"><a class="header-anchor" href="#_4-2-1-gpio-request" aria-hidden="true">#</a> 4.2.1 gpio_request</h4><p><em>•</em> 函数原型：int gpio_request(unsigned gpio, const char *label)</p><p><em>•</em> 作用：申请 gpio，获取 gpio 的访问权。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> gpio:gpio 编号。</p><p>​ <em>•</em> label:gpio 名称，可以为 NULL。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 成功，返回 0。</p><p>​ <em>•</em> 失败，返回错误码。</p><h4 id="_4-2-2-gpio-free" tabindex="-1"><a class="header-anchor" href="#_4-2-2-gpio-free" aria-hidden="true">#</a> 4.2.2 gpio_free</h4><p><em>•</em> 函数原型：void gpio_free(unsigned gpio)</p><p><em>•</em> 作用：释放 gpio。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> gpio:gpio 编号。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 无返回值。</p><h4 id="_4-2-3-gpio-direction-input" tabindex="-1"><a class="header-anchor" href="#_4-2-3-gpio-direction-input" aria-hidden="true">#</a> 4.2.3 gpio_direction_input</h4><p><em>•</em> 函数原型：int gpio_direction_input(unsigned gpio)</p><p><em>•</em> 作用：设置 gpio 为 input。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> gpio:gpio 编号。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 成功，返回 0。</p><p>​ <em>•</em> 失败，返回错误码。</p><h4 id="_4-2-5-gpio-get-value" tabindex="-1"><a class="header-anchor" href="#_4-2-5-gpio-get-value" aria-hidden="true">#</a> 4.2.5 __gpio_get_value</h4><p><em>•</em> 函数原型：int __gpio_get_value(unsigned gpio)</p><p><em>•</em> 作用：获取 gpio 电平值 (gpio 已为 input/output 状态)。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> gpio:gpio 编号。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 返回 gpio 对应的电平逻辑，1 表示高, 0 表示低。</p><h4 id="_4-2-6-gpio-set-value" tabindex="-1"><a class="header-anchor" href="#_4-2-6-gpio-set-value" aria-hidden="true">#</a> 4.2.6 __gpio_set_value</h4><p><em>•</em> 函数原型：void __gpio_set_value(unsigned gpio, int value)</p><p><em>•</em> 作用：设置 gpio 电平值 (gpio 已为 input/output 状态)。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> gpio:gpio 编号。</p><p>​ <em>•</em> value: 期望设置的 gpio 电平值，非 0 表示高, 0 表示低。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 无返回值</p><h4 id="_4-2-7-of-get-named-gpio" tabindex="-1"><a class="header-anchor" href="#_4-2-7-of-get-named-gpio" aria-hidden="true">#</a> 4.2.7 of_get_named_gpio</h4><p><em>•</em> 函数原型：int of_get_named_gpio(struct device_node *np, const char *propname, int index)</p><p><em>•</em> 作用：通过名称从 dts 解析 gpio 属性并返回 gpio 编号。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> np: 指向使用 gpio 的设备结点。</p><p>​ <em>•</em> propname:dts 中属性的名称。</p><p>​ <em>•</em> index:dts 中属性的索引值。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 成功，返回 gpio 编号。</p><p>​ <em>•</em> 失败，返回错误码。</p><h4 id="_4-2-8-of-get-named-gpio-flags" tabindex="-1"><a class="header-anchor" href="#_4-2-8-of-get-named-gpio-flags" aria-hidden="true">#</a> 4.2.8 of_get_named_gpio_flags</h4><p><em>•</em> 函数原型：int of_get_named_gpio_flags(struct device_node *np, const char *list_name, int index,</p><p>enum of_gpio_flags *flags)</p><p><em>•</em> 作用：通过名称从 dts 解析 gpio 属性并返回 gpio 编号。</p><p><em>•</em> 参数：</p><p>​ <em>•</em> np: 指向使用 gpio 的设备结点。</p><p>​ <em>•</em> propname:dts 中属性的名称。</p><p>​ <em>•</em> index:dts 中属性的索引值</p><p>​ <em>•</em> flags: 在 sunxi 平台上，必须定义为 struct gpio_config * 类型变量，因为 sunxi pinctrl的 pin 支持上下拉， 驱动能力等信息，而内核 enum of_gpio_flags * 类型变量只能包含输入、输出信息，后续 sunxi 平台 需要标准化该接口。</p><p><em>•</em> 返回：</p><p>​ <em>•</em> 成功，返回 gpio 编号。</p><p>​ <em>•</em> 失败，返回错误码。</p><p><strong>警告</strong></p><p>该接口的 <strong>flags</strong> 参数，在 <strong>sunxi linux-4.9</strong> 及以前的平台上，必须定义为 <strong>struct gpio_config</strong> 类型变量。<strong>linux-5.4</strong> 已经标准化该接口，直接采用 <strong>enum of_gpio_flags</strong> 的定义。</p>',156),r=[n];function a(c,o){return p(),t("div",null,r)}const s=e(m,[["render",a],["__file","Linux_GPIO_DevelopmentGuide-04.html.vue"]]);export{s as default};
