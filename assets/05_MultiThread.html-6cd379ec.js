import{_ as p,r as e,o,c,d as a,w as t,e as l,a as n}from"./app-21fd3c9b.js";const u={},i=l(`<h1 id="_5-线程编程" tabindex="-1"><a class="header-anchor" href="#_5-线程编程" aria-hidden="true">#</a> 5 线程编程</h1><p>​ 本章将分为两大部分进行讲解，前半部分将引出线程的使用场景及基本概念，通过示例代码来说明一个线程创建到退出到回收的基本流程。后半部分则会通过示例代码来说明如果控制好线程，从临界资源访问与线程的执行顺序控制上引出互斥锁、信号量的概念与使用方法。</p><h2 id="_5-1-线程的使用" tabindex="-1"><a class="header-anchor" href="#_5-1-线程的使用" aria-hidden="true">#</a> 5.1 线程的使用</h2><h3 id="_5-1-1-为什么要使用多线程" tabindex="-1"><a class="header-anchor" href="#_5-1-1-为什么要使用多线程" aria-hidden="true">#</a> 5.1.1 为什么要使用多线程</h3><p>​ 在编写代码时，是否会遇到以下的场景会感觉到难以下手？</p><p><strong>场景一</strong>：写程序在拷贝文件时，需要一边去拷贝文件，一边去向用户展示拷贝文件的进度时，传统做法是通过每次拷贝完成结束后去更新变量，再将变量转化为进度显示出来。其中经历了拷贝-&gt;计算-&gt;显示-&gt;拷贝-&gt;计算-&gt;显示...直至拷贝结束。这样的程序架构及其的低效，必须在单次拷贝结束后才可以刷新当前拷贝进度，若可以将进程分支，一支单独的解决拷贝问题，一支单独的解决计算刷新问题，则程序效率会提升很多。</p><p><strong>场景二</strong>：用阻塞方式去读取数据，实时需要发送数据的时候。例如在进行串口数据传输或者网络数据传输的时候，我们往往需要双向通信，当设置读取数据为阻塞模式时候，传统的单线程只能等到数据接收来临后才能冲过阻塞，再根据逻辑进行发送。当我们要实现随时发送、随时接收时，无法满足我们的业务需求。若可以将进程分支，一支单纯的处理接收数据逻辑，一支单纯的解决发送数据逻辑，就可以完美的实现功能。</p><p>​ 基于以上场景描述，多线程编程可以完美的解决上述问题。</p><h3 id="_5-1-2-线程概念" tabindex="-1"><a class="header-anchor" href="#_5-1-2-线程概念" aria-hidden="true">#</a> 5.1.2 线程概念</h3><p>​ 所谓线程，就是操作系统所能调度的最小单位。普通的进程，只有一个线程在执行对应的逻辑。我们可以通过多线程编程，使一个进程可以去执行多个不同的任务。相比多进程编程而言，线程享有共享资源，即在进程中出现的全局变量，每个线程都可以去访问它，与进程共享“4G”内存空间，使得系统资源消耗减少。本章节来讨论Linux下POSIX线程。</p><h3 id="_5-1-3-线程的标识pthread-t" tabindex="-1"><a class="header-anchor" href="#_5-1-3-线程的标识pthread-t" aria-hidden="true">#</a> 5.1.3 线程的标识pthread_t</h3><p>​ 对于进程而言，每一个进程都有一个唯一对应的PID号来表示该进程，而对于线程而言，也有一个“类似于进程的PID号”，名为tid，其本质是一个pthread_t类型的变量。线程号与进程号是表示线程和进程的唯一标识，但是对于线程号而言，其仅仅在其所属的进程上下文中才有意义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>获取线程号
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token class-name">pthread_t</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回线程号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在程序中，可以通过函数pthread_self，来返回当前线程的线程号，例程1给出了打印线程tid号。</p><p>测试例程1：（Phtread_txex1.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span>	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span>	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span>
<span class="token number">4</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">5</span>	<span class="token punctuation">{</span>
<span class="token number">6</span>		<span class="token class-name">pthread_t</span> tid <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取主线程的tid号</span>
<span class="token number">7</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;tid = %lu\\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">8</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">9</span>	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：因采用POSIX线程接口，故在要编译的时候包含pthread库，使用gcc编译应gcc xxx.c -lpthread 方可编译多线程程序。</p><p>编译结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image001.png" alt="MultiThread_Image001"></p><h3 id="_5-1-4-线程的创建" tabindex="-1"><a class="header-anchor" href="#_5-1-4-线程的创建" aria-hidden="true">#</a> 5.1.4 线程的创建</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>创建线程
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token operator">*</span>thread<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>start_routine<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在传统的程序中，一个进程只有一个线程，可以通过函数pthread_create来创建线程。</p><p>​ 该函数第一个参数为pthread_t类型的线程号地址，当函数执行成功后会指向新建线程的线程号；第二个参数表示了线程的属性，一般传入NULL表示默认属性；第三个参数代表返回值为void *，形参为void *的函数指针，当线程创建成功后，会自动的执行该回调函数；第四个参数则表示为向线程处理函数传入的参数，若不传入，可用NULL填充，有关线程传参后续小节会有详细的说明，接下来通过一个简单例程来使用该函数创建出一个线程。</p><p>测试例程2：（Phtread_txex2.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> 	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span> 	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> 	#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> 	#include <span class="token operator">&lt;</span>errno<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> 
<span class="token number">6</span> 	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">7</span> 	<span class="token punctuation">{</span>
<span class="token number">8</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_New = %lu\\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印线程的tid号</span>
<span class="token number">9</span> 	<span class="token punctuation">}</span>
<span class="token number">10</span>
<span class="token number">11</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">12</span>	<span class="token punctuation">{</span>
<span class="token number">13</span>		
<span class="token number">14</span>		<span class="token class-name">pthread_t</span> tid1<span class="token punctuation">;</span>
<span class="token number">15</span>		<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程</span>
<span class="token number">16</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">17</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">18</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">19</span>		<span class="token punctuation">}</span>
<span class="token number">20</span>		
<span class="token number">21</span>		<span class="token comment">/*tid_main 为通过pthread_self获取的线程ID，tid_new通过执行pthread_create成功后tid指向的空间*/</span>
<span class="token number">22</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;tid_main = %lu tid_new = %lu \\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>tid1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">23</span>		
<span class="token number">24</span>		<span class="token comment">/*因线程执行顺序随机，不加sleep可能导致主线程先执行，导致进程结束，无法执行到子线程*/</span>
<span class="token number">25</span>		<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span>		
<span class="token number">27</span>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">28</span>	<span class="token punctuation">}</span>
<span class="token number">29</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image002.png" alt="MultiThread_Image002"></p><p>​ 通过pthread_create确实可以创建出来线程，主线程中执行pthread_create后的tid指向了线程号空间，与子线程通过函数pthread_self打印出来的线程号一致。</p><p>​ 特别说明的是，当主线程伴随进程结束时，所创建出来的线程也会立即结束，不会继续执行。并且创建出来的线程的执行顺序是随机竞争的，并不能保证哪一个线程会先运行。可以将上述代码中sleep函数进行注释，观察实验现象。</p><p>去掉上述代码25行后运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image003.png" alt="MultiThread_Image003"></p><p>​ 上述运行代码3次，其中有2次被进程结束，无法执行到子线程的逻辑，最后一次则执行到了子线程逻辑后结束的进程。如此可以说明，线程的执行顺序不受控制，且整个进程结束后所产生的线程也随之被释放，在后续内容中将会描述如何控制线程执行。</p><h3 id="_5-1-5-向线程传入参数" tabindex="-1"><a class="header-anchor" href="#_5-1-5-向线程传入参数" aria-hidden="true">#</a> 5.1.5 向线程传入参数</h3><p>​ pthread_create()的最后一个参数的为void *类型的数据，表示可以向线程传递一个void *数据类型的参数，线程的回调函数中可以获取该参数，例程3举例了如何向线程传入变量地址与变量值。</p><p>测试例程3：（Phtread_txex3.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> 	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span> 	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> 	#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> 	#include <span class="token operator">&lt;</span>errno<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> 
<span class="token number">6</span> 	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">7</span> 	<span class="token punctuation">{</span>
<span class="token number">8</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:arg = %d Addr = %p\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">9</span> 	<span class="token punctuation">}</span>
<span class="token number">10</span>
<span class="token number">11</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">12</span>	<span class="token punctuation">{</span>
<span class="token number">13</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:arg = %d Addr = %p\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>arg<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">14</span>	<span class="token punctuation">}</span>
<span class="token number">15</span>
<span class="token number">16</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">17</span>	<span class="token punctuation">{</span>
<span class="token number">18</span>
<span class="token number">19</span>		<span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span>tid2<span class="token punctuation">;</span>
<span class="token number">20</span>		<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token number">21</span>		<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程传入变量a的地址</span>
<span class="token number">22</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">23</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">24</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">25</span>		<span class="token punctuation">}</span>
<span class="token number">27</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程传入变量a的值</span>
<span class="token number">28</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">29</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">31</span>		<span class="token punctuation">}</span>
<span class="token number">32</span>		<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">33</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:a = %d Add = %p \\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">34</span>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">35</span>	<span class="token punctuation">}</span>
<span class="token number">36</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image004.png" alt="MultiThread_Image004"></p><p>​ 本例程展示了如何利用线程创建函数的第四个参数向线程传入数据，举例了如何以地址的方式传入值、以变量的方式传入值，例程代码的21行，是将变量a先行取地址后，再次强制类型转化为void后传入线程，线程处理的回调函数中，先将万能指针void *转化为int *，再次取地址就可以获得该地址变量的值，其本质在于地址的传递。例程代码的27行，直接将int类型的变量强制转化为void *进行传递（针对不同位数机器，指针对其字数不同，需要int转化为long在转指针，否则可能会发生警告），在线程处理回调函数中，直接将void *数据转化为int类型即可，本质上是在传递变量a的值。</p><p>​ 上述两种方法均可得到所要的值，但是要注意其本质，一个为地址传递，一个为值的传递。当变量发生改变时候，传递地址后，该地址所对应的变量也会发生改变，但传入变量值的时候，即使地址指针所指的变量发生变化，但传入的为变量值，不会受到指针的指向的影响，实际项目中切记两者之间的区别。具体说明见例程4.</p><p>测试例程4：（Phtread_txex4.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> 	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span> 	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> 	#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> 	#include <span class="token operator">&lt;</span>errno<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> 
<span class="token number">6</span> 	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">7</span> 	<span class="token punctuation">{</span>
<span class="token number">8</span> 		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">9</span> 		
<span class="token number">10</span>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:arg = %d Addr = %p\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">11</span>			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">12</span>		<span class="token punctuation">}</span>
<span class="token number">13</span>	<span class="token punctuation">}</span>
<span class="token number">14</span>
<span class="token number">15</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">16</span>	<span class="token punctuation">{</span>
<span class="token number">17</span>		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">18</span>		
<span class="token number">19</span>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:arg = %d Addr = %p\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>arg<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">20</span>			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">21</span>		<span class="token punctuation">}</span>
<span class="token number">22</span>	<span class="token punctuation">}</span>
<span class="token number">23</span>
<span class="token number">24</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">25</span>	<span class="token punctuation">{</span>
<span class="token number">26</span>
<span class="token number">27</span>		<span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span>tid2<span class="token punctuation">;</span>
<span class="token number">28</span>		<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token number">29</span>		<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">31</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">32</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">33</span>		<span class="token punctuation">}</span>
<span class="token number">34</span>		<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">36</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">37</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">38</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">39</span>		<span class="token punctuation">}</span>
<span class="token number">40</span>		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">41</span>			a<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token number">42</span>			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">43</span>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:a = %d Add = %p \\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">44</span>		<span class="token punctuation">}</span>
<span class="token number">45</span>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">46</span>	<span class="token punctuation">}</span>
<span class="token number">47</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image005.png" alt="MultiThread_Image005"></p><p>​ 上述例程讲述了如何向线程传递一个参数，在处理实际项目中，往往会遇到传递多个参数的问题，我们可以通过结构体来进行传递，解决此问题。</p><p>测试例程5：（Phtread_txex5.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> 	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span> 	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> 	#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> 	#include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> 	#include <span class="token operator">&lt;</span>errno<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span> 
<span class="token number">7</span> 	<span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token punctuation">{</span>
<span class="token number">8</span> 		<span class="token keyword">int</span> Id<span class="token punctuation">;</span>
<span class="token number">9</span> 		<span class="token keyword">char</span> Name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">10</span>		<span class="token keyword">float</span> Mark<span class="token punctuation">;</span>
<span class="token number">11</span>	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">12</span>
<span class="token number">13</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">14</span>	<span class="token punctuation">{</span>
<span class="token number">15</span>		<span class="token keyword">struct</span> <span class="token class-name">Stu</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
<span class="token number">16</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Id = %d Name = %s Mark = %.2f\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span>tmp<span class="token operator">-&gt;</span>Id<span class="token punctuation">,</span>tmp<span class="token operator">-&gt;</span>Name<span class="token punctuation">,</span>tmp<span class="token operator">-&gt;</span>Mark<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">17</span>		
<span class="token number">18</span>	<span class="token punctuation">}</span>
<span class="token number">19</span>
<span class="token number">20</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">21</span>	<span class="token punctuation">{</span>
<span class="token number">22</span>
<span class="token number">23</span>		<span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span>tid2<span class="token punctuation">;</span>
<span class="token number">24</span>		<span class="token keyword">struct</span> <span class="token class-name">Stu</span> stu<span class="token punctuation">;</span>
<span class="token number">25</span>		stu<span class="token punctuation">.</span>Id <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token number">26</span>		<span class="token function">strcpy</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>Name<span class="token punctuation">,</span><span class="token string">&quot;ZhangSan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">27</span>		stu<span class="token punctuation">.</span>Mark <span class="token operator">=</span> <span class="token number">94.6</span><span class="token punctuation">;</span>
<span class="token number">28</span>
<span class="token number">29</span>		<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">31</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">32</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">33</span>		<span class="token punctuation">}</span>
<span class="token number">34</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Id = %d Name = %s Mark = %.2f\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>Mark<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>		<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">36</span>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">37</span>	<span class="token punctuation">}</span>
<span class="token number">38</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image006.png" alt="MultiThread_Image006"></p><h3 id="_5-1-6-线程的退出与回收" tabindex="-1"><a class="header-anchor" href="#_5-1-6-线程的退出与回收" aria-hidden="true">#</a> 5.1.6 线程的退出与回收</h3><p>​ 线程的退出情况有三种：第一种是进程结束，进程中所有的线程也会随之结束。第二种是通过函数pthread_exit来主动的退出线程。第三种通过函数pthread_cancel被其他线程被动结束。当线程结束后，主线程可以通过函数pthread_join/pthread_tryjoin_np来回收线程的资源，并且获得线程结束后需要返回的数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>线程退出
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 该函数为线程退出函数，在退出时候可以传递一个void*类型的数据带给主线程，若选择不传出数据，可将参数填充为NULL。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>线程资源回收（阻塞）
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 该函数为线程回收函数，默认状态为阻塞状态，直到成功回收线程后被冲开阻塞。第一个参数为要回收线程的tid号，第二个参数为线程回收后接受线程传出的数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>线程资源回收（非阻塞）
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span>            </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_tryjoin_np</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 该函数为非阻塞模式回收函数，通过返回值判断是否回收掉线程，成功回收则返回0，其余参数与pthread_join一致。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>线程退出（指定线程号）
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_cancel</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 该函数传入一个tid号，会强制退出该tid所指向的线程，若成功执行会返回0。</p><p>​ 上述描述简单的介绍了有关线程回收的API，下面通过例程来说明上述API。</p><p>测试例程6：（Phtread_txex6.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> 	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span> 	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> 	#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> 	#include <span class="token operator">&lt;</span>errno<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> 
<span class="token number">6</span> 	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">7</span> 	<span class="token punctuation">{</span>
<span class="token number">8</span> 		<span class="token keyword">static</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//必须要static修饰，否则pthread_join无法获取到正确值</span>
<span class="token number">9</span> 		<span class="token comment">//int tmp = 0;</span>
<span class="token number">10</span>		tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
<span class="token number">11</span>		tmp<span class="token operator">+=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token number">12</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Addr = %p tmp = %d\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">13</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将变量tmp取地址转化为void*类型传出</span>
<span class="token number">14</span>	<span class="token punctuation">}</span>
<span class="token number">15</span>
<span class="token number">16</span>
<span class="token number">17</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">18</span>	<span class="token punctuation">{</span>
<span class="token number">19</span>
<span class="token number">20</span>		<span class="token class-name">pthread_t</span> tid1<span class="token punctuation">;</span>
<span class="token number">21</span>		<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token number">22</span>		<span class="token keyword">void</span> <span class="token operator">*</span>Tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//因pthread_join第二个参数为void**类型</span>
<span class="token number">23</span>		<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">24</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">25</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">27</span>		<span class="token punctuation">}</span>
<span class="token number">28</span>		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span><span class="token operator">&amp;</span>Tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">29</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Addr = %p Val = %d\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span>Tmp<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>Tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">31</span>	<span class="token punctuation">}</span>
<span class="token number">32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image007.png" alt="MultiThread_Image007"></p><p>​ 上述例程先通过23行将变量以地址的形式传入线程，在线程中做出了自加100的操作，当线程退出的时候通过线程传参，用void*类型的数据通过pthread_join接受。此例程去掉了之前加入的sleep函数，原因是pthread_join函数具备阻塞的特性，直至成功收回掉线程后才会冲破阻塞，因此不需要靠考虑主线程会执行到30行结束进程的情况。特别要说明的是例程第8行，当变量从线程传出的时候，需要加static修饰，对生命周期做出延续，否则无法传出正确的变量值。</p><p>测试例程7：（Phtread_txex7.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> 	#define _GNU_SOURCE 
<span class="token number">2</span> 	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> 	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> 	#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> 	#include <span class="token operator">&lt;</span>errno<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span> 
<span class="token number">7</span> 	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">8</span> 	<span class="token punctuation">{</span>
<span class="token number">9</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pthread:%d Come !\\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>arg<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">10</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">11</span>	<span class="token punctuation">}</span>
<span class="token number">12</span>
<span class="token number">13</span>
<span class="token number">14</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">15</span>	<span class="token punctuation">{</span>
<span class="token number">16</span>		<span class="token keyword">int</span> ret<span class="token punctuation">,</span>i<span class="token punctuation">,</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">17</span>		<span class="token keyword">void</span> <span class="token operator">*</span>Tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token number">18</span>		<span class="token class-name">pthread_t</span> tid<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">19</span>		<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">20</span>			ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">21</span>			<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">22</span>				<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">23</span>				<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">24</span>			<span class="token punctuation">}</span>
<span class="token number">25</span>		<span class="token punctuation">}</span>
<span class="token number">26</span>		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//通过非阻塞方式收回线程，每次成功回收一个线程变量自增，直至3个线程全数回收</span>
<span class="token number">27</span>			<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">28</span>				<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pthread_tryjoin_np</span><span class="token punctuation">(</span>tid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Tmp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">29</span>					<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pthread : %d exit !\\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token punctuation">)</span>Tmp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>					flag<span class="token operator">++</span><span class="token punctuation">;</span>	
<span class="token number">31</span>				<span class="token punctuation">}</span>
<span class="token number">32</span>			<span class="token punctuation">}</span>
<span class="token number">33</span>			<span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">34</span>		<span class="token punctuation">}</span>
<span class="token number">35</span>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">36</span>	<span class="token punctuation">}</span>
<span class="token number">37</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image008.png" alt="MultiThread_Image008"></p><p>​ 例程7展示了如何使用非阻塞方式来回收线程，此外也展示了多个线程可以指向同一个回调函数的情况。例程6通过阻塞方式回收线程几乎规定了线程回收的顺序，若最先回收的线程未退出，则一直会被阻塞，导致后续先退出的线程无法及时的回收。</p><p>​ 通过函数pthread_tryjoin_np，使用非阻塞回收，线程可以根据退出先后顺序自由的进行资源的回收。</p><p>测试例程8：（Phtread_txex8.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> 	#define _GNU_SOURCE 
<span class="token number">2</span> 	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> 	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> 	#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> 	#include <span class="token operator">&lt;</span>errno<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span> 
<span class="token number">7</span> 	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">8</span> 	<span class="token punctuation">{</span>
<span class="token number">9</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pthread:1 come!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">10</span>		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">11</span>			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">12</span>		<span class="token punctuation">}</span>
<span class="token number">13</span>	<span class="token punctuation">}</span>
<span class="token number">14</span>
<span class="token number">15</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">16</span>	<span class="token punctuation">{</span>
<span class="token number">17</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pthread:2 come!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">18</span>		<span class="token function">pthread_cancel</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//杀死线程1，使之强制退出</span>
<span class="token number">19</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">20</span>	<span class="token punctuation">}</span>
<span class="token number">21</span>
<span class="token number">22</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">23</span>	<span class="token punctuation">{</span>
<span class="token number">24</span>		<span class="token keyword">int</span> ret<span class="token punctuation">,</span>i<span class="token punctuation">,</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">25</span>		<span class="token keyword">void</span> <span class="token operator">*</span>Tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token number">26</span>		<span class="token class-name">pthread_t</span> tid<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">27</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">28</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">29</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">31</span>		<span class="token punctuation">}</span>
<span class="token number">32</span>		<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">33</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>tid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传输线程1的线程号</span>
<span class="token number">34</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">35</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">36</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">37</span>		<span class="token punctuation">}</span>
<span class="token number">38</span>		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//通过非阻塞方式收回线程，每次成功回收一个线程变量自增，直至2个线程全数回收</span>

<span class="token number">39</span>			<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">40</span>				<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pthread_tryjoin_np</span><span class="token punctuation">(</span>tid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">41</span>					<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pthread : %d exit !\\n&quot;</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span>					flag<span class="token operator">++</span><span class="token punctuation">;</span>	
<span class="token number">43</span>				<span class="token punctuation">}</span>
<span class="token number">44</span>			<span class="token punctuation">}</span>
<span class="token number">45</span>			<span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">46</span>		<span class="token punctuation">}</span>
<span class="token number">47</span>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">48</span>	<span class="token punctuation">}</span>
<span class="token number">49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image009.png" alt="MultiThread_Image009"></p><p>​ 例程8展示了如何利用pthread_cancel函数主动的将某个线程结束。27行与33行创建了线程，将第一个线程的线程号传参形式传入了第二个线程。第一个的线程执行死循环睡眠逻辑，理论上除非进程结束，其永远不会结束，但在第二个线程中调用了pthread_cancel函数，相当于向该线程发送一个退出的指令，导致线程被退出，最终资源被非阻塞回收掉。此例程要注意第32行的sleep函数，一定要确保线程1先执行，因线程是无序执行，故加入该睡眠函数控制顺序，在本章后续，会讲解通过加锁、信号量等手段来合理的控制线程的临界资源访问与线程执行顺序控制。</p><h2 id="_5-2-线程的控制" tabindex="-1"><a class="header-anchor" href="#_5-2-线程的控制" aria-hidden="true">#</a> 5.2 线程的控制</h2><h3 id="_5-2-1-多线程编临界资源访问" tabindex="-1"><a class="header-anchor" href="#_5-2-1-多线程编临界资源访问" aria-hidden="true">#</a> 5.2.1 多线程编临界资源访问</h3><p>​ 当线程在运行过程中，去操作公共资源，如全局变量的时候，可能会发生彼此“矛盾”现象。例如线程1企图想让变量自增，而线程2企图想要变量自减，两个线程存在互相竞争的关系导致变量永远处于一个“平衡状态”，两个线程互相竞争，线程1得到执行权后将变量自加，当线程2得到执行权后将变量自减，变量似乎永远在某个范围内浮动，无法到达期望数值，如例程9所示。</p><p>测试例程9：（Phtread_txex9.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> 	#define _GNU_SOURCE 
<span class="token number">2</span> 	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> 	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> 	#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> 	#include <span class="token operator">&lt;</span>errno<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span> 
<span class="token number">7</span> 
<span class="token number">8</span> 	<span class="token keyword">int</span> Num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">9</span> 
<span class="token number">10</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">11</span>	<span class="token punctuation">{</span>
<span class="token number">12</span>		<span class="token keyword">while</span><span class="token punctuation">(</span>Num <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">13</span>			Num<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token number">14</span>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Num = %d\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span>Num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">15</span>			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">16</span>		<span class="token punctuation">}</span>
<span class="token number">17</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">18</span>	<span class="token punctuation">}</span>
<span class="token number">19</span>
<span class="token number">20</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">21</span>	<span class="token punctuation">{</span>
<span class="token number">22</span>		<span class="token keyword">while</span><span class="token punctuation">(</span>Num <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">23</span>			Num<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token number">24</span>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Num = %d\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span>Num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">25</span>			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span>		<span class="token punctuation">}</span>
<span class="token number">27</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">28</span>	<span class="token punctuation">}</span>
<span class="token number">29</span>
<span class="token number">30</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">31</span>	<span class="token punctuation">{</span>
<span class="token number">32</span>		<span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token number">33</span>		<span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span>tid2<span class="token punctuation">;</span>
<span class="token number">34</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">36</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">38</span>		<span class="token punctuation">}</span>
<span class="token number">39</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">41</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">43</span>		<span class="token punctuation">}</span>
<span class="token number">44</span>		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">45</span>		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">46</span>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">47</span>	<span class="token punctuation">}</span>
<span class="token number">48</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image010.png" alt="MultiThread_Image010"></p><p>​ 为了解决上述对临界资源的竞争问题，pthread线程引出了互斥锁来解决临界资源访问。通过对临界资源加锁来保护资源只被单个线程操作，待操作结束后解锁，其余线程才可获得操作权。</p><h3 id="_5-2-2-互斥锁api简述" tabindex="-1"><a class="header-anchor" href="#_5-2-2-互斥锁api简述" aria-hidden="true">#</a> 5.2.2 互斥锁API简述</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>初始化互斥锁
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token class-name">phtread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">,</span>
<span class="token keyword">const</span> <span class="token class-name">pthread_mutexattr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 该函数作用为初始化一个互斥锁，一般情况申请一个全局的pthread_mutex_t类型的互斥锁变量，通过此函数完成锁内的初始化，第一个函数将该变量的地址传入，第二个参数为控制互斥锁的属性，一般为NULL。当函数成功后会返回0，代表初始化互斥锁成功。当然初始化互斥锁也可以调用宏来快速初始化：</p><p>pthread_mutex_t mutex = PTHREAD_MUTEX_INITALIZER;</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>互斥锁加锁（阻塞）<span class="token operator">/</span>解锁 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ lock函数与unlock函数分别为加锁解锁函数，只需要传入已经初始化好的pthread_mutex_t互斥锁变量，成功后会返回0。当某一个线程获得了执行权后，执行lock函数，一旦加锁成功后，其余线程遇到lock函数时候会发生阻塞，直至获取资源的线程执行unlock函数后，获得第二执行权的线程的阻塞模式被从开，同时也获取了lock，导致其余线程同样在阻塞，直至执行unlock被解锁。</p><p>​ 特别注意的是，当获取lock之后，必须在逻辑处理结束后执行unlock，否则会发生死锁现象！导致其余线程一直处于阻塞状态，无法执行下去。在使用互斥锁的时候，尤其要注意使用pthread_cancel函数，防止发生死锁现象！</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>互斥锁加锁（非阻塞）
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
 <span class="token keyword">int</span> <span class="token function">pthread_mutex_trylock</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 该函数同样也是一个线程加锁函数，但该函数是非阻塞模式通过返回值来判断是否加锁成功，用法与上述阻塞加速函数一致。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>互斥锁销毁
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_destory</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 该函数是用于销毁互斥锁的，传入互斥锁的地址，就可以完成互斥锁的销毁，成功返回0。</p><p>测试例程10：（Phtread_txex10.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> 	#define _GNU_SOURCE 
<span class="token number">2</span> 	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> 	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> 	#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> 	#include <span class="token operator">&lt;</span>errno<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span> 
<span class="token number">7</span> 	<span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span><span class="token comment">//互斥锁变量 一般申请全局变量</span>
<span class="token number">8</span> 
<span class="token number">9</span> 	<span class="token keyword">int</span> Num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//公共临界变量</span>
<span class="token number">10</span>
<span class="token number">11</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">12</span>	<span class="token punctuation">{</span>
<span class="token number">13</span>		<span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加锁 若有线程获得锁，则会阻塞</span>
<span class="token number">14</span>		<span class="token keyword">while</span><span class="token punctuation">(</span>Num <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">15</span>			Num<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token number">16</span>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Num = %d\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span>Num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">17</span>			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">18</span>		<span class="token punctuation">}</span>
<span class="token number">19</span>		<span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解锁</span>
<span class="token number">20</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//线程退出 pthread_join会回收资源</span>
<span class="token number">21</span>	<span class="token punctuation">}</span>
<span class="token number">22</span>
<span class="token number">23</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">24</span>	<span class="token punctuation">{</span>
<span class="token number">25</span>		<span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加锁 若有线程获得锁，则会阻塞</span>
<span class="token number">26</span>		<span class="token keyword">while</span><span class="token punctuation">(</span>Num <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">27</span>			Num<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token number">28</span>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Num = %d\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">,</span>Num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">29</span>			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>		<span class="token punctuation">}</span>
<span class="token number">31</span>		<span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解锁</span>
<span class="token number">32</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//线程退出 pthread_join会回收资源</span>
<span class="token number">33</span>	<span class="token punctuation">}</span>
<span class="token number">34</span>
<span class="token number">35</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">36</span>	<span class="token punctuation">{</span>
<span class="token number">37</span>		<span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token number">38</span>		<span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span>tid2<span class="token punctuation">;</span>
<span class="token number">39</span>		ret <span class="token operator">=</span> <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化互斥锁</span>
<span class="token number">40</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">41</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_mutex_init&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">43</span>		<span class="token punctuation">}</span>
<span class="token number">44</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程1</span>
<span class="token number">45</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">46</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">47</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">48</span>		<span class="token punctuation">}</span>
<span class="token number">49</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程2</span>
<span class="token number">50</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">51</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">52</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">53</span>		<span class="token punctuation">}</span>
<span class="token number">54</span>		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞回收线程1</span>
<span class="token number">55</span>		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞回收线程2</span>
<span class="token number">56</span>		<span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁互斥锁</span>
<span class="token number">57</span>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">58</span>	<span class="token punctuation">}</span>
<span class="token number">59</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image011.png" alt="MultiThread_Image011"></p><p>​ 上述例程通过加入互斥锁，保证了临界变量某一时刻只被某一线程控制，实现了临界资源的控制。需要说明的是，线程加锁在循环内与循环外的情况。本历程在进入while循环前进行了加锁操作，在循环结束后进行的解锁操作，如果将加锁解锁全部放入while循环内，作为单核的机器，执行结果无异，当有多核机器执行代码时，可能会发生“抢锁”现象，这取决于操作系统底层的实现。</p><h3 id="_5-2-3-多线程编执行顺序控制" tabindex="-1"><a class="header-anchor" href="#_5-2-3-多线程编执行顺序控制" aria-hidden="true">#</a> 5.2.3 多线程编执行顺序控制</h3><p>​ 解决了临界资源的访问，但似乎对线程的执行顺序无法得到控制，因线程都是无序执行，之前采用sleep强行延时的方法勉强可以控制执行顺序，但此方法在实际项目情况往往是不可取的，其仅仅可解决线程创建的顺序，当创建之后执行的顺序又不会受到控制，于是便引入了信号量的概念，解决线程执行顺序。</p><p>​ 例程11将展示线程的执行的随机性。</p><p>测试例程11：（Phtread_txex11.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> 	#define _GNU_SOURCE 
<span class="token number">2</span> 	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> 	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> 	#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> 	#include <span class="token operator">&lt;</span>errno<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span> 
<span class="token number">7</span> 	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">8</span> 	<span class="token punctuation">{</span>
<span class="token number">9</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Pthread Come!\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">10</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">11</span>	<span class="token punctuation">}</span>
<span class="token number">12</span>
<span class="token number">13</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">14</span>	<span class="token punctuation">{</span>
<span class="token number">15</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Pthread Come!\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">16</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">17</span>	<span class="token punctuation">}</span>
<span class="token number">18</span>
<span class="token number">19</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun3</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">20</span>	<span class="token punctuation">{</span>
<span class="token number">21</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Pthread Come!\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">22</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">23</span>	<span class="token punctuation">}</span>
<span class="token number">24</span>
<span class="token number">25</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">26</span>	<span class="token punctuation">{</span>
<span class="token number">27</span>		<span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token number">28</span>		<span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span>tid2<span class="token punctuation">,</span>tid3<span class="token punctuation">;</span>
<span class="token number">29</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">31</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">32</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">33</span>		<span class="token punctuation">}</span>
<span class="token number">34</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">36</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">38</span>		<span class="token punctuation">}</span>
<span class="token number">39</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid3<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun3<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">41</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">43</span>		<span class="token punctuation">}</span>
<span class="token number">44</span>		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">45</span>		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">46</span>		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid3<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">47</span>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">48</span>	<span class="token punctuation">}</span>
<span class="token number">49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image012.png" alt="MultiThread_Image012"></p><p>​ 通过上述例程可以发现，多次执行该函数其次序是无序的，线程之间的竞争无法控制，通过使用信号量来使得线程顺序为可控的。</p><h3 id="_5-2-4-信号量api简述" tabindex="-1"><a class="header-anchor" href="#_5-2-4-信号量api简述" aria-hidden="true">#</a> 5.2.4 信号量API简述</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>初始化信号量
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">,</span><span class="token keyword">int</span> pshared<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 该函数可以初始化一个信号量，第一个参数传入sem_t类型的地址，第二个参数传入0代表线程控制，否则为进程控制，第三个参数表示信号量的初始值，0代表阻塞，1代表运行。待初始化结束信号量后，若执行成功会返回0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>信号量PV操作（阻塞）
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ sem_wait函数作用为检测指定信号量是否有资源可用，若无资源可用会阻塞等待，若有资源可用会自动的执行“sem-1”的操作。所谓的“sem-1”是与上述初始化函数中第三个参数值一致，成功执行会返回0.</p><p>​ sem_post函数会释放指定信号量的资源，执行“sem+1”操作。</p><p>​ 通过以上2个函数可以完成所谓的PV操作，即信号量的申请与释放，完成对线程执行顺序的控制。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>信号量申请资源（非阻塞）
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">sem_trywait</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 与互斥锁一样，此函数是控制信号量申请资源的非阻塞函数，功能与sem_wait一致，唯一区别在于此函数为非阻塞。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>信号量销毁
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">sem_destory</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
成功：返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 该函数为信号量销毁函数，执行过后可将申请的信号量进行销毁。</p><p>测试例程12：（Phtread_txex12.c）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> 	#define _GNU_SOURCE 
<span class="token number">2</span> 	#include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> 	#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> 	#include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> 	#include <span class="token operator">&lt;</span>errno<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span> 	#include <span class="token operator">&lt;</span>semaphore<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">7</span> 
<span class="token number">8</span> 	<span class="token class-name">sem_t</span> sem1<span class="token punctuation">,</span>sem2<span class="token punctuation">,</span>sem3<span class="token punctuation">;</span><span class="token comment">//申请的三个信号量变量</span>
<span class="token number">9</span> 
<span class="token number">10</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">11</span>	<span class="token punctuation">{</span>
<span class="token number">12</span>		<span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因sem1本身有资源，所以不被阻塞 获取后sem1-1 下次会会阻塞</span>
<span class="token number">13</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Pthread Come!\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">14</span>		<span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使得sem2获取到资源</span>
<span class="token number">15</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">16</span>	<span class="token punctuation">}</span>
<span class="token number">17</span>
<span class="token number">18</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">19</span>	<span class="token punctuation">{</span>
<span class="token number">20</span>		<span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因sem2在初始化时无资源会被阻塞，直至14行代码执行 不被阻塞 sem2-1 下次会阻塞</span>
<span class="token number">21</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Pthread Come!\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">22</span>		<span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使得sem3获取到资源</span>
<span class="token number">23</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">24</span>	<span class="token punctuation">}</span>
<span class="token number">25</span>
<span class="token number">26</span>	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fun3</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">27</span>	<span class="token punctuation">{</span>
<span class="token number">28</span>		<span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因sem3在初始化时无资源会被阻塞，直至22行代码执行 不被阻塞 sem3-1 下次会阻塞</span>
<span class="token number">29</span>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:Pthread Come!\\n&quot;</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>		<span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使得sem1获取到资源</span>
<span class="token number">31</span>		<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">32</span>	<span class="token punctuation">}</span>
<span class="token number">33</span>
<span class="token number">34</span>	<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">35</span>	<span class="token punctuation">{</span>
<span class="token number">36</span>		<span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token number">37</span>		<span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span>tid2<span class="token punctuation">,</span>tid3<span class="token punctuation">;</span>
<span class="token number">38</span>		ret <span class="token operator">=</span> <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//初始化信号量1 并且赋予其资源</span>
<span class="token number">39</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">40</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;sem_init&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">41</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">42</span>		<span class="token punctuation">}</span>
<span class="token number">43</span>		ret <span class="token operator">=</span> <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化信号量2 让其阻塞</span>
<span class="token number">44</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">45</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;sem_init&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">46</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">47</span>		<span class="token punctuation">}</span>
<span class="token number">48</span>		ret <span class="token operator">=</span> <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem3<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化信号3 让其阻塞</span>
<span class="token number">49</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">50</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;sem_init&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">51</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">52</span>		<span class="token punctuation">}</span>
<span class="token number">53</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程1</span>
<span class="token number">54</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">55</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">56</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">57</span>		<span class="token punctuation">}</span>
<span class="token number">58</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程2</span>
<span class="token number">59</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">60</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">61</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">62</span>		<span class="token punctuation">}</span>
<span class="token number">63</span>		ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid3<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>fun3<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程3</span>
<span class="token number">64</span>		<span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">65</span>			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">66</span>			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">67</span>		<span class="token punctuation">}</span>
<span class="token number">68</span>		<span class="token comment">/*回收线程资源*/</span>
<span class="token number">69</span>		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">70</span>		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">71</span>		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid3<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">72</span>
<span class="token number">73</span>		<span class="token comment">/*销毁信号量*/</span>
<span class="token number">74</span>		<span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">75</span>		<span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">76</span>		<span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">77</span>
<span class="token number">78</span>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">79</span>	<span class="token punctuation">}</span>
<span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image013.png" alt="MultiThread_Image013"></p><p>​ 该例程加入了信号量的控制使得线程的执行顺序变为可控的，在初始化信号量时，将信号量1填入资源，使之不被sem_wait函数阻塞，在执行完逻辑后使用sem_pos函数来填入即将要执行的资源。当执行函数sem_wait后，会执行sem自减操作，使下一次竞争被阻塞，直至通过sem_pos被释放。</p><p>​ 上述例程因38行初始化信号量1时候，使其默认获取到资源，43、48行初始化信号量2、3时候，使之没有资源。于是在线程处理函数中，每个线程通过sem_wait函数来等待资源，发送阻塞现象。因信号量1初始值为有资源，故可以先执行线程1的逻辑。待执行完第12行sem_wait函数，会导致sem1-1，使得下一次此线程会被阻塞。继而执行至14行，通过sem_post函数使sem2信号量获取资源，从而冲破阻塞执行线程2的逻辑...以此类推完成线程的有序控制。</p><h2 id="_5-3-总结" tabindex="-1"><a class="header-anchor" href="#_5-3-总结" aria-hidden="true">#</a> 5.3 总结</h2><p>​ 有关多线程的创建流程下图所示，首先需要创建线程，一旦线程创建完成后，线程与线程之间会发生竞争执行，抢占时间片来执行线程逻辑。在创建线程时候，可以通过创建线程的第四个参数传入参数，在线程退出时亦可传出参数被线程回收函数所回收，获取到传出的参数。</p><p><img src="http://photos.100ask.net/NewHomeSite/MultiThread_Image014.png" alt="MultiThread_Image014"></p>`,128),r=n("p",null,"线程编程流程",-1),k=n("p",null,"​ 当多个线程出现后，会遇到同时操作临界公共资源的问题，当线程操作公共资源时需要对线程进行保护加锁，防止其与线程在此线程更改变量时同时更改变量，待逻辑执行完毕后再次解锁，使其余线程再度开始竞争。互斥锁创建流程下图所示。",-1),d=n("p",null,[n("img",{src:"http://photos.100ask.net/NewHomeSite/MultiThread_Image015.png",alt:"MultiThread_Image015"})],-1),m=n("p",null,"互斥锁编程流程",-1),v=n("p",null,"​ 当多个线程出现后，同时会遇到无序执行的问题。有时候需要对线程的执行顺序做出限定，变引入了信号量，通过PV操作来控制线程的执行顺序，下图所示。",-1),b=n("p",null,[n("img",{src:"http://photos.100ask.net/NewHomeSite/MultiThread_Image016.png",alt:"MultiThread_Image016"})],-1),h=n("p",null,"信号量编程流程",-1);function _(g,f){const s=e("center");return o(),c("div",null,[i,a(s,null,{default:t(()=>[r]),_:1}),k,d,a(s,null,{default:t(()=>[m]),_:1}),v,b,a(s,null,{default:t(()=>[h]),_:1})])}const y=p(u,[["render",_],["__file","05_MultiThread.html.vue"]]);export{y as default};
