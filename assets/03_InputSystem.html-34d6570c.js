import{_ as n,o as s,c as a,e}from"./app-21fd3c9b.js";const p={},t=e(`<h1 id="_3-输入系统" tabindex="-1"><a class="header-anchor" href="#_3-输入系统" aria-hidden="true">#</a> 3 输入系统</h1><h2 id="_3-1-什么是输入系统" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是输入系统" aria-hidden="true">#</a> 3.1 什么是输入系统？</h2><p>​ 在了解输入系统之前，先来了解什么是输入设备？常见的输入设备有键盘、鼠标、遥控杆、书写板、触摸屏等等，用户通过这些输入设备与Linux系统进行数据交换，Linux系统为了统一管控和处理这些设备，于是就实现了一套固定的与硬件无关的输入系统框架，供用户空间程序使用，这就是输入系统。</p><h2 id="_3-2-输入系统应用框架描述" tabindex="-1"><a class="header-anchor" href="#_3-2-输入系统应用框架描述" aria-hidden="true">#</a> 3.2 输入系统应用框架描述</h2><p>​ 在Linux输入系统中，主要分三层进行管理，分别是input core(输入系统核心层)、drivers(输入系统驱动层)以及event handlers(输入系统事件层)，如下图所示，这就是Linux输入系统的基本框架:</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image001.png" alt=""></p><p>​ 举个非常简单的例子，比如用户按下键盘里的其中一个按键，它遵循流程是这样的：</p><p>​ 按键按下--&gt;输入系统驱动层--&gt;输入系统核心层--&gt;输入系统事件层---&gt;用户空间</p><p>​ 对于应用程序软件编程的角度，我们只需要关注用户空间是怎么得到按键按下以后获取的是什么事件就可以了，例如我想知道我当前按下的按是短按还是长按？或者我想知道当前我按下键盘的是空格键还是回车键等等。</p><h2 id="_3-3-输入系统事件的读取与分析" tabindex="-1"><a class="header-anchor" href="#_3-3-输入系统事件的读取与分析" aria-hidden="true">#</a> 3.3 输入系统事件的读取与分析</h2><p>​ 用户空间的设备节点那么多，怎么知道当前是哪个设备上报的呢？例如想知道键盘是由哪个设备节点上报的，就可以通过以下这条指令来获取：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cat <span class="token operator">/</span>proc<span class="token operator">/</span>bus<span class="token operator">/</span>input<span class="token operator">/</span>devices
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 这条指令的含义就是获取与event对应的相关设备信息，在ubuntu系统上，我们输入这个指令可以看到以下结果：</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image002.png" alt=""></p><p>​ 那么这里的I、N、P、S、U、H、B对应的每一行是什么含义呢？</p><p><strong>I:id of the device(设备ID)</strong></p><p>该参数由结构体struct input_id来进行描述</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">41</span> <span class="token keyword">struct</span> <span class="token class-name">input_id</span> <span class="token punctuation">{</span>
<span class="token number">42</span> 	<span class="token comment">//总线类型</span>
<span class="token number">43</span> 	__u16 bustype<span class="token punctuation">;</span>
<span class="token number">44</span> 	<span class="token comment">//与厂商相关ID</span>
<span class="token number">45</span> 	__u16 vendor<span class="token punctuation">;</span>
<span class="token number">46</span> 	<span class="token comment">//与产品相关ID</span>
<span class="token number">47</span> 	__u16 product<span class="token punctuation">;</span>
<span class="token number">48</span> 	<span class="token comment">//版本ID</span>
<span class="token number">49</span> 	__u16 version<span class="token punctuation">;</span>
<span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>N:name of the device</strong></p><p>设备名称</p><p><strong>P:physical path to the device in the system hierarchy</strong></p><p>系统层次结构中设备的物理路径。</p><p><strong>S:sysfs path</strong></p><p>位于sys文件系统的路径</p><p><strong>U:unique identification code for the device(if device has it)</strong></p><p>设备的唯一标识码</p><p><strong>H:list of input handles associated with the device.</strong></p><p>与设备关联的输入句柄列表。</p><p><strong>B:bitmaps(位图)</strong></p><p>PROP:device properties and quirks.</p><p>EV:types of events supported by the device.</p><p>KEY:keys/buttons this device has.</p><p>MSC:miscellaneous events supported by the device.</p><p>LED:leds present on the device.</p><p>PROP:设备属性和怪癖。</p><p>EV:设备支持的事件类型。</p><p>KEY:此设备具有的键/按钮。</p><p>MSC:设备支持的其他事件。</p><p>LED:设备上的指示灯。</p><p>通过了解以上参数的含义，结合以下指令</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cat <span class="token operator">/</span>proc<span class="token operator">/</span>bus<span class="token operator">/</span>input<span class="token operator">/</span>devices
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示出来的信息很容易可以知道event1即是键盘上报的事件设备节点，通过读取这个event1即可获得当前用户按下的按键具体是哪个事件。</p><p><strong>使用cat命令来测试键盘事件</strong></p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image003.png" alt=""></p><p>当我们在终端输入</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cat <span class="token operator">/</span>dev<span class="token operator">/</span>input<span class="token operator">/</span>event1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 这条指令并按回车键后可以看到一堆乱码数据，这些数据我们看不懂，但是我们可以知道如果按下了按键，终端有反馈消息，这时候就知道这个事件就是我们当前操作的这个设备上报的事件，那么如何能让这些数据看得懂呢？这时候可以使用hexdump命令来读取键盘事件。</p><p><strong>使用hexdump命令来测试键盘事件</strong></p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image004.png" alt=""></p><p>这些数值是通过input_event结构体来上报的，它位于/usr/include/linux/input.h这个头文件，input_event结构体描述如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">24</span> <span class="token keyword">struct</span> <span class="token class-name">input_event</span> <span class="token punctuation">{</span>
<span class="token number">25</span> 	<span class="token comment">//事件发生的事件</span>
<span class="token number">26</span> 	<span class="token keyword">struct</span> <span class="token class-name">timeval</span> time<span class="token punctuation">;</span>
<span class="token number">27</span> 	<span class="token comment">//事件类型</span>
<span class="token number">28</span> 	__u16 type<span class="token punctuation">;</span>
<span class="token number">29</span> 	<span class="token comment">//事件值</span>
<span class="token number">30</span> 	__u16 code<span class="token punctuation">;</span>
<span class="token number">31</span> 	<span class="token comment">//该事件上报的数值</span>
<span class="token number">32</span> 	__s32 value<span class="token punctuation">;</span>
<span class="token number">33</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而input_event结构体中的time即是：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span>
<span class="token number">2</span> <span class="token punctuation">{</span>
<span class="token number">3</span> 	__time_t tv_sec<span class="token punctuation">;</span>        <span class="token comment">/* Seconds. */</span>
<span class="token number">4</span> 	__suseconds_t tv_usec<span class="token punctuation">;</span>    <span class="token comment">/*Microseconds. */</span>
<span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 其中tv_sec为Epoch到创建struct timeval时的秒数，tv_usec为微秒数，即秒后面的零头，Epoch的意思是指定为1970年一月一日凌晨零点零分零秒，格林威治时间。</p><p>​ 回到input_event结构体，事件类型type主要有以下三种，分别是：相对事件、绝对事件、键盘事件</p><p>​ 例如：鼠标就是一个相对事件，有些情况下也有可能是绝对事件，当移动鼠标的时候，type类型也就是底层上报给用户的事件类型，那么code表示的就是相对于鼠标当前的位置的X或者Y的坐标，value则表示相对于当前的位置偏移了多少。</p><p><strong>事件类型(type)</strong></p><p>文件头文件路径：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>linux<span class="token operator">/</span>input<span class="token operator">-</span>event<span class="token operator">-</span>codes<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然Linux内核版本较低的有可能在以下路径的这个头文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>linux<span class="token operator">/</span>input<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">34</span> <span class="token comment">/*
35  * Event types
36  */</span>
<span class="token number">37</span> 
<span class="token number">38</span> #define EV_SYN			<span class="token number">0x00</span>	<span class="token comment">//同步事件</span>
<span class="token number">39</span> #define EV_KEY			<span class="token number">0x01</span>	<span class="token comment">//按键事件</span>
<span class="token number">40</span> #define EV_REL			<span class="token number">0x02</span>	<span class="token comment">//相对事件</span>
<span class="token number">41</span> #define EV_ABS			<span class="token number">0x03</span>	<span class="token comment">//绝对事件</span>
<span class="token number">42</span> #define EV_MSC			<span class="token number">0x04</span>
<span class="token number">43</span> #define EV_SW			<span class="token number">0x05</span>
<span class="token number">44</span> #define EV_LED			<span class="token number">0x11</span>
<span class="token number">45</span> #define EV_SND			<span class="token number">0x12</span>
<span class="token number">46</span> #define EV_REP			<span class="token number">0x14</span>
<span class="token number">47</span> #define EV_FF			<span class="token number">0x15</span>
<span class="token number">48</span> #define EV_PWR			<span class="token number">0x16</span>
<span class="token number">49</span> #define EV_FF_STATUS		<span class="token number">0x17</span>
<span class="token number">50</span> #define EV_MAX			<span class="token number">0x1f</span>
<span class="token number">51</span> #define <span class="token function">EV_CNT</span>			<span class="token punctuation">(</span>EV_MAX<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>事件值(code)</strong></p><p>由于事件值种类繁多，这里就不一一列举出来，这里举例键盘的部分事件值:</p><p>文件头文件路径：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>linux<span class="token operator">/</span>input<span class="token operator">-</span>event<span class="token operator">-</span>codes<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然Linux内核版本较低的有可能在以下路径的这个头文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>linux<span class="token operator">/</span>input<span class="token punctuation">.</span>h
<span class="token number">64</span> <span class="token comment">/*
65  * Keys and buttons
66  *
67  * Most of the keys/buttons are modeled after USB HUT 1.12
68  * (see http://www.usb.org/developers/hidpage).
69  * Abbreviations in the comments:
70  * AC - Application Control
71  * AL - Application Launch Button
72  * SC - System Control
73  */</span>
<span class="token number">74</span> 
<span class="token number">75</span> #define KEY_RESERVED		<span class="token number">0</span>
<span class="token number">76</span> #define KEY_ESC			<span class="token number">1</span>
<span class="token number">77</span> #define KEY_1			<span class="token number">2</span>
<span class="token number">78</span> #define KEY_2			<span class="token number">3</span>
<span class="token number">79</span> #define KEY_3			<span class="token number">4</span>
<span class="token number">80</span> #define KEY_4			<span class="token number">5</span>
<span class="token number">81</span> #define KEY_5			<span class="token number">6</span>
<span class="token number">82</span> #define KEY_6			<span class="token number">7</span>
<span class="token number">83</span> #define KEY_7			<span class="token number">8</span>
<span class="token number">84</span> #define KEY_8			<span class="token number">9</span>
<span class="token number">85</span> #define KEY_9			<span class="token number">10</span>
<span class="token number">86</span> #define KEY_0			<span class="token number">11</span>
<span class="token number">87</span> #define KEY_MINUS		<span class="token number">12</span>
<span class="token number">88</span> #define KEY_EQUAL		<span class="token number">13</span>
<span class="token number">89</span> #define KEY_BACKSPACE		<span class="token number">14</span>
<span class="token number">90</span> #define KEY_TAB			<span class="token number">15</span>
<span class="token number">91</span> #define KEY_Q			<span class="token number">16</span>
<span class="token number">92</span> #define KEY_W			<span class="token number">17</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然还有鼠标事件值、摇杆事件值、触摸屏事件值等等。</p><p><strong>该事件上报的数值(value)</strong></p><p>​ 这部分上面已经举了鼠标的案例进行了介绍，接下来我们就通过应用程序来获取事件，后面章节将会通过鼠标、键盘以及触摸屏三个案例，进一步的了解输入系统的应用编程。</p><h2 id="_3-4-输入系统应用编程实战一-通用usb鼠标事件读取" tabindex="-1"><a class="header-anchor" href="#_3-4-输入系统应用编程实战一-通用usb鼠标事件读取" aria-hidden="true">#</a> 3.4 输入系统应用编程实战一：通用USB鼠标事件读取</h2><p>​ 根据前面章节的讲解，如果我们需要获取USB鼠标的事件，首先我们要先通过cat /proc/bus/input/devices这个指令查询与USB鼠标事件对应的相关设备信息，通过实际测试得知，event2为USB鼠标上报的事件节点。</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image005.png" alt=""></p><p>接下来，通过hexdump命令测试一下鼠标事件的输出:</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image006.png" alt=""></p><p>​ 具体上报的数值是什么含义可以结合3.3章节进行分析，这里就不再进行阐述，本节的目的是编写一个获取通用USB鼠标的事件的应用程序，要获取一个事件，我们需要了解以下几个部分。</p><p><strong>1</strong> <strong>设备上报事件类型(type)</strong></p><p>通过3.3章节，我们知道找到对应的事件类型的定义：</p><p>文件头文件路径：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>linux<span class="token operator">/</span>input<span class="token operator">-</span>event<span class="token operator">-</span>codes<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然Linux内核版本较低的有可能在以下路径的这个头文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>linux<span class="token operator">/</span>input<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">34</span> <span class="token comment">/*
35  * Event types
36  */</span>
<span class="token number">37</span> 
<span class="token number">38</span> #define EV_SYN			<span class="token number">0x00</span>	<span class="token comment">//同步事件</span>
<span class="token number">39</span> #define EV_KEY			<span class="token number">0x01</span>	<span class="token comment">//按键事件</span>
<span class="token number">40</span> #define EV_REL			<span class="token number">0x02</span>	<span class="token comment">//相对事件</span>
<span class="token number">41</span> #define EV_ABS			<span class="token number">0x03</span>	<span class="token comment">//绝对事件</span>
<span class="token number">42</span> #define EV_MSC			<span class="token number">0x04</span>
<span class="token number">43</span> #define EV_SW			<span class="token number">0x05</span>
<span class="token number">44</span> #define EV_LED			<span class="token number">0x11</span>
<span class="token number">45</span> #define EV_SND			<span class="token number">0x12</span>
<span class="token number">46</span> #define EV_REP			<span class="token number">0x14</span>
<span class="token number">47</span> #define EV_FF			<span class="token number">0x15</span>
<span class="token number">48</span> #define EV_PWR			<span class="token number">0x16</span>
<span class="token number">49</span> #define EV_FF_STATUS		<span class="token number">0x17</span>
<span class="token number">50</span> #define EV_MAX			<span class="token number">0x1f</span>
<span class="token number">51</span> #define <span class="token function">EV_CNT</span>			<span class="token punctuation">(</span>EV_MAX<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2</strong> <strong>设备上报的事件值(code)</strong></p><p>由于本节我们写的是通用USB鼠标的应用程序，所以我们找到鼠标相关的code,如下：</p><p>文件头文件路径：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>linux<span class="token operator">/</span>input<span class="token operator">-</span>event<span class="token operator">-</span>codes<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然Linux内核版本较低的有可能在以下路径的这个头文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>linux<span class="token operator">/</span>input<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">696</span> <span class="token comment">/*
697  * Relative axes
698  */</span>
<span class="token number">699</span> 
<span class="token number">700</span> #define REL_X			<span class="token number">0x00</span>	<span class="token comment">//相对X坐标</span>
<span class="token number">701</span> #define REL_Y			<span class="token number">0x01</span>	<span class="token comment">//相对Y坐标</span>
<span class="token number">702</span> #define REL_Z			<span class="token number">0x02</span>
<span class="token number">703</span> #define REL_RX			<span class="token number">0x03</span>
<span class="token number">704</span> #define REL_RY			<span class="token number">0x04</span>
<span class="token number">705</span> #define REL_RZ			<span class="token number">0x05</span>
<span class="token number">706</span> #define REL_HWHEEL		<span class="token number">0x06</span>
<span class="token number">707</span> #define REL_DIAL		<span class="token number">0x07</span>
<span class="token number">708</span> #define REL_WHEEL		<span class="token number">0x08</span>
<span class="token number">709</span> #define REL_MISC		<span class="token number">0x09</span>
<span class="token number">710</span> #define REL_MAX			<span class="token number">0x0f</span>
<span class="token number">711</span> #define <span class="token function">REL_CNT</span>			<span class="token punctuation">(</span>REL_MAX<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们暂时只会用来REL_X和REL_Y这两个参数。</p><p>​ 那么所谓的value,就是选择具体的事件类型(type)和具体的事件值(code)以后所反应出来的值，鼠标就是相对于当前X或者相对于当前Y的值，接下来，我们来看一下如何来读取鼠标事件。</p><p>在编写input应用程序之前，在程序中需要包含以下头文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/input.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>程序编写步骤：</p><p>1 定义一个结构体变量input_event用于描述input事件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">input_event</span> event_mouse <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2 打开input设备的事件节点，这里我们获取的通用USB鼠标是event2</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/input/event2&quot;</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3 读取事件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">read</span><span class="token punctuation">(</span>fd <span class="token punctuation">,</span><span class="token operator">&amp;</span>event_mouse <span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>event_mouse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4 根据上报的事件进行处理</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//判断鼠标上报的类型，可能为绝对事件，也有可能是相对事件</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>EV_ABS <span class="token operator">==</span> event_mouse<span class="token punctuation">.</span>type <span class="token operator">||</span> EV_REL <span class="token operator">==</span> event_mouse<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">//code表示相对位移X或者Y，当判断是X时，打印X的相对位移value</span>
   <span class="token comment">//当判断是Y时，打印Y的相对位移value</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>event_mouse<span class="token punctuation">.</span>code <span class="token operator">==</span> REL_X<span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;event_mouse.code_X:%d\\n&quot;</span><span class="token punctuation">,</span> event_mouse<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;event_mouse.value_X:%d\\n&quot;</span><span class="token punctuation">,</span> event_mouse<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>event_mouse<span class="token punctuation">.</span>code <span class="token operator">==</span> REL_Y<span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;event_mouse.code_Y:%d\\n&quot;</span><span class="token punctuation">,</span> event_mouse<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;event_mouse.value_Y:%d\\n&quot;</span><span class="token punctuation">,</span> event_mouse<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5 关闭文件描述符</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不难发现，获取一个输入系统事件，也是标准的文件操作，这体现了Linux一切皆文件的思想。</p><p>完整的程序案例如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">02</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">03</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">04</span> #include <span class="token operator">&lt;</span>fcntl<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">05</span> #include <span class="token operator">&lt;</span>linux<span class="token operator">/</span>input<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">06</span> 
<span class="token number">07</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">08</span> <span class="token punctuation">{</span>
<span class="token number">09</span>     <span class="token comment">//1、定义一个结构体变量用来描述input事件</span>
<span class="token number">10</span>     <span class="token keyword">struct</span> <span class="token class-name">input_event</span> event_mouse <span class="token punctuation">;</span>
<span class="token number">11</span>     <span class="token comment">//2、打开input设备的事件节点  我的通用USB鼠标事件的节点是event2</span>
<span class="token number">12</span>     <span class="token keyword">int</span> fd    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span>
<span class="token number">13</span> 	   fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/input/event2&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">14</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> fd<span class="token punctuation">)</span>
<span class="token number">15</span>     <span class="token punctuation">{</span>
<span class="token number">16</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;open mouse event fair!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">17</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span>
<span class="token number">18</span>     <span class="token punctuation">}</span>
<span class="token number">19</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">20</span>     <span class="token punctuation">{</span>
<span class="token number">21</span>         <span class="token comment">//3、读事件</span>
<span class="token number">22</span>         <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>event_mouse<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>event_mouse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">23</span> 		   <span class="token keyword">if</span><span class="token punctuation">(</span>EV_ABS <span class="token operator">==</span> event_mouse<span class="token punctuation">.</span>type <span class="token operator">||</span> EV_REL <span class="token operator">==</span> event_mouse<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
<span class="token number">24</span> 		   <span class="token punctuation">{</span>
<span class="token number">25</span>             <span class="token comment">//code表示相对位移X或者Y，当判断是X时，打印X的相对位移value</span>
<span class="token number">26</span> 			   <span class="token comment">//当判断是Y时，打印Y的相对位移value</span>
<span class="token number">27</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>event_mouse<span class="token punctuation">.</span>code <span class="token operator">==</span> REL_X<span class="token punctuation">)</span>
<span class="token number">28</span>             <span class="token punctuation">{</span>
<span class="token number">29</span> 				   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;event_mouse.code_X:%d\\n&quot;</span><span class="token punctuation">,</span> event_mouse<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span>                 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;event_mouse.value_X:%d\\n&quot;</span><span class="token punctuation">,</span> event_mouse<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">31</span>             <span class="token punctuation">}</span>
<span class="token number">32</span>             <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>event_mouse<span class="token punctuation">.</span>code <span class="token operator">==</span> REL_Y<span class="token punctuation">)</span>
<span class="token number">33</span>             <span class="token punctuation">{</span>
<span class="token number">34</span>                 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;event_mouse.code_Y:%d\\n&quot;</span><span class="token punctuation">,</span> event_mouse<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>                 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;event_mouse.value_Y:%d\\n&quot;</span><span class="token punctuation">,</span> event_mouse<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">36</span>             <span class="token punctuation">}</span>
<span class="token number">37</span> 		<span class="token punctuation">}</span>
<span class="token number">38</span>     <span class="token punctuation">}</span>
<span class="token number">39</span>     <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span>     <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token number">41</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码编写完毕后，然后执行</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>gcc test_mouse<span class="token punctuation">.</span>c <span class="token operator">-</span>o test_mouse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译程序：</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image007.png" alt=""></p><p>编译成功后会生成test_mouse，接下来执行test_mouse这个程序。</p><p>当鼠标左右移动的时候上报的事件：</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image008.png" alt=""></p><p>这时候可以看到，只有相对于X的事件值在发生，这时候打印的value是X方向相对于原点坐标的偏移值。</p><p>当鼠标上下移动的时候上报的事件：</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image009.png" alt=""></p><p>这时候可以看到，只有相对于Y的事件值在发生，这时候打印的value是Y方向相对于原点坐标的偏移值。</p><h2 id="_3-5-输入系统应用编程实战二-通用键盘事件读取" tabindex="-1"><a class="header-anchor" href="#_3-5-输入系统应用编程实战二-通用键盘事件读取" aria-hidden="true">#</a> 3.5 输入系统应用编程实战二：通用键盘事件读取</h2><p>​ 如何获取键盘事件在3.3章节已经有了相应的介绍，这里就不再写出来，本节实现的是通用键盘事件的获取，结合3.4章节获取鼠标事件的方式，这里通用键盘事件的节点为event1,通过结合3.3章节与3.4章节，编写步骤如下：</p><p>在编写input应用程序之前，在程序中需要包含以下头文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/input.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>程序编写步骤：</p><p>1 定义一个结构体变量input_event用于描述input事件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">input_event</span> event_keyboard <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2 打开input设备的事件节点，我的通用键盘事件的节点是event1</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/input/event1&quot;</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3 读取事件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">read</span><span class="token punctuation">(</span>fd <span class="token punctuation">,</span><span class="token operator">&amp;</span>event_keyboard <span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>event_keyboard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4 根据上报的事件进行处理</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//判断键盘事件上报的类型</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>EV_KEY <span class="token operator">==</span> event_keyboard<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> event_keyboard<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;事件类型:%d  事件值:%d 按下\\n&quot;</span><span class="token punctuation">,</span> event_keyboard<span class="token punctuation">.</span>type<span class="token punctuation">,</span> 				         event_keyboard<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> event_keyboard<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;事件类型:%d  事件值:%d 释放\\n&quot;</span><span class="token punctuation">,</span> event_keyboard<span class="token punctuation">.</span>type<span class="token punctuation">,</span> event_keyboard<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5 关闭文件描述符</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完整程序案例实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">02</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">03</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">04</span> #include <span class="token operator">&lt;</span>fcntl<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">05</span> #include <span class="token operator">&lt;</span>linux<span class="token operator">/</span>input<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">06</span> 
<span class="token number">07</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">08</span> <span class="token punctuation">{</span>
<span class="token number">09</span>     <span class="token comment">//1、定义一个结构体变量用来描述input事件</span>
<span class="token number">10</span>     <span class="token keyword">struct</span> <span class="token class-name">input_event</span> event_keyboard <span class="token punctuation">;</span>
<span class="token number">11</span>     <span class="token comment">//2、打开input设备的事件节点  我的通用键盘事件的节点是event1</span>
<span class="token number">12</span>     <span class="token keyword">int</span> fd    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span>
<span class="token number">13</span> 	   fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/input/event1&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">14</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> fd<span class="token punctuation">)</span>
<span class="token number">15</span>     <span class="token punctuation">{</span>
<span class="token number">16</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;open mouse event fair!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">17</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span>
<span class="token number">18</span>     <span class="token punctuation">}</span>
<span class="token number">19</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">20</span>     <span class="token punctuation">{</span>
<span class="token number">21</span>         <span class="token comment">//3、读事件</span>
<span class="token number">22</span>         <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>event_keyboard<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>event_keyboard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">23</span> 		   <span class="token keyword">if</span><span class="token punctuation">(</span>EV_KEY <span class="token operator">==</span> event_keyboard<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
<span class="token number">24</span> 		   <span class="token punctuation">{</span>
<span class="token number">25</span> 				<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> event_keyboard<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token number">26</span> 					<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;事件类型:%d  事件值:%d 按下\\n&quot;</span><span class="token punctuation">,</span>event_keyboard<span class="token punctuation">.</span>type<span class="token punctuation">,</span>event_keyboard<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">27</span> 				<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> event_keyboard<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token number">28</span> 					<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;事件类型:%d  事件值:%d 释放\\n&quot;</span><span class="token punctuation">,</span>event_keyboard<span class="token punctuation">.</span>type<span class="token punctuation">,</span>event_keyboard<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">29</span> 		<span class="token punctuation">}</span>
<span class="token number">30</span>     <span class="token punctuation">}</span>
<span class="token number">31</span>     <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">32</span>     <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token number">33</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 不难发现，通用USB键盘程序编写步骤与通用USB鼠标程序编写步骤几乎一样，区别只是读取的事件类型以及后面处理的数据value不同。</p><p>代码编写完毕后，然后执行</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>gcc test_keyboard<span class="token punctuation">.</span>c <span class="token operator">-</span>o test_keyboard
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译程序：</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image010.png" alt=""></p><p>编译成功后会生成test_keyboard，接下来执行test_keyboard这个程序。</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image011.png" alt=""></p><p>当按下按键时候，可以观察到按键的按下和释放的过程，这其实就是同一个事件下的两个不同的状态。</p><h2 id="_3-6-输入系统应用编程实战三-百问网imx6ul开发板触摸屏事件读取" tabindex="-1"><a class="header-anchor" href="#_3-6-输入系统应用编程实战三-百问网imx6ul开发板触摸屏事件读取" aria-hidden="true">#</a> 3.6 输入系统应用编程实战三：百问网imx6ul开发板触摸屏事件读取</h2><p>​ 在前面，我们已经熟悉了鼠标、键盘的基本操作，但发现一个规律，那就是编程方法类似，唯一不同的地方就是获取的事件类型以及事件值不同，那么触摸屏在input系统中是一类什么事件呢？</p><p>​ 一般情况下，触摸屏在input系统中属于绝对事件，也就是触摸的坐标点X和Y会在屏幕的分辨率范围内上报一个绝对的坐标。</p><p>绝对事件对应的值为：EV_ABS</p><p>相应X和Y分量的值分别为：</p><p>ABS_MT_POSITION_X、ABS_MT_POSITION_Y</p><p>通过结合前面的章节内容，很容易编写如下程序：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">02</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">03</span> #include <span class="token operator">&lt;</span>fcntl<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">04</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">05</span> #include <span class="token operator">&lt;</span>linux<span class="token operator">/</span>input<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">06</span> 
<span class="token number">07</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token number">08</span> <span class="token punctuation">{</span>
<span class="token number">09</span>     <span class="token keyword">int</span> tp_fd  <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span>
<span class="token number">10</span>     <span class="token keyword">int</span> tp_ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span>
<span class="token number">11</span>     <span class="token keyword">int</span> touch_x<span class="token punctuation">,</span>touch_y <span class="token punctuation">;</span>
<span class="token number">12</span>     <span class="token keyword">struct</span> <span class="token class-name">input_event</span> imx6ull_ts <span class="token punctuation">;</span>  
<span class="token number">13</span>     <span class="token comment">//1、打开触摸屏事件节点</span>
<span class="token number">14</span>     tp_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/input/event1&quot;</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">15</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>tp_fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">16</span>     <span class="token punctuation">{</span>
<span class="token number">17</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;open /dev/input/event1 fail!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">18</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span>
<span class="token number">19</span>     <span class="token punctuation">}</span>
<span class="token number">20</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">21</span>     <span class="token punctuation">{</span>  
<span class="token number">22</span> 	 		<span class="token comment">//2、获取触摸屏相应的事件，并打印出当前触摸的坐标</span>
<span class="token number">23</span>          <span class="token function">read</span><span class="token punctuation">(</span>tp_fd <span class="token punctuation">,</span><span class="token operator">&amp;</span>imx6ull_ts <span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>imx6ull_ts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token number">24</span>          <span class="token keyword">switch</span><span class="token punctuation">(</span>imx6ull_ts<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
<span class="token number">25</span> 	 		<span class="token punctuation">{</span>  
<span class="token number">26</span> 	    		<span class="token keyword">case</span> EV_ABS<span class="token operator">:</span>  
<span class="token number">27</span> 		 		<span class="token keyword">if</span><span class="token punctuation">(</span>imx6ull_ts<span class="token punctuation">.</span>code <span class="token operator">==</span> ABS_MT_POSITION_X<span class="token punctuation">)</span>  
<span class="token number">28</span> 		    		touch_x <span class="token operator">=</span> imx6ull_ts<span class="token punctuation">.</span>value <span class="token punctuation">;</span>
<span class="token number">29</span> 		 		<span class="token keyword">if</span><span class="token punctuation">(</span>imx6ull_ts<span class="token punctuation">.</span>code <span class="token operator">==</span> ABS_MT_POSITION_Y<span class="token punctuation">)</span> 
<span class="token number">30</span> 		    		touch_y <span class="token operator">=</span> imx6ull_ts<span class="token punctuation">.</span>value <span class="token punctuation">;</span>
<span class="token number">31</span> 		 		<span class="token keyword">break</span> <span class="token punctuation">;</span>
<span class="token number">32</span> 		 		defalut<span class="token operator">:</span>  
<span class="token number">33</span> 		 		<span class="token keyword">break</span> <span class="token punctuation">;</span>  
<span class="token number">34</span> 	 		<span class="token punctuation">}</span>     	
<span class="token number">35</span> 	 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;touch_x:%d touch_y:%d\\n&quot;</span><span class="token punctuation">,</span>touch_x<span class="token punctuation">,</span>touch_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">36</span> 	 		<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>     <span class="token punctuation">}</span>	
<span class="token number">38</span>     <span class="token function">close</span><span class="token punctuation">(</span>tp_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">39</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">40</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码编写完毕后，然后执行</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>gcc test_touchscreen<span class="token punctuation">.</span>c <span class="token operator">-</span>o test_touchscreen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>交叉编译程序：(注意这里是要在开发板运行，不是在PC端)</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image012.png" alt=""></p><p>接下来启动开发板，然后串口终端输出rz命令，等待接收PC端的文件，这里我们将test_touchscreen这个文件传输到开发板。</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image013.png" alt=""></p><p>具体操作步骤可参考第11章：PC和开发板之间传输文件</p><p>接下来给test_touchscreen添加可执行权限:</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image014.png" alt=""></p><p>执行test_touchscreen，然后用手触摸屏，可以看到有相应的坐标值打印：</p><p><img src="http://photos.100ask.net/NewHomeSite/InputSystem_Image015.png" alt=""></p>`,164),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","03_InputSystem.html.vue"]]);export{r as default};
