import{_ as l,r as i,o as s,c as h,d as n,w as d,b as e,e as r,a as t}from"./app-21fd3c9b.js";const o={},c=r('<h1 id="常见网络性能分析数据" tabindex="-1"><a class="header-anchor" href="#常见网络性能分析数据" aria-hidden="true">#</a> 常见网络性能分析数据</h1><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1 前言</h2><h3 id="_1-1-读者对象" tabindex="-1"><a class="header-anchor" href="#_1-1-读者对象" aria-hidden="true">#</a> 1.1 读者对象</h3><p>本文档（本指南）主要适用于以下人员：</p><p>• 技术支持工程师</p><p>• 软件开发工程师</p><p>• AI 应用案客户</p><h2 id="_2-正文" tabindex="-1"><a class="header-anchor" href="#_2-正文" aria-hidden="true">#</a> 2 正文</h2><h3 id="_2-1-npu-开发简介" tabindex="-1"><a class="header-anchor" href="#_2-1-npu-开发简介" aria-hidden="true">#</a> 2.1 NPU 开发简介</h3><p>• 支持int8/uint8/int16 量化精度，运算性能可达1TOPS.</p><p>• 相较于GPU 作为AI 运算单元的大型芯片方案，功耗不到GPU 所需要的1%.</p><p>• 可直接导入Caffe, TensorFlow, Onnx, TFLite，Keras, Darknet, pyTorch 等模型格式.</p><p>• 提供AI 开发工具：支持模型快速转换、支持开发板端侧转换API、支持TensorFlow, TF Lite, Caffe, ONNX, Darknet, pyTorch 等模型.</p><p>• 提供AI 应用开发接口：提供NPU 跨平台API.</p><h3 id="_2-2-开发流程" tabindex="-1"><a class="header-anchor" href="#_2-2-开发流程" aria-hidden="true">#</a> 2.2 开发流程</h3><p>NPU 开发完整的流程如下图所示：</p><p><img src="http://photos.100ask.net/allwinner-docs/v853/AIApplication/image-20221208105235547.png" alt="image-20221208105235547"></p>',17),p=t("h3",{id:"_2-3-常见网络benchmark",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2-3-常见网络benchmark","aria-hidden":"true"},"#"),e(" 2.3 常见网络benchmark")],-1),_=t("p",null,[t("img",{src:"http://photos.100ask.net/allwinner-docs/v853/AIApplication/image-20221208105336553.png",alt:"image-20221208105336553"})],-1),y=t("p",null,"以上数据是裸机程序跑网络的数据，并未考虑到方案中的其它应用。",-1),x=t("h3",{id:"_2-4-内存分析数据",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2-4-内存分析数据","aria-hidden":"true"},"#"),e(" 2.4 内存分析数据")],-1),g=t("p",null,"方案应用场景中的内存消耗数据分析.",-1),m=t("p",null,"代码和数据部分的占用，包括KMD 和UMD 本身占用的空间大小, 大约180k.",-1),u=r('<table><thead><tr><th style="text-align:center;"></th><th>text</th><th>data</th><th>bss</th><th>总计</th></tr></thead><tbody><tr><td style="text-align:center;">内核态</td><td>55164</td><td>920</td><td>388</td><td>56472</td></tr><tr><td style="text-align:center;">用户态</td><td>99739+22656</td><td>604+484</td><td>388+72</td><td>123943</td></tr><tr><td style="text-align:center;">总计</td><td>99739+22656+55164=177559</td><td>608+484+920=2008</td><td>388+72+388=848</td><td>180415</td></tr></tbody></table><p>Yolov3 模型的内存数据统计，运行时消耗约48M 内存。</p>',2),b=r('<table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">total video memory</th><th style="text-align:center;">total system memory</th><th style="text-align:center;">viplite driver code size</th><th style="text-align:center;">total</th></tr></thead><tbody><tr><td style="text-align:center;">大小</td><td style="text-align:center;">48460032</td><td style="text-align:center;">81500</td><td style="text-align:center;">180415</td><td style="text-align:center;">48721947</td></tr><tr><td style="text-align:center;">占比</td><td style="text-align:center;">99.46%</td><td style="text-align:center;">0.17%</td><td style="text-align:center;">0.37%</td><td style="text-align:center;">100%</td></tr></tbody></table><p>yolov3-tiny 模型的内存数据统计，运行时消耗月6.8M 内存。</p>',2),f=r('<table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">total viedo memory</th><th style="text-align:center;">total system memory</th><th style="text-align:center;">viplite driver code size</th><th style="text-align:center;">total</th></tr></thead><tbody><tr><td style="text-align:center;">大小</td><td style="text-align:center;">6710784</td><td style="text-align:center;">20596</td><td style="text-align:center;">180415</td><td style="text-align:center;">6911795</td></tr><tr><td style="text-align:center;">占比</td><td style="text-align:center;">97.092%</td><td style="text-align:center;">0.307%</td><td style="text-align:center;">2.61%</td><td style="text-align:center;">100%</td></tr></tbody></table><p>帧率，带宽等数据待补充.</p>',2);function v(k,N){const a=i("center");return s(),h("div",null,[c,n(a,null,{default:d(()=>[e("图2-1: npu_1.png")]),_:1}),p,_,n(a,null,{default:d(()=>[e("图2-2: NPU benchmark")]),_:1}),y,x,g,m,n(a,null,{default:d(()=>[e("表2-1: code 占用大小")]),_:1}),u,n(a,null,{default:d(()=>[e("表2-2: yolov3 内存统计")]),_:1}),b,n(a,null,{default:d(()=>[e("表2-3: yolov3-tiny 内存统计")]),_:1}),f])}const A=l(o,[["render",v],["__file","12-CommonNetworkPerformance.html.vue"]]);export{A as default};
