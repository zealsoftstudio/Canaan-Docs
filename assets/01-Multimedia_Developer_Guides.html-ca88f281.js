import{_ as t,r as l,o as p,c as r,a as e,b as a,d as i,e as s}from"./app-21fd3c9b.js";const d={},c=s(`<h1 id="多媒体开发指南" tabindex="-1"><a class="header-anchor" href="#多媒体开发指南" aria-hidden="true">#</a> 多媒体开发指南</h1><h2 id="_1-encoder-api" tabindex="-1"><a class="header-anchor" href="#_1-encoder-api" aria-hidden="true">#</a> 1 Encoder API</h2><h3 id="_1-1-头文件说明" tabindex="-1"><a class="header-anchor" href="#_1-1-头文件说明" aria-hidden="true">#</a> 1.1 头文件说明</h3><p>k510_buildroot/package/encode_app/enc_interface.h</p><h3 id="_1-2-api-函数说明" tabindex="-1"><a class="header-anchor" href="#_1-2-api-函数说明" aria-hidden="true">#</a> 1.2 API 函数说明</h3><h4 id="_1-2-1-videoencoder-create" tabindex="-1"><a class="header-anchor" href="#_1-2-1-videoencoder-create" aria-hidden="true">#</a> 1.2.1 VideoEncoder_Create</h4><p>【描述】</p><p>创建视频编码器</p><p>【语法】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>EncoderHandle<span class="token operator">*</span> <span class="token function">VideoEncoder_Create</span><span class="token punctuation">(</span>EncSettings <span class="token operator">*</span>pCfg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【参数】</p><p>pCfg：输入编码配置参数</p><table><thead><tr><th style="text-align:center;">参数名</th><th style="text-align:left;">参数解释</th><th style="text-align:center;">取值范围</th><th>适用编码模块</th></tr></thead><tbody><tr><td style="text-align:center;">channel</td><td style="text-align:left;">通道号,最多支持8个编码通道</td><td style="text-align:center;">[0，7]</td><td>jpeg、avc</td></tr><tr><td style="text-align:center;">width</td><td style="text-align:left;">编码图像宽度</td><td style="text-align:center;">avc: [128,2048], multiple of 8 <br> jpeg: up to 8192, multiple of 16</td><td>jpeg、avc</td></tr><tr><td style="text-align:center;">height</td><td style="text-align:left;">编码图像高度</td><td style="text-align:center;">avc: [64,2048], multiple of 8 <br> jpeg: up to 8192, multiple of 2</td><td>jpeg、avc</td></tr><tr><td style="text-align:center;">FrameRate</td><td style="text-align:left;">帧率,只能配置为固定几个值</td><td style="text-align:center;">(25,30,50,60,75)</td><td>jpeg、avc</td></tr><tr><td style="text-align:center;">rcMode</td><td style="text-align:left;">码率控制模式 0:CONST_QP 1:CBR 2:VBR<br>jpeg固定为CONST_QP</td><td style="text-align:center;">参见RateCtrlMode</td><td>jpeg，avc</td></tr><tr><td style="text-align:center;">BitRate</td><td style="text-align:left;">CBR 模式下的目标码率或VBR模式下的最低码率</td><td style="text-align:center;">[10,20000000]</td><td>avc</td></tr><tr><td style="text-align:center;">MaxBitRate</td><td style="text-align:left;">VBR模式下的最高码率</td><td style="text-align:center;">[10,20000000]</td><td>avc</td></tr><tr><td style="text-align:center;">SliceQP</td><td style="text-align:left;">初始 QP 值,-1表示auto</td><td style="text-align:center;">avc:-1,[0,51]<br>jpeg:[1,100]</td><td>jpeg，avc</td></tr><tr><td style="text-align:center;">MinQP</td><td style="text-align:left;">最小qp值</td><td style="text-align:center;">[0,sliceqp]</td><td>avc</td></tr><tr><td style="text-align:center;">MaxQP</td><td style="text-align:left;">最大qp值</td><td style="text-align:center;">[sliceqp,54]</td><td>avc</td></tr><tr><td style="text-align:center;">profile</td><td style="text-align:left;">SPS 中的 profile_idc 参数:0: base 1:main 2:high 3:jpeg</td><td style="text-align:center;">[0,3]</td><td>jpeg，avc</td></tr><tr><td style="text-align:center;">level</td><td style="text-align:left;">SPS 中的 level_idc 参数</td><td style="text-align:center;">[10,42]</td><td>avc</td></tr><tr><td style="text-align:center;">AspectRatio</td><td style="text-align:left;">显示比例</td><td style="text-align:center;">参见AVC_AspectRatio</td><td>avc</td></tr><tr><td style="text-align:center;">FreqIDR</td><td style="text-align:left;">两个idr帧的间隔</td><td style="text-align:center;">[1,1000]</td><td>avc</td></tr><tr><td style="text-align:center;">gopLen</td><td style="text-align:left;">Group Of Picture，即两个 I 帧之间的间隔</td><td style="text-align:center;">[1,1000]</td><td>avc</td></tr><tr><td style="text-align:center;">bEnableGDR</td><td style="text-align:left;">是否启用帧内刷新</td><td style="text-align:center;">[true,false]</td><td>avc</td></tr><tr><td style="text-align:center;">gdrMode</td><td style="text-align:left;">gdr 刷新模式:0，垂直刷新 1，水平刷新</td><td style="text-align:center;">参见GDRCtrlMode</td><td>avc</td></tr><tr><td style="text-align:center;">bEnableLTR</td><td style="text-align:left;">是否启用长期参考帧</td><td style="text-align:center;">[true,false]</td><td>avc</td></tr><tr><td style="text-align:center;">roiCtrlMode</td><td style="text-align:left;">roi控制模式:0:不使用roi 1：相对qp 2：绝对qp</td><td style="text-align:center;">参见ROICtrlMode</td><td>avc</td></tr><tr><td style="text-align:center;">EncSliceSplitCfg</td><td style="text-align:left;">slice 分割配置</td><td style="text-align:center;"></td><td>avc</td></tr><tr><td style="text-align:center;">bSplitEnable</td><td style="text-align:left;">Slice 分割是否使能</td><td style="text-align:center;">[true,false]</td><td>avc</td></tr><tr><td style="text-align:center;">u32SplitMode</td><td style="text-align:left;">Slice 分割模式:0：按 bit 数分割。<br>1:按宏块行分割</td><td style="text-align:center;">[0,1]</td><td>avc</td></tr><tr><td style="text-align:center;">u32SliceSize</td><td style="text-align:left;">u32SplitMode=0，表示每个 slice 的 byte 数<br>u32SplitMode=1，表示每个 slice 占的宏块行数<br></td><td style="text-align:center;">u32SplitMode=0，[100,65535]<br>u32SplitMode=1，[1,(图像高+15)/16]</td><td>avc</td></tr><tr><td style="text-align:center;">entropyMode</td><td style="text-align:left;">熵编码，0：CABAC 1：CAVLC</td><td style="text-align:center;">参见EncEntropyMode</td><td>avc</td></tr><tr><td style="text-align:center;">encDblkCfg</td><td style="text-align:left;">区块滤波配置</td><td style="text-align:center;"></td><td>avc</td></tr><tr><td style="text-align:center;">disable_deblocking_filter_idc</td><td style="text-align:left;">默认值0，具体含义请参见 H.264 协 议</td><td style="text-align:center;">[0，2]</td><td>avc</td></tr><tr><td style="text-align:center;">slice_alpha_c0_offset_div2</td><td style="text-align:left;">默认值0，具体含义请参见 H.264 协 议</td><td style="text-align:center;">[-6，6]</td><td>avc</td></tr><tr><td style="text-align:center;">slice_beta_offset_div2</td><td style="text-align:left;">默认值0，具体含义请参见 H.264 协 议</td><td style="text-align:center;">[-6, 6]</td><td>avc</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span>                       channel<span class="token punctuation">;</span>  <span class="token comment">//encode channel number</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span>            width<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span>            height<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>             FrameRate<span class="token punctuation">;</span>
    RateCtrlMode              rcMode<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>              BitRate<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>              MaxBitRate<span class="token punctuation">;</span>
    <span class="token keyword">int</span>                       SliceQP<span class="token punctuation">;</span>  <span class="token comment">//auto: -1, or from 0 to 51</span>
    <span class="token keyword">int</span>                       MinQP<span class="token punctuation">;</span><span class="token comment">//from 0 to SliceQP</span>
    <span class="token keyword">int</span>                       MaxQP<span class="token punctuation">;</span><span class="token comment">//from SliceQP to 51</span>
    AVC_Profile               profile<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>              level<span class="token punctuation">;</span>  <span class="token comment">//1 .. 51, 51 is 5.1</span>
    AVC_AspectRatio           AspectRatio<span class="token punctuation">;</span>
    <span class="token keyword">int</span>                       FreqIDR<span class="token punctuation">;</span> <span class="token comment">//default value  : -1,IDR:number of frames between two IDR pictures;GDR:refresh period</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>              gopLen<span class="token punctuation">;</span>  
    bool                      bEnableGDR<span class="token punctuation">;</span><span class="token comment">//gdr</span>
    GDRCtrlMode               gdrMode<span class="token punctuation">;</span>
    bool                      bEnableLTR<span class="token punctuation">;</span><span class="token comment">//Long Term reference</span>

    ROICtrlMode               roiCtrlMode<span class="token punctuation">;</span>
    EncSliceSplitCfg          sliceSplitCfg<span class="token punctuation">;</span>
    EncEntropyMode            entropyMode<span class="token punctuation">;</span><span class="token comment">//Profile is set to AVC_MAIN or AVC_HIGH is valid</span>
    EncDblkCfg                encDblkCfg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>EncSettings<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    CONST_QP<span class="token punctuation">,</span>
    CBR<span class="token punctuation">,</span>
    VBR
<span class="token punctuation">}</span> RateCtrlMode<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    AVC_C_BASELINE<span class="token punctuation">,</span>
    AVC_MAIN<span class="token punctuation">,</span>
    AVC_HIGH<span class="token punctuation">,</span>
    JPEG
<span class="token punctuation">}</span> AVC_Profile<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    ASPECT_RATIO_AUTO<span class="token punctuation">,</span> 
    ASPECT_RATIO_1_1<span class="token punctuation">,</span>
    ASPECT_RATIO_4_3<span class="token punctuation">,</span> 
    ASPECT_RATIO_16_9<span class="token punctuation">,</span> 
    ASPECT_RATIO_NONE<span class="token punctuation">,</span>
    ASPECT_RATIO_MAX<span class="token punctuation">,</span>
<span class="token punctuation">}</span> AVC_AspectRatio<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>          s32X<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>          s32Y<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>          u32Width<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>          u32Height<span class="token punctuation">;</span>
<span class="token punctuation">}</span> RECT_S<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>          uIndex<span class="token punctuation">;</span><span class="token comment">//index[0-7]</span>
    bool                  bEnable<span class="token punctuation">;</span>
    <span class="token keyword">int</span>                   uQpValue<span class="token punctuation">;</span>
    RECT_S                stRect<span class="token punctuation">;</span>
<span class="token punctuation">}</span> EncROICfg<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    ROI_QP_TABLE_NONE<span class="token punctuation">,</span>
    ROI_QP_TABLE_RELATIVE<span class="token punctuation">,</span><span class="token comment">//[-32,31],6 LSBs effective</span>
    ROI_QP_TABLE_ABSOLUTE<span class="token punctuation">,</span><span class="token comment">//[0,51],6 LSBs effective</span>
<span class="token punctuation">}</span> ROICtrlMode<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    GDR_VERTICAL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    GDR_HORIZONTAL<span class="token punctuation">,</span>
    GDR_CTRLMAX<span class="token punctuation">,</span>
<span class="token punctuation">}</span> GDRCtrlMode<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    bool bSplitEnable<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u32SplitMode<span class="token punctuation">;</span> <span class="token comment">// 0:splite by byte; 1:splite by slice count</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u32SliceSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>EncSliceSplitCfg<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    ENTROPY_MODE_CAVLC <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    ENTROPY_MODE_CABAC<span class="token punctuation">,</span>
    ENTROPY_MODE_MAX<span class="token punctuation">,</span>
<span class="token punctuation">}</span>EncEntropyMode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  disable_deblocking_filter_idc<span class="token punctuation">;</span><span class="token comment">//[0,2]</span>
    <span class="token keyword">int</span>  slice_alpha_c0_offset_div2<span class="token punctuation">;</span><span class="token comment">//[-6,6]</span>
    <span class="token keyword">int</span>  slice_beta_offset_div2<span class="token punctuation">;</span><span class="token comment">//[-6,6]</span>
<span class="token punctuation">}</span>EncDblkCfg<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【返回值】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">void</span><span class="token operator">*</span> EncoderHandle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-2-2-videoencoder-setroicfg" tabindex="-1"><a class="header-anchor" href="#_1-2-2-videoencoder-setroicfg" aria-hidden="true">#</a> 1.2.2 VideoEncoder_SetRoiCfg</h4><p>【描述】</p><p>roi设置，最多支持8个矩形区域，系统内部按照 0～7 的索引号对 ROI 区域进行管理，uIndex 表示的用户设置 ROI 的索引号。ROI 区域之间可以互相叠加，且当发生叠加时，ROI 区域之间的优先级按照索引号0～7 依次提高。</p><p>在编码器创建后到销毁前均可使用。编码过程中可以动态调整roi区域。</p><p>【语法】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>EncStatus <span class="token function">VideoEncoder_SetRoiCfg</span><span class="token punctuation">(</span>EncoderHandle <span class="token operator">*</span>hEnc<span class="token punctuation">,</span><span class="token keyword">const</span> EncROICfg<span class="token operator">*</span>pEncRoiCfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【参数】</p><p>hEnc: 创建时返回的句柄</p><p>pEncRoiCfg:roi 区域配置信息</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>          s32X<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>          s32Y<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>          u32Width<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>          u32Height<span class="token punctuation">;</span>
<span class="token punctuation">}</span>RECT_S<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>          uIndex<span class="token punctuation">;</span><span class="token comment">//index[0-7]</span>
    bool                  bEnable<span class="token punctuation">;</span>
    <span class="token keyword">int</span>                   uQpValue<span class="token punctuation">;</span>
    RECT_S                stRect<span class="token punctuation">;</span>
<span class="token punctuation">}</span>EncROICfg<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>uIndex     - 指定该roi区域索引号，范围0-7最多支持8个区域
bEnable    - 指定该区域是否使能，只有使能的区域才有效
uQpValue   - qp值，可以是相对qp或绝对qp，qp模式由EncSettings中roiCtrlMode属性决定。绝对qp范围                  [0,51]，相对qp范围[-31,31]
stRect     - roi矩形区域，s32X矩形左上角x值，s32Y矩形左上角y值，u32Width矩形宽度，u32Height矩形高度
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【返回值】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    Enc_SUCCESS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> 
    Enc_ERR <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>EncStatus<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-3-videoencoder-setlongterm" tabindex="-1"><a class="header-anchor" href="#_1-2-3-videoencoder-setlongterm" aria-hidden="true">#</a> 1.2.3 VideoEncoder_SetLongTerm</h4><p>【描述】</p><p>设置编码的下一帧为长期参考帧。在编码器创建后到销毁前均可使用。EncSettings中bEnableLTR属性决定该功能是否使能。</p><p>【语法】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>EncStatus <span class="token function">VideoEncoder_SetLongTerm</span><span class="token punctuation">(</span>EncoderHandle <span class="token operator">*</span>hEnc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【参数】</p><p>hEnc: 创建时返回的句柄</p><p>【返回值】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    Enc_SUCCESS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> 
    Enc_ERR <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>EncStatus<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-4-videoencoder-uselongterm" tabindex="-1"><a class="header-anchor" href="#_1-2-4-videoencoder-uselongterm" aria-hidden="true">#</a> 1.2.4 VideoEncoder_UseLongTerm</h4><p>【描述】</p><p>设置编码的下一帧使用长期参考帧。在编码器创建后到销毁前均可使用。EncSettings中bEnableLTR属性决定该功能是否使能。</p><p>【语法】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>EncStatus <span class="token function">VideoEncoder_UseLongTerm</span><span class="token punctuation">(</span>EncoderHandle <span class="token operator">*</span>hEnc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【参数】</p><p>hEnc: 创建时返回的句柄</p><p>【返回值】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    Enc_SUCCESS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    Enc_ERR <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>EncStatus<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-5-videoencoder-insertuserdata" tabindex="-1"><a class="header-anchor" href="#_1-2-5-videoencoder-insertuserdata" aria-hidden="true">#</a> 1.2.5 VideoEncoder_InsertUserData</h4><p>【描述】</p><p>插入用户数据。</p><p>在编码器创建后到销毁前均可使用，编码过程中可以实时修改用户数据内容。用户数据将被插入到IDR帧的SEI数据区域。</p><p>【语法】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>EncStatus      <span class="token function">VideoEncoder_InsertUserData</span><span class="token punctuation">(</span>EncoderHandle <span class="token operator">*</span>hEnc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span>pUserData<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【参数】</p><p>hEnc: 创建时返回的句柄</p><p>pUserData:用户数据指针</p><p>nlen:用户数据长度(0, 1024]</p><p>【返回值】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    Enc_SUCCESS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    Enc_ERR <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>EncStatus<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-6-videoencoder-destory" tabindex="-1"><a class="header-anchor" href="#_1-2-6-videoencoder-destory" aria-hidden="true">#</a> 1.2.6 VideoEncoder_Destory</h4><p>【描述】</p><p>销毁视频编码器</p><p>【语法】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>EncStatus <span class="token function">VideoEncoder_Destroy</span><span class="token punctuation">(</span>EncoderHandle <span class="token operator">*</span>hEnc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【参数】</p><p>hEnc: 创建时返回的句柄</p><p>【返回值】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    Enc_SUCCESS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> 
    Enc_ERR <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>EncStatus<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-7-videoencoder-encodeoneframe" tabindex="-1"><a class="header-anchor" href="#_1-2-7-videoencoder-encodeoneframe" aria-hidden="true">#</a> 1.2.7 VideoEncoder_EncodeOneFrame</h4><p>【描述】</p><p>编码一个视频帧</p><p>【语法】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>EncStatus <span class="token function">VideoEncoder_EncodeOneFrame</span><span class="token punctuation">(</span>EncoderHandle <span class="token operator">*</span>hEnc<span class="token punctuation">,</span> EncInputFrame <span class="token operator">*</span>input<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【参数】</p><p>hEnc: 创建时返回的句柄</p><p>input：输入YUV视频数据</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> width<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> height<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> stride<span class="token punctuation">;</span> <span class="token comment">//must be multiple of 32</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>EncInputFrame<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【返回值】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Enc_SUCCESS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
Enc_ERR <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-8-videoencoder-getstream" tabindex="-1"><a class="header-anchor" href="#_1-2-8-videoencoder-getstream" aria-hidden="true">#</a> 1.2.8 VideoEncoder_GetStream</h4><p>【描述】</p><p>获取视频编码流的buffer，注：该buffer空间由编码器内部分配。</p><p>【语法】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>EncStatus <span class="token function">VideoEncoder_GetStream</span><span class="token punctuation">(</span>EncoderHandle <span class="token operator">*</span>hEnc<span class="token punctuation">,</span> EncOutputStream <span class="token operator">*</span>output<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【参数】</p><p>hEnc: 创建时返回的句柄</p><p>output：输出编码后的流数据buffer，bufSize大于0才有输出</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>bufAddr<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bufSize<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>EncOutputStream<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【返回值】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Enc_SUCCESS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
Enc_ERR <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-9-videoencoder-getstream-byextbuf" tabindex="-1"><a class="header-anchor" href="#_1-2-9-videoencoder-getstream-byextbuf" aria-hidden="true">#</a> 1.2.9 VideoEncoder_GetStream_ByExtBuf</h4><p>【描述】</p><p>获取视频编码流的buffer，注：该buffer空间需由使用者调用此函数前分配。</p><p>【语法】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>EncStatus <span class="token function">VideoEncoder_GetStream</span><span class="token punctuation">(</span>EncoderHandle <span class="token operator">*</span>hEnc<span class="token punctuation">,</span> EncOutputStream <span class="token operator">*</span>output<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【参数】</p><p>hEnc: 创建时返回的句柄</p><p>output：输出编码后的流数据buffer，bufSize大于0才有输出</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>bufAddr<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bufSize<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>EncOutputStream<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【返回值】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Enc_SUCCESS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
Enc_ERR <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-0-videoencoder-releasestream" tabindex="-1"><a class="header-anchor" href="#_1-3-0-videoencoder-releasestream" aria-hidden="true">#</a> 1.3.0 VideoEncoder_ReleaseStream</h4><p>【描述】</p><p>释放视频编码流的buffer</p><p>【语法】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>EncStatus <span class="token function">VideoEncoder_ReleaseStream</span><span class="token punctuation">(</span>EncoderHandle <span class="token operator">*</span>hEnc<span class="token punctuation">,</span> EncOutputStream <span class="token operator">*</span>output<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【参数】</p><ul><li>hEnc: 创建时返回的句柄</li><li>output：VideoEncoder_GetStream返回的buffer</li></ul><p>【返回值】</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Enc_SUCCESS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
Enc_ERR <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-硬件结构图及软件架构" tabindex="-1"><a class="header-anchor" href="#_2-硬件结构图及软件架构" aria-hidden="true">#</a> 2 硬件结构图及软件架构</h2><h3 id="_2-1-硬件结构图" tabindex="-1"><a class="header-anchor" href="#_2-1-硬件结构图" aria-hidden="true">#</a> 2.1 硬件结构图</h3><p>K510的硬件框图如下： <img src="http://photos.100ask.net/canaan-docs/hardware_block_diagram.png" alt="hardware_block_diagram"></p><p>从video sensor接收到的数据，经MIPI DPHY、CSI、VI、ISP处理得到yuv源数据，并存储到DDR中。h264 encoder模块从DDR读取数据，进行编码运算，运算结果存储到DDR中。</p><h3 id="_2-2-软件架构" tabindex="-1"><a class="header-anchor" href="#_2-2-软件架构" aria-hidden="true">#</a> 2.2 软件架构</h3><p>多媒体开发平台的软件架构如下：</p><p><img src="http://photos.100ask.net/canaan-docs/multimedia_block_diagram.png" alt="multimedia_block_diagram.png"></p><p>其中，</p><ul><li><code>libvenc</code>: encoder库，用于调用h264 encoder core</li><li><code>libmediactl</code>: isp库，用于控制sensor</li><li><code>libaudio3a</code>: audio3a库，用于对音频进行3a运算</li><li><code>alsa-lib</code>: 音频库，用于控制音频接口</li></ul><h2 id="_3-demo应用" tabindex="-1"><a class="header-anchor" href="#_3-demo应用" aria-hidden="true">#</a> 3 Demo应用</h2><h3 id="_3-1-encode-application" tabindex="-1"><a class="header-anchor" href="#_3-1-encode-application" aria-hidden="true">#</a> 3.1 Encode Application</h3><p>程序放在<code>/app/encode_app</code>目录下：</p><ul><li><code>encode_app</code>：Encode application程序</li><li>用于测试的yuv文件尺寸较大，没有放入SDK包</li></ul><p>运行<code>encode_app</code></p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">参数解释</th><th style="text-align:left;">默认值</th><th style="text-align:left;">取值范围</th><th style="text-align:left;">适用编码模块</th></tr></thead><tbody><tr><td style="text-align:left;">help</td><td style="text-align:left;">帮助信息</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">split</td><td style="text-align:left;">通道个数</td><td style="text-align:left;">NULL</td><td style="text-align:left;">[1,4]</td><td style="text-align:left;">jpeg、avc</td></tr><tr><td style="text-align:left;">ch</td><td style="text-align:left;">通道号（从0开始）</td><td style="text-align:left;">NULL</td><td style="text-align:left;">[0,3]</td><td style="text-align:left;">jpeg、avc</td></tr><tr><td style="text-align:left;">i</td><td style="text-align:left;">输入yuv文件，只支持<strong>nv12</strong>格式</td><td style="text-align:left;">NULL</td><td style="text-align:left;">v4l2 <br> xxx.yuv</td><td style="text-align:left;">jpeg、avc</td></tr><tr><td style="text-align:left;">dev</td><td style="text-align:left;">v4l2 device name</td><td style="text-align:left;">NULL</td><td style="text-align:left;"><strong>sensor0:</strong><br> /dev/video3 <br> /dev/video4 <br> <strong>sensor1:</strong> <br> /dev/video7 <br> /dev/video8</td><td style="text-align:left;">jpeg、avc</td></tr><tr><td style="text-align:left;">o</td><td style="text-align:left;">输出</td><td style="text-align:left;">NULL</td><td style="text-align:left;">rtsp <br> xxx.264 <br> xxx.mjpeg <br> xxx.jpg</td><td style="text-align:left;">jpeg、avc</td></tr><tr><td style="text-align:left;">w</td><td style="text-align:left;">输出图像宽度</td><td style="text-align:left;">1920</td><td style="text-align:left;">avc: [128,2048], multiple of 8 <br> jpeg: up to 8192, multiple of 16</td><td style="text-align:left;">jpeg、avc</td></tr><tr><td style="text-align:left;">h</td><td style="text-align:left;">输出图像高度</td><td style="text-align:left;">1080</td><td style="text-align:left;">avc: [64,2048], multiple of 8 <br> jpeg: up to 8192, multiple of 2</td><td style="text-align:left;">jpeg、avc</td></tr><tr><td style="text-align:left;">fps</td><td style="text-align:left;">摄像头采集帧率</td><td style="text-align:left;">30</td><td style="text-align:left;">(30, 60, 75) <br> 与v4l2配置文件一致</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">编码输出帧率</td><td style="text-align:left;">与参数<code>fps</code>相等</td><td style="text-align:left;">支持常用帧率转换，与encoder API的FrameRate参数取值范围一致</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">inframes</td><td style="text-align:left;">输入yuv帧数</td><td style="text-align:left;">0</td><td style="text-align:left;">[0,50]</td><td style="text-align:left;">jpeg、avc</td></tr><tr><td style="text-align:left;">outframes</td><td style="text-align:left;">输出yuv帧数，如果比参数-inframes大，将会重复编码</td><td style="text-align:left;">0</td><td style="text-align:left;">[0,32767]</td><td style="text-align:left;">jpeg、avc</td></tr><tr><td style="text-align:left;">gop</td><td style="text-align:left;">Group Of Picture，即两个 I 帧之间的间隔</td><td style="text-align:left;">25</td><td style="text-align:left;">[1,1000]</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">rcmode</td><td style="text-align:left;">表示码率控制模式 0:CONST_QP 1:CBR 2:VBR</td><td style="text-align:left;">CBR</td><td style="text-align:left;">[0,2]</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">bitrate</td><td style="text-align:left;">目标码率,单位Kb</td><td style="text-align:left;">4000</td><td style="text-align:left;">[1,20000]</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">maxbitrate</td><td style="text-align:left;">VBR模式下的最高码率,单位Kb</td><td style="text-align:left;">4000</td><td style="text-align:left;">[1,20000]</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">profile</td><td style="text-align:left;">SPS 中的 profile_idc 参数:0: base 1:main 2:high 3:jpeg</td><td style="text-align:left;">AVC_HIGH</td><td style="text-align:left;">[0,3]</td><td style="text-align:left;">jpeg、avc</td></tr><tr><td style="text-align:left;">level</td><td style="text-align:left;">SPS 中的 level_idc 参数</td><td style="text-align:left;">42</td><td style="text-align:left;">[10,42]</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">sliceqp</td><td style="text-align:left;">初始 QP 值,-1表示auto</td><td style="text-align:left;">25</td><td style="text-align:left;">avc:-1,[0,51]<br>jpeg:[1,100]</td><td style="text-align:left;">jpeg、avc</td></tr><tr><td style="text-align:left;">minqp</td><td style="text-align:left;">最小QP 值</td><td style="text-align:left;">0</td><td style="text-align:left;">[0,sliceqp]</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">maxqp</td><td style="text-align:left;">最大QP值</td><td style="text-align:left;">51</td><td style="text-align:left;">[sliceqp,51]</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">enableGDR</td><td style="text-align:left;">使能帧内刷新，参数指定刷新周期。0：不启用刷新周期。正数：帧内刷新周期</td><td style="text-align:left;">0</td><td style="text-align:left;">[0,65535]</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">GDRMode</td><td style="text-align:left;">帧率刷新模式</td><td style="text-align:left;">0(GDR_VERTICAL)</td><td style="text-align:left;">0-GDR_VERTICAL <br> 1-GDR_HORIZONTAL</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">enableLTR</td><td style="text-align:left;">使能长期参考帧</td><td style="text-align:left;">0(disable)</td><td style="text-align:left;">0-disable <br> 1-enable</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">roi</td><td style="text-align:left;">roi配置文件，指定多个roi区域</td><td style="text-align:left;">NULL</td><td style="text-align:left;">xxx.conf</td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">disableAE</td><td style="text-align:left;">关闭AE</td><td style="text-align:left;">0</td><td style="text-align:left;">0-不关闭AE<br>1-关闭AE <br> <strong>AE的开关与sensor相关，故关闭某一个dev的AE功能，会同时关闭该dev对应sensor的其余dev的AE功能</strong></td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">conf</td><td style="text-align:left;">v4l2配置文件,会指定的配置文件的基础上，根据命令行输入参数修改v4l2配置参数</td><td style="text-align:left;">NULL</td><td style="text-align:left;">xxx.conf <br> <em>conf文件说明：<br>video_sample.conf：摄像头输入1080p30 <br> video_sample_720p60: 摄像头输入720p60 <br> video_sample_vga480p75: 摄像头输入480p75</em> <strong><br> w/h的配置应不大于摄像头采集的宽高，fps的配置应等于摄像头采集帧率</strong></td><td style="text-align:left;">avc</td></tr><tr><td style="text-align:left;">alsa</td><td style="text-align:left;">使能音频</td><td style="text-align:left;">0(disable)</td><td style="text-align:left;">0-disable <br> 1-enable</td><td style="text-align:left;">audio</td></tr><tr><td style="text-align:left;">ac</td><td style="text-align:left;">音频通道数</td><td style="text-align:left;">2</td><td style="text-align:left;">2</td><td style="text-align:left;">audio</td></tr><tr><td style="text-align:left;">ar</td><td style="text-align:left;">音频采样率</td><td style="text-align:left;">44100</td><td style="text-align:left;">up to 48000</td><td style="text-align:left;">audio</td></tr><tr><td style="text-align:left;">af</td><td style="text-align:left;">音频采样格式</td><td style="text-align:left;">2(SND_PCM_FORMAT_S16_LE)</td><td style="text-align:left;">2-SND_PCM_FORMAT_S16_LE <br> 3-SND_PCM_FORMAT_S16_BE <br> 4-SND_PCM_FORMAT_U16_LE <br> 5-SND_PCM_FORMAT_U16_BE</td><td style="text-align:left;">audio</td></tr><tr><td style="text-align:left;">ad</td><td style="text-align:left;">音频设备号</td><td style="text-align:left;">hw:0</td><td style="text-align:left;">hw:0</td><td style="text-align:left;">audio</td></tr></tbody></table><h4 id="_3-1-1-输入yuv文件-输出文件" tabindex="-1"><a class="header-anchor" href="#_3-1-1-输入yuv文件-输出文件" aria-hidden="true">#</a> 3.1.1 输入yuv文件，输出文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./encode_app <span class="token parameter variable">-split</span> <span class="token number">1</span> <span class="token parameter variable">-ch</span> <span class="token number">0</span> <span class="token parameter variable">-i</span> your_file.yuv <span class="token parameter variable">-o</span> out.264 <span class="token parameter variable">-w</span> <span class="token number">1920</span> <span class="token parameter variable">-h</span> <span class="token number">1080</span> <span class="token parameter variable">-inframes</span> <span class="token number">10</span> <span class="token parameter variable">-outframes</span> <span class="token number">30</span>
./encode_app <span class="token parameter variable">-split</span> <span class="token number">1</span> <span class="token parameter variable">-ch</span> <span class="token number">0</span> <span class="token parameter variable">-i</span> your_file.yuv <span class="token parameter variable">-o</span> out.mjpeg <span class="token parameter variable">-w</span> <span class="token number">1920</span> <span class="token parameter variable">-h</span> <span class="token number">1080</span> <span class="token parameter variable">-inframes</span> <span class="token number">10</span> <span class="token parameter variable">-outframes</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-2-输入v4l2-输出rtsp推流" tabindex="-1"><a class="header-anchor" href="#_3-1-2-输入v4l2-输出rtsp推流" aria-hidden="true">#</a> 3.1.2 输入v4l2，输出rtsp推流</h4><h5 id="_3-1-2-1-单通道" tabindex="-1"><a class="header-anchor" href="#_3-1-2-1-单通道" aria-hidden="true">#</a> 3.1.2.1 单通道</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./encode_app <span class="token parameter variable">-split</span> <span class="token number">1</span> <span class="token parameter variable">-ch</span> <span class="token number">0</span> <span class="token parameter variable">-i</span> v4l2 <span class="token parameter variable">-dev</span> /dev/video3 <span class="token parameter variable">-o</span> rtsp <span class="token parameter variable">-w</span> <span class="token number">1920</span> <span class="token parameter variable">-h</span> <span class="token number">1080</span> <span class="token parameter variable">-conf</span> video_sample.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ffplay拉流命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> ffplay <span class="token parameter variable">-rtsp_transport</span> tcp rtsp://192.168.137.11:8554/testStream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>rtsp://192.168.137.11:8554/testStream</code>为rtsp流url地址 ,-rtsp_transport tcp表示使用tcp传输音视频数据(默认使用udp)，可增加-fflags nobuffer选项来避免因播放器缓存而增加的延迟。</li></ul><h5 id="_3-1-2-2-单摄像头双通道" tabindex="-1"><a class="header-anchor" href="#_3-1-2-2-单摄像头双通道" aria-hidden="true">#</a> 3.1.2.2 单摄像头双通道</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./encode_app <span class="token parameter variable">-split</span> <span class="token number">2</span> <span class="token parameter variable">-ch</span> <span class="token number">0</span> <span class="token parameter variable">-i</span> v4l2 <span class="token parameter variable">-dev</span> /dev/video3 <span class="token parameter variable">-o</span> rtsp <span class="token parameter variable">-w</span> <span class="token number">1920</span> <span class="token parameter variable">-h</span> <span class="token number">1080</span> <span class="token parameter variable">-ch</span> <span class="token number">1</span> <span class="token parameter variable">-i</span> v4l2 <span class="token parameter variable">-dev</span> /dev/video4 <span class="token parameter variable">-o</span> rtsp <span class="token parameter variable">-w</span> <span class="token number">1280</span> <span class="token parameter variable">-h</span> <span class="token number">720</span> <span class="token parameter variable">-conf</span> video_sample.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ffplay拉流命令同上。</p><h5 id="_3-1-2-3-双摄像头" tabindex="-1"><a class="header-anchor" href="#_3-1-2-3-双摄像头" aria-hidden="true">#</a> 3.1.2.3 双摄像头</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./encode_app <span class="token parameter variable">-split</span> <span class="token number">2</span> <span class="token parameter variable">-ch</span> <span class="token number">0</span> <span class="token parameter variable">-i</span> v4l2 <span class="token parameter variable">-dev</span> /dev/video3 <span class="token parameter variable">-o</span> rtsp <span class="token parameter variable">-w</span> <span class="token number">1920</span> <span class="token parameter variable">-h</span> <span class="token number">1080</span> <span class="token parameter variable">-ch</span> <span class="token number">1</span> <span class="token parameter variable">-i</span> v4l2 <span class="token parameter variable">-dev</span> /dev/video7 <span class="token parameter variable">-o</span> rtsp <span class="token parameter variable">-w</span> <span class="token number">1920</span> <span class="token parameter variable">-h</span> <span class="token number">1080</span> <span class="token parameter variable">-conf</span> video_sample.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ffplay拉流命令同上。</p><h5 id="_3-1-2-4-roi测试" tabindex="-1"><a class="header-anchor" href="#_3-1-2-4-roi测试" aria-hidden="true">#</a> 3.1.2.4 roi测试</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./encode_app <span class="token parameter variable">-split</span> <span class="token number">1</span> <span class="token parameter variable">-ch</span> <span class="token number">0</span> <span class="token parameter variable">-i</span> v4l2 <span class="token parameter variable">-dev</span> /dev/video3 <span class="token parameter variable">-o</span> rtsp <span class="token parameter variable">-w</span> <span class="token number">1920</span> <span class="token parameter variable">-h</span> <span class="token number">1080</span> <span class="token parameter variable">-sliceqp</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-bitrate</span> <span class="token number">2048</span> <span class="token parameter variable">-roi</span> roi_1920x1080.conf <span class="token parameter variable">-conf</span> video_sample.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>roi文件格式</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;roiCtrMode&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;roiRegion&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;qpValue&quot;</span><span class="token operator">:</span> <span class="token number">-15</span><span class="token punctuation">,</span>
      <span class="token property">&quot;qpRegion&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;left&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">&quot;top&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">&quot;width&quot;</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
        <span class="token property">&quot;heigth&quot;</span><span class="token operator">:</span> <span class="token number">500</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>roiCtrMode - 1:相对qp  2:绝对qp
roiRegion  - roi区域，为多个区域数组，最多支持8个区域。
qpValue    - 指定该区域使用的qp值，相对qp范围:[-31,31]     绝对qp范围:[0,51]
qpRegion   - roi矩形区域
left       - 矩形区域的左上角X坐标
top        - 矩形区域的左上角Y坐标
width      - 矩形区域的宽度
heigth     - 矩形区域的高度
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ffplay拉流命令同上。</p><h4 id="_3-1-3-帧率变换" tabindex="-1"><a class="header-anchor" href="#_3-1-3-帧率变换" aria-hidden="true">#</a> 3.1.3 帧率变换</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./encode_app <span class="token parameter variable">-split</span> <span class="token number">1</span> <span class="token parameter variable">-ch</span> <span class="token number">0</span> <span class="token parameter variable">-i</span> v4l2 <span class="token parameter variable">-dev</span> /dev/video3 <span class="token parameter variable">-r</span> <span class="token number">60</span> <span class="token parameter variable">-o</span> rtsp <span class="token parameter variable">-w</span> <span class="token number">1920</span> <span class="token parameter variable">-h</span> <span class="token number">1080</span> <span class="token parameter variable">-conf</span> video_sample.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ffplay拉流命令同上。</p><h4 id="_3-1-4-多种输入帧率" tabindex="-1"><a class="header-anchor" href="#_3-1-4-多种输入帧率" aria-hidden="true">#</a> 3.1.4 多种输入帧率</h4><p>目前支持VGA@75fps和720p60</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./encode_app <span class="token parameter variable">-split</span> <span class="token number">1</span> <span class="token parameter variable">-ch</span> <span class="token number">0</span> <span class="token parameter variable">-i</span> v4l2 <span class="token parameter variable">-dev</span> /dev/video3 <span class="token parameter variable">-o</span> rtsp <span class="token parameter variable">-w</span> <span class="token number">640</span> <span class="token parameter variable">-h</span> <span class="token number">480</span> <span class="token parameter variable">-fps</span> <span class="token number">75</span> <span class="token parameter variable">-r</span> <span class="token number">75</span> <span class="token parameter variable">-conf</span> video_sample_vga480p75.conf
./encode_app <span class="token parameter variable">-split</span> <span class="token number">1</span> <span class="token parameter variable">-ch</span> <span class="token number">0</span> <span class="token parameter variable">-i</span> v4l2 <span class="token parameter variable">-dev</span> /dev/video3 <span class="token parameter variable">-o</span> rtsp <span class="token parameter variable">-w</span> <span class="token number">1280</span> <span class="token parameter variable">-h</span> <span class="token number">720</span> <span class="token parameter variable">-fps</span> <span class="token number">60</span> <span class="token parameter variable">-r</span> <span class="token number">60</span> <span class="token parameter variable">-conf</span> video_sample_720p60.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ffplay拉流命令同上。</p><h4 id="_3-1-5-rtsp推送音视频流" tabindex="-1"><a class="header-anchor" href="#_3-1-5-rtsp推送音视频流" aria-hidden="true">#</a> 3.1.5 rtsp推送音视频流</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>encode_app <span class="token operator">-</span>split <span class="token number">1</span> <span class="token operator">-</span>ch <span class="token number">0</span> <span class="token operator">-</span>i v4l2 <span class="token operator">-</span>dev <span class="token operator">/</span>dev<span class="token operator">/</span>video3 <span class="token operator">-</span>o rtsp <span class="token operator">-</span>w <span class="token number">1920</span> <span class="token operator">-</span>h <span class="token number">1080</span> <span class="token operator">-</span>alsa <span class="token number">1</span> <span class="token operator">-</span>ac <span class="token number">2</span> <span class="token operator">-</span>ar <span class="token number">44100</span> <span class="token operator">-</span>af <span class="token number">2</span> <span class="token operator">-</span>ad hw<span class="token operator">:</span><span class="token number">0</span> <span class="token operator">-</span>conf video_sample<span class="token punctuation">.</span>conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ffplay拉流命令同上。</p><h4 id="_3-1-6-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-1-6-注意事项" aria-hidden="true">#</a> 3.1.6 注意事项</h4><ul><li><p>运行环境：核心板sensor：IMX219_SENSOR</p></li><li><p>多路编码时的总数据量不能超过1080p60。</p></li><li><p>rtsp流地址格式:rtsp://ip地址:端口号/testStream，其中ip地址和端口号可变，其余部分固定.</p><p>如：rtsp://192.168.137.11:8554/testStream，其中ip地址为192.168.137.11，端口号为8554.</p><p>ip地址：开发板的ip地址，在板子上输入ifconfig即可获取。</p><p>端口号：8554 + &lt;通道号&gt;*2，通道号一般从0开始(-ch 0,-ch 1...)。</p></li><li><p>播放rtsp流方式:可通过vlc或ffplay来播放对应的rtsp流，数据流可以通过udp或tcp协议传输。</p><p>1)rtp over udp播放：ffplay -rtsp_transport udp rtsp://192.168.137.11:8554/testStream</p><p>2)rtp over tcp 播放: ffplay -rtsp_transport tcp rtsp://192.168.137.11:8554/testStream</p><p>建议使用rtp over tcp方式播放，避免因udp丢包导致画面花屏。</p></li></ul><h3 id="_3-2-ffmpeg" tabindex="-1"><a class="header-anchor" href="#_3-2-ffmpeg" aria-hidden="true">#</a> 3.2 ffmpeg</h3><p>ffmpeg放在/usr/local/bin目录下。</p><ul><li><code>ffmpeg</code>: ffmpeg应用程序。</li></ul><p>运行<code>ffmpeg</code></p><p>(1) encoder libk510_h264参数</p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">参数解释</th><th style="text-align:left;">默认值</th><th style="text-align:left;">取值范围</th></tr></thead><tbody><tr><td style="text-align:left;">g</td><td style="text-align:left;">gop size</td><td style="text-align:left;">25</td><td style="text-align:left;">1~1000</td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">bitrate</td><td style="text-align:left;">4000000</td><td style="text-align:left;">1000~20000000</td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">帧率</td><td style="text-align:left;">30</td><td style="text-align:left;">30</td></tr><tr><td style="text-align:left;">idr_freq</td><td style="text-align:left;">IDR频率</td><td style="text-align:left;">25</td><td style="text-align:left;">-1~256</td></tr><tr><td style="text-align:left;">qp</td><td style="text-align:left;">用cqp编码时，配置qp值</td><td style="text-align:left;">-1(auto)</td><td style="text-align:left;">-1~100</td></tr><tr><td style="text-align:left;">maxrate</td><td style="text-align:left;">bitrate的最大值</td><td style="text-align:left;">0</td><td style="text-align:left;">20000000</td></tr><tr><td style="text-align:left;">profile</td><td style="text-align:left;">支持的profile</td><td style="text-align:left;">2(high)</td><td style="text-align:left;">0 - baseline <br> 1 - main <br> 2 - high</td></tr><tr><td style="text-align:left;">level</td><td style="text-align:left;">编码level</td><td style="text-align:left;">42</td><td style="text-align:left;">10~42</td></tr><tr><td style="text-align:left;">aratio</td><td style="text-align:left;">屏幕宽高比</td><td style="text-align:left;">0（auto）</td><td style="text-align:left;">0 - auto <br> 1 - 1:1 <br> 2 - 4:3 <br> 3 - 16:9 <br> 4 - none</td></tr><tr><td style="text-align:left;">ch</td><td style="text-align:left;">channel number</td><td style="text-align:left;">0</td><td style="text-align:left;">0-7</td></tr></tbody></table><p>(2) encoder libk510_jpeg参数</p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">参数解释</th><th style="text-align:left;">默认值</th><th style="text-align:left;">取值范围</th></tr></thead><tbody><tr><td style="text-align:left;">qp</td><td style="text-align:left;">配置qp值</td><td style="text-align:left;">25</td><td style="text-align:left;">-1~100</td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">framerate</td><td style="text-align:left;">30</td><td style="text-align:left;">30</td></tr><tr><td style="text-align:left;">ch</td><td style="text-align:left;">encode channel</td><td style="text-align:left;">0</td><td style="text-align:left;">0~7</td></tr></tbody></table><p>(3) device alsa参数</p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">参数解释</th><th style="text-align:left;">默认值</th><th style="text-align:left;">取值范围</th></tr></thead><tbody><tr><td style="text-align:left;">ac</td><td style="text-align:left;">音频通道数</td><td style="text-align:left;">2</td><td style="text-align:left;">2</td></tr><tr><td style="text-align:left;">ar</td><td style="text-align:left;">音频采样率</td><td style="text-align:left;">48000</td><td style="text-align:left;">up to 48000</td></tr><tr><td style="text-align:left;">i</td><td style="text-align:left;">设备号</td><td style="text-align:left;">hw:0</td><td style="text-align:left;">hw:0</td></tr></tbody></table><p>(4) filter audio3a参数</p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">参数解释</th><th style="text-align:left;">默认值</th><th style="text-align:left;">取值范围</th></tr></thead><tbody><tr><td style="text-align:left;">sample_rate</td><td style="text-align:left;">音频采样率</td><td style="text-align:left;">16000</td><td style="text-align:left;">16000</td></tr><tr><td style="text-align:left;">agc</td><td style="text-align:left;">音频增益模式</td><td style="text-align:left;">3(AgcModeFixedDigital)</td><td style="text-align:left;">0 - AgcModeUnchanged <br> 1 - AgcModeAdaptiveAnalog <br> 2 - AgcModeAdaptiveDigital <br> 3 - AgcModeFixedDigital</td></tr><tr><td style="text-align:left;">ns</td><td style="text-align:left;">噪声level</td><td style="text-align:left;">3(VeryHigh)</td><td style="text-align:left;">0 - Low <br> 1 - Moderate <br> 2 - High <br> 3 - VeryHigh</td></tr><tr><td style="text-align:left;">dsp_task</td><td style="text-align:left;">auido3a运行位置</td><td style="text-align:left;">1(dsp)</td><td style="text-align:left;">0 - cpu <br>1 - dsp</td></tr></tbody></table><p>可以通过help命令查看可配置参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-h</span> <span class="token assign-left variable">encoder</span><span class="token operator">=</span>libk510_h264 <span class="token comment">##查看k510编码器的参数</span>
ffmpeg <span class="token parameter variable">-h</span> <span class="token assign-left variable">demuxer</span><span class="token operator">=</span>v4l2 <span class="token comment">##查看demuxer的配置参数</span>
ffmpeg <span class="token parameter variable">-h</span> <span class="token assign-left variable">filter</span><span class="token operator">=</span>audio3a <span class="token comment">##查看audio3a的配置参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ffmpeg的逻辑框如下：</p><p><img src="http://photos.100ask.net/canaan-docs/ffmpeg_block_diagram.png" alt="ffmpeg_block_diagram"></p><p>audio3a用于将接收到的音频进行3a运算并输出，其逻辑框图如下：</p><p><img src="http://photos.100ask.net/canaan-docs/ffmpeg_canaan_audio3a.png" alt="ffmpeg_canaan_audio3a"></p><h4 id="_3-2-1-程序运行说明" tabindex="-1"><a class="header-anchor" href="#_3-2-1-程序运行说明" aria-hidden="true">#</a> 3.2.1 程序运行说明</h4><h5 id="_3-2-1-1-rtp推流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-1-rtp推流" aria-hidden="true">#</a> 3.2.1.1 rtp推流</h5><h6 id="_3-2-1-1-1-rtp推送视频流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-1-1-rtp推送视频流" aria-hidden="true">#</a> 3.2.1.1.1. rtp推送视频流</h6><p>ffmpeg运行命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.102.231.29:1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中10.102.231.29为接收端地址，根据实际更改。 程序运行中按&quot;q&quot;停止运行。</p><p>ffplay接收命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffplay.exe <span class="token parameter variable">-protocol_whitelist</span> <span class="token string">&quot;file,udp,rtp&quot;</span> <span class="token parameter variable">-i</span> test.sdp <span class="token parameter variable">-fflags</span> nobuffer <span class="token parameter variable">-analyzeduration</span> <span class="token number">1000000</span> <span class="token parameter variable">-flags</span> low_delay
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中test.sdp内容可以从命令输出中获取。</p><p><img src="http://photos.100ask.net/canaan-docs/sdp.png" alt="image-20220721162011470"></p><p>.sdp参数说明：</p><ul><li>c=：媒体链接信息；IN：网络类型；IP4：地址类型；后面是IP地址（注意是接收端所在的IP地址，不是发送方的IP）</li><li>m=是媒体级会话的开始处，video：媒体类型；1234：端口号；RTP/AVP：传输协议；96：rtp头中的payload格式 按照实际情况修改接收端IP地址和端口号，注意rtp的端口号需为偶数。</li></ul><h6 id="_3-2-1-1-2-rtp推送音频流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-1-2-rtp推送音频流" aria-hidden="true">#</a> 3.2.1.1.2. rtp推送音频流</h6><p>ffmpeg运行命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> alsa <span class="token parameter variable">-ac</span> <span class="token number">2</span> <span class="token parameter variable">-ar</span> <span class="token number">32000</span> <span class="token parameter variable">-i</span> hw:0 <span class="token parameter variable">-acodec</span> aac <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中10.100.232.11为接收端地址，根据实际修改。</p><ul><li>ac：设置音频通道数</li><li>ar：设置音频采样率</li></ul><p>ffplay接收命令同上。</p><h6 id="_3-2-1-1-3-rtp推送音视频流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-1-3-rtp推送音视频流" aria-hidden="true">#</a> 3.2.1.1.3 rtp推送音视频流</h6><p>ffmpeg运行命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1234 <span class="token parameter variable">-f</span> alsa <span class="token parameter variable">-ac</span> <span class="token number">2</span> <span class="token parameter variable">-ar</span> <span class="token number">32000</span> <span class="token parameter variable">-i</span> hw:0 <span class="token parameter variable">-acodec</span> aac <span class="token parameter variable">-vn</span> <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1236
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ffplay接收命令同上。</p><h5 id="_3-2-1-2-rtsp推流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-2-rtsp推流" aria-hidden="true">#</a> 3.2.1.2 rtsp推流</h5>`,200),o={href:"https://github.com/EasyDarwin/EasyDarwin/releases",target:"_blank",rel:"noopener noreferrer"},u=s(`<p>软件安装成功后，会以系统服务的形式开机自启，默认监听端口号:554.</p><p><img src="http://photos.100ask.net/canaan-docs/EasyDarwin_run.png" alt="image-20220721113937361"></p><h6 id="_3-2-1-2-1-rtsp推视频流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-2-1-rtsp推视频流" aria-hidden="true">#</a> 3.2.1.2.1 rtsp推视频流</h6><p>ffmpeg运行命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-acodec</span> copy <span class="token parameter variable">-f</span> rtsp rtsp://10.100.232.11:554/test110
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>idr_freq</code>为IDR帧间隔，需要为GOP的整数倍。rtsp推流必须生成IDR帧才能拉到流。</li><li><code>rtsp://10.100.232.11:554/test110</code>为rtsp服务器的推拉流url地址</li></ul><p>ffplay拉流命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffplay.exe <span class="token parameter variable">-protocol_whitelist</span> <span class="token string">&quot;file,udp,rtp,tcp&quot;</span> <span class="token parameter variable">-i</span> rtsp://10.100.232.11:554/test110
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_3-2-1-2-2-rtsp推音频流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-2-2-rtsp推音频流" aria-hidden="true">#</a> 3.2.1.2.2 rtsp推音频流</h6><p>ffmpeg运行命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> alsa <span class="token parameter variable">-ac</span> <span class="token number">2</span> <span class="token parameter variable">-ar</span> <span class="token number">32000</span> <span class="token parameter variable">-i</span> hw:0 <span class="token parameter variable">-acodec</span> aac <span class="token parameter variable">-f</span> rtsp rtsp://10.100.232.11:554/test110
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ffplay拉流命令与rtsp拉视频流的命令相同。</p><h6 id="_3-2-1-2-3-rtsp推音视频流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-2-3-rtsp推音视频流" aria-hidden="true">#</a> 3.2.1.2.3 rtsp推音视频流</h6><p>ffmpeg运行命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-f</span> alsa <span class="token parameter variable">-ac</span> <span class="token number">2</span> <span class="token parameter variable">-ar</span> <span class="token number">32000</span> <span class="token parameter variable">-i</span> hw:0 <span class="token parameter variable">-idr_freq</span> <span class="token number">25</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-acodec</span> aac <span class="token parameter variable">-f</span> rtsp rtsp://10.100.232.11:554/test110
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ffplay拉流命令与rtsp拉视频流的命令相同。</p><h5 id="_3-2-1-3-rtmp推流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-3-rtmp推流" aria-hidden="true">#</a> 3.2.1.3 rtmp推流</h5><p>rtmp推流前需要部署rtmp服务器，将数据流推送到服务器上。支持rtmp协议的服务器包括fms，nginx，srs等。</p><h6 id="_3-2-1-3-1-rtmp推视频流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-3-1-rtmp推视频流" aria-hidden="true">#</a> 3.2.1.3.1 rtmp推视频流</h6><p>ffmpeg运行命令示例:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-f</span> flv rtmp://10.100.232.11/live/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>rtmp://10.100.232.11/live/1</code>为向rtmp服务器推流的url地址</li></ul><p>ffplay拉流命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffplay <span class="token parameter variable">-fflags</span> nobuffer rtmp://10.100.232.11/live/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>rtmp://10.100.232.11/live/1</code>为从rtmp服务器拉流的url地址 （推流和拉流的地址一样）,-fflags nobuffer选项来避免因播放器缓存而增加的延迟。</li></ul><h6 id="_3-2-1-3-2-rtmp推音频流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-3-2-rtmp推音频流" aria-hidden="true">#</a> 3.2.1.3.2 rtmp推音频流</h6><p>ffmpeg运行命令示例:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> alsa <span class="token parameter variable">-ac</span> <span class="token number">2</span> <span class="token parameter variable">-ar</span> <span class="token number">32000</span> <span class="token parameter variable">-i</span> hw:0 <span class="token parameter variable">-acodec</span> aac <span class="token parameter variable">-f</span> flv rtmp://10.100.232.11/live/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>rtmp://10.100.232.11/live/1</code>为向rtmp服务器推流的url地址</li></ul><p>ffplay拉流命令与rtmp拉视频流的命令相同。</p><h6 id="_3-2-1-3-3-rtmp推音视频流" tabindex="-1"><a class="header-anchor" href="#_3-2-1-3-3-rtmp推音视频流" aria-hidden="true">#</a> 3.2.1.3.3 rtmp推音视频流</h6><p>ffmpeg运行命令示例:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-f</span> alsa <span class="token parameter variable">-ac</span> <span class="token number">2</span> <span class="token parameter variable">-ar</span> <span class="token number">32000</span> <span class="token parameter variable">-i</span> hw:0 <span class="token parameter variable">-idr_freq</span> <span class="token number">25</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-acodec</span> aac <span class="token parameter variable">-f</span> flv rtmp://10.100.232.11/live/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>rtmp://10.100.232.11/live/1</code>为向rtmp服务器推流的url地址</li></ul><p>ffplay拉流命令与rtmp拉视频流的命令相同。</p><h5 id="_3-2-1-4-audio3a" tabindex="-1"><a class="header-anchor" href="#_3-2-1-4-audio3a" aria-hidden="true">#</a> 3.2.1.4 audio3a</h5><h6 id="_3-2-1-4-1-单独运行audio" tabindex="-1"><a class="header-anchor" href="#_3-2-1-4-1-单独运行audio" aria-hidden="true">#</a> 3.2.1.4.1 单独运行audio</h6><p>(1) 在cpu上运行audio3a ffmpeg运行命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> alsa <span class="token parameter variable">-ac</span> <span class="token number">2</span> <span class="token parameter variable">-ar</span> <span class="token number">16000</span> <span class="token parameter variable">-i</span> hw:0 <span class="token parameter variable">-af</span> <span class="token assign-left variable">audio3a</span><span class="token operator">=</span>sample_rate<span class="token operator">=</span><span class="token number">16000</span>:dsp_task<span class="token operator">=</span><span class="token number">0</span> <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(2) 在dsp上运行audio3a 运行两个telnet窗口，在两个窗口中分别运行dsp task scheduler和ffmpeg（先运行dsp task scheduler） dsp task scheduler运行命令实例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /app/dsp_app_new/
./dsp_app /app/dsp_scheduler/scheduler.bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ffmpeg运行命令实例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> alsa <span class="token parameter variable">-ac</span> <span class="token number">2</span> <span class="token parameter variable">-ar</span> <span class="token number">16000</span> <span class="token parameter variable">-i</span> hw:0 <span class="token parameter variable">-af</span> <span class="token assign-left variable">audio3a</span><span class="token operator">=</span>sample_rate<span class="token operator">=</span><span class="token number">16000</span> <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_3-2-1-4-2-同时运行audio3a和video" tabindex="-1"><a class="header-anchor" href="#_3-2-1-4-2-同时运行audio3a和video" aria-hidden="true">#</a> 3.2.1.4.2 同时运行audio3a和video</h6><p>(1) 在cpu上运行audio3a 运行两个telnet窗口，在两个窗口中分别运行audio3a和video。 video命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>audio3a命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> alsa <span class="token parameter variable">-ac</span> <span class="token number">2</span> <span class="token parameter variable">-ar</span> <span class="token number">16000</span> <span class="token parameter variable">-i</span> hw:0 <span class="token parameter variable">-af</span> <span class="token assign-left variable">audio3a</span><span class="token operator">=</span>sample_rate<span class="token operator">=</span><span class="token number">16000</span>:dsp_task<span class="token operator">=</span><span class="token number">0</span> <span class="token parameter variable">-acodec</span> aac <span class="token parameter variable">-vn</span> <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1236
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在cpu上同时运行audio3a和video会出现overflow，建议在dsp上运行audio3a (2) 在dsp上运行audio3a 运行三个telnet窗口，在三个窗口上分别运行audio3a调用、video和dsp scheduler（先运行dsp task scheduler） dsp task scheduler运行命令与单独运行audio3a相同。</p><p>audio3a命令实例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> alsa <span class="token parameter variable">-ac</span> <span class="token number">2</span> <span class="token parameter variable">-ar</span> <span class="token number">16000</span> <span class="token parameter variable">-i</span> hw:0 <span class="token parameter variable">-af</span> <span class="token assign-left variable">audio3a</span><span class="token operator">=</span>sample_rate<span class="token operator">=</span><span class="token number">16000</span> <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1236
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>video命令示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>10.100.232.11为rtp接收端的ip地址。</li><li>接收端ffplay的SDP文件内容，可以在运行上述ffmpeg命令后，从打印出来的log得到。</li></ul><h5 id="_3-2-1-5-v4l2" tabindex="-1"><a class="header-anchor" href="#_3-2-1-5-v4l2" aria-hidden="true">#</a> 3.2.1.5 v4l2</h5><p>可以通过help命令查看可配置参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-h</span> <span class="token assign-left variable">demuxer</span><span class="token operator">=</span>v4l2 <span class="token comment">##查看v4l2的配置参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">参数解释</th><th style="text-align:left;">默认值</th><th style="text-align:left;">取值范围</th></tr></thead><tbody><tr><td style="text-align:left;">s</td><td style="text-align:left;">图像分辨率，例如1920x1080</td><td style="text-align:left;">NULL</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">帧率，目前只支持30fps</td><td style="text-align:left;">30</td><td style="text-align:left;">30</td></tr><tr><td style="text-align:left;">isp</td><td style="text-align:left;">打开k510 isp硬件</td><td style="text-align:left;">0</td><td style="text-align:left;">0-1</td></tr><tr><td style="text-align:left;">buf_type</td><td style="text-align:left;">v4l2 buffer<code>类型</code> <br>1: V4L2_MEMORY_MMAP ：适合于-vcodec copy<br>2: V4L2_MEMORY_USERPTR：适合于-vcodec libk510_h264</td><td style="text-align:left;">1</td><td style="text-align:left;">1~2</td></tr><tr><td style="text-align:left;">conf</td><td style="text-align:left;">v4l2 config file</td><td style="text-align:left;">NULL</td><td style="text-align:left;"></td></tr></tbody></table><p>ffmpeg运行命令示例：其中10.100.232.11为接收端地址，根据实际修改。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1234 <span class="token parameter variable">-f</span> alsa <span class="token parameter variable">-ac</span> <span class="token number">2</span> <span class="token parameter variable">-ar</span> <span class="token number">16000</span> <span class="token parameter variable">-i</span> hw:0 <span class="token parameter variable">-acodec</span> aac <span class="token parameter variable">-vn</span> <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1236
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-vcodec</span> copy <span class="token parameter variable">-y</span> out.yuv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明：</p><ol><li>运行时需要在运行目录中查找<code>video_sampe.conf</code>、<code>imx219_0.conf</code>和<code>imx219_1.conf</code>文件进行配置，这三个文件在<code>/encode_app/</code>目录下。</li><li>摄像头实时进来的视频写成yuv文件，由于yuv文件很大，本地ddr或者nfs的写速度跟不上，可能导致丢帧。</li></ol><h5 id="_3-2-1-6-jpeg编码" tabindex="-1"><a class="header-anchor" href="#_3-2-1-6-jpeg编码" aria-hidden="true">#</a> 3.2.1.6 JPEG编码</h5><p>文件输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-vcodec</span> libk510_jpeg <span class="token parameter variable">-y</span> test.mjpeg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明：运行时需要在运行目录中查找<code>video_sampe.conf</code>、<code>imx219_0.conf</code>和<code>imx219_1.conf</code>文件进行配置，这三个文件在<code>/encode_app/</code>目录下。</p><p>输出的文件test.mjpeg可在PC端用ffplay播放</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffplay <span class="token parameter variable">-i</span> test.mjpeg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>推流：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-vcodec</span> libk510_jpeg <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.100.232.11:1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可用ffplay拉流</p><h5 id="_3-2-1-7-多路编码" tabindex="-1"><a class="header-anchor" href="#_3-2-1-7-多路编码" aria-hidden="true">#</a> 3.2.1.7 多路编码</h5><p>最多支持8路同时编码，可用每路的帧大小乘以帧率再相加，不要超过1080p60的数据量，-vcodec可选h264或者jpeg.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 1920x1080 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-filter_complex</span> <span class="token string">&#39;split=2[out1][out2]&#39;</span> <span class="token parameter variable">-map</span> <span class="token string">&#39;[out1]&#39;</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-ch</span> <span class="token number">0</span> <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.20.1.101:1234 <span class="token parameter variable">-map</span> <span class="token string">&#39;[out2]&#39;</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-ch</span> <span class="token number">1</span> <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.20.1.101:2236
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-f</span> v4l2 <span class="token parameter variable">-s</span> 480x360 <span class="token parameter variable">-conf</span> <span class="token string">&quot;video_sample.conf&quot;</span> <span class="token parameter variable">-isp</span> <span class="token number">1</span> <span class="token parameter variable">-buf_type</span> <span class="token number">2</span> <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-i</span> /dev/video3 <span class="token parameter variable">-filter_complex</span> <span class="token string">&#39;split=8[out1][out2][out3][out4][out5][out6][out7][out8]&#39;</span> <span class="token parameter variable">-map</span> <span class="token string">&#39;[out1]&#39;</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-b:v</span> <span class="token number">300000</span> <span class="token parameter variable">-ch</span> <span class="token number">0</span> <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.20.1.101:1234 <span class="token parameter variable">-map</span> <span class="token string">&#39;[out2]&#39;</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-b:v</span> <span class="token number">300000</span> <span class="token parameter variable">-ch</span> <span class="token number">1</span> <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.20.1.101:2322 <span class="token parameter variable">-map</span> <span class="token string">&#39;[out3]&#39;</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-b:v</span> <span class="token number">300000</span> <span class="token parameter variable">-ch</span> <span class="token number">2</span> <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.20.1.101:3086 <span class="token parameter variable">-map</span> <span class="token string">&#39;[out4]&#39;</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-b:v</span> <span class="token number">300000</span> <span class="token parameter variable">-ch</span> <span class="token number">3</span> <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.20.1.101:4234 <span class="token parameter variable">-map</span> <span class="token string">&#39;[out5]&#39;</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-b:v</span> <span class="token number">300000</span> <span class="token parameter variable">-ch</span> <span class="token number">4</span> <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.20.1.101:5216 <span class="token parameter variable">-map</span> <span class="token string">&#39;[out6]&#39;</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-b:v</span> <span class="token number">300000</span> <span class="token parameter variable">-ch</span> <span class="token number">5</span> <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.20.1.101:6788 <span class="token parameter variable">-map</span> <span class="token string">&#39;[out7]&#39;</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-b:v</span> <span class="token number">300000</span> <span class="token parameter variable">-ch</span> <span class="token number">6</span> <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.20.1.101:7230 <span class="token parameter variable">-map</span> <span class="token string">&#39;[out8]&#39;</span> <span class="token parameter variable">-vcodec</span> libk510_h264 <span class="token parameter variable">-b:v</span> <span class="token number">300000</span> <span class="token parameter variable">-ch</span> <span class="token number">7</span> <span class="token parameter variable">-an</span> <span class="token parameter variable">-f</span> rtp rtp://10.20.1.101:8976
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用ffplay拉流时，注意只能拉一路视频，通过改变SDP文件里的端口号切换其他路的视频，或者启动多个ffplay拉流。</p><h4 id="_3-2-2-程序移植说明" tabindex="-1"><a class="header-anchor" href="#_3-2-2-程序移植说明" aria-hidden="true">#</a> 3.2.2 程序移植说明</h4><p><code>ffmpeg</code>在<code>ffmpeg</code>开源代码4.4的版本上进行移植，<code>xxx.patch</code>为补丁包，增加了</p><ul><li><code>ff_libk510_h264_encoder</code>：控制h264硬件编码，引用了<code>libvenc.so</code></li><li><code>ff_libk510_jpeg_encoder</code>：控制jpeg硬件编码，引用了<code>libvenc.so</code></li><li>v4l2：在v4l2.c里，加入了k510硬件相关代码，实现了v4l2 buffer类型V4L2_MEMORY_USERPTR，引用了<code>libmediactl.so</code>。</li></ul><h5 id="_3-2-2-1-patch生成命令" tabindex="-1"><a class="header-anchor" href="#_3-2-2-1-patch生成命令" aria-hidden="true">#</a> 3.2.2.1 patch生成命令</h5><p>（1）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>quilt new <span class="token parameter variable">-p</span> ab xxx.patch <span class="token comment">##在patches目录下生成xxx.patch文件</span>
quilt <span class="token function">add</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span> <span class="token comment">##添加修改前的文件</span>
<span class="token comment">###### 修改代码 ######</span>
quilt refresh <span class="token comment">##修改内容被添加到xxx.patch</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2） 将xxx.patch复制到package/ffmpeg_canaan目录中，并按照当前路径修改patch文件中的文件路径。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/patches/xxx.patch <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/package/ffmpeg_canaan
<span class="token function">rm</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/patches/series
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;s/\\/dl\\/ffmpeg_canaan\\/ffmpeg-4.4//g&quot;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/package/ffmpeg_canaan/xxx.patch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-2-2-ffmpeg配置" tabindex="-1"><a class="header-anchor" href="#_3-2-2-2-ffmpeg配置" aria-hidden="true">#</a> 3.2.2.2 ffmpeg配置</h5><p>在<code>package/ffmpeg_canaan/ffmpeg.mk</code>文件中，可以通过configure选项修改CPU核、编译工具链，使能<code>ff_k510_video_demuxer</code> <code>ff_libk510_jpeg_encoder</code>和<code>ff_libk510_h264_encoder</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./configure <span class="token punctuation">\\</span>
    --cross-prefix<span class="token operator">=</span>riscv64-linux- <span class="token punctuation">\\</span>
    --enable-cross-compile <span class="token punctuation">\\</span>
    --target-os<span class="token operator">=</span>linux <span class="token punctuation">\\</span>
    <span class="token parameter variable">--cc</span><span class="token operator">=</span>riscv64-linux-gcc <span class="token punctuation">\\</span>
    <span class="token parameter variable">--arch</span><span class="token operator">=</span>riscv64 <span class="token punctuation">\\</span>
    --extra-ldflags<span class="token operator">=</span><span class="token string">&quot;-L./&quot;</span> <span class="token punctuation">\\</span>
    --extra-ldflags<span class="token operator">=</span><span class="token string">&quot;-ldl&quot;</span> <span class="token punctuation">\\</span>
    --extra-ldflags<span class="token operator">=</span><span class="token string">&quot;-Wl,-rpath .&quot;</span> <span class="token punctuation">\\</span>
    --enable-static <span class="token punctuation">\\</span>
    --enable-libk510_video <span class="token punctuation">\\</span>
    --enable-libk510_h264 <span class="token punctuation">\\</span>
    --enable-libk510_jpeg <span class="token punctuation">\\</span>
    --enable-alsa <span class="token punctuation">\\</span>
    --disable-autodetect <span class="token punctuation">\\</span>
    --disable-ffplay <span class="token punctuation">\\</span>
    --disable-ffprobe <span class="token punctuation">\\</span>
    --disable-doc <span class="token punctuation">\\</span>
    --enalbe-audio3a <span class="token punctuation">\\</span>
    --enable-indev<span class="token operator">=</span>v4l2 <span class="token punctuation">\\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,88);function v(m,b){const n=l("ExternalLinkIcon");return p(),r("div",null,[c,e("p",null,[a("rtsp推流前需要部署rtsp服务器，将数据流推送到服务器上。rtsp服务器推荐使用EasyDarwin，下载地址:"),e("a",o,[a("Releases · EasyDarwin/EasyDarwin (github.com)"),i(n)]),a(".")]),u])}const g=t(d,[["render",v],["__file","01-Multimedia_Developer_Guides.html.vue"]]);export{g as default};
