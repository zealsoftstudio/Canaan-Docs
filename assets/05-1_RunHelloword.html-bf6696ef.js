import{_ as n,o as s,c as a,e}from"./app-21fd3c9b.js";const i={},l=e(`<h1 id="运行输出hello-word" tabindex="-1"><a class="header-anchor" href="#运行输出hello-word" aria-hidden="true">#</a> 运行输出hello word</h1><h2 id="配置开发环境" tabindex="-1"><a class="header-anchor" href="#配置开发环境" aria-hidden="true">#</a> 配置开发环境</h2><p>首先我们需要获取 东山哪吒STU 开发板 配套的交叉编译工具链。因为最初的工具链是 阿里平头哥提供，他们的工具链 与 GNU社区标准的工具链存在一定的差异，所以我们暂时不能使用 社区版本。</p><p>由于目前工具链没有提供windows版本，所以只能在 Linux下进行，操作，请先参考上述章节 配置ubuntu 虚拟机章节，进行配置，并配置好。</p><h2 id="获取交叉编译工具链" tabindex="-1"><a class="header-anchor" href="#获取交叉编译工具链" aria-hidden="true">#</a> 获取交叉编译工具链</h2><p>我们的源码都存放在不同的git仓库内，其中以github为主要托管，也是最新的状态，同时也会使用 gitee作为备用站点，根据大家的实际情况，来进行选择。</p><ul><li>对于可以访问github的同学 请使用如下命令获取源码</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/DongshanPI/eLinuxCore_dongshannezhastu
<span class="token builtin class-name">cd</span>  eLinuxCore_dongshannezhastu
<span class="token function">git</span> submodule update  <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于无法访问GitHub的同学 请使用如下命令获取源码。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://gitee.com/weidongshan/eLinuxCore_dongshannezhastu.git
<span class="token builtin class-name">cd</span>  eLinuxCore_dongshannezhastu
<span class="token function">git</span> submodule update  <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取完成源码后，需要进入到交叉编译工具链路径到 内，用于验证是否可用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>book@virtual-machine:~/eLinuxCore_dongshannezhastu/toolchain/riscv64-glibc-gcc-thead_20200702/bin$ ./riscv64-unknown-linux-gnu-gcc <span class="token parameter variable">-v</span>
Using built-in specs.
<span class="token assign-left variable">COLLECT_GCC</span><span class="token operator">=</span>./riscv64-unknown-linux-gnu-gcc
<span class="token assign-left variable">COLLECT_LTO_WRAPPER</span><span class="token operator">=</span>/home/book/NezhaSTU/eLinuxCore_dongshannezhastu/toolchain/riscv64-glibc-gcc-thead_20200702/bin/<span class="token punctuation">..</span>/libexec/gcc/riscv64-unknown-linux-gnu/8.1.0/lto-wrapper
Target: riscv64-unknown-linux-gnu
Configured with: /ldhome/software/toolsbuild/slave/workspace/riscv64_build_linux_x86_64/build/<span class="token punctuation">..</span>/source/riscv/riscv-gcc/configure <span class="token parameter variable">--target</span><span class="token operator">=</span>riscv64-unknown-linux-gnu --with-mpc<span class="token operator">=</span>/ldhome/software/toolsbuild/slave/workspace/riscv64_build_linux_x86_64/lib-for-gcc-x86_64-linux/ --with-mpfr<span class="token operator">=</span>/ldhome/software/toolsbuild/slave/workspace/riscv64_build_linux_x86_64/lib-for-gcc-x86_64-linux/ --with-gmp<span class="token operator">=</span>/ldhome/software/toolsbuild/slave/workspace/riscv64_build_linux_x86_64/lib-for-gcc-x86_64-linux/ <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/ldhome/software/toolsbuild/slave/workspace/riscv64_build_linux_x86_64/install --with-sysroot<span class="token operator">=</span>/ldhome/software/toolsbuild/slave/workspace/riscv64_build_linux_x86_64/install/sysroot --with-system-zlib --enable-shared --enable-tls --enable-languages<span class="token operator">=</span>c,c++,fortran --disable-libmudflap --disable-libssp --disable-libquadmath --disable-nls --disable-bootstrap <span class="token parameter variable">--src</span><span class="token operator">=</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/source/riscv/riscv-gcc --enable-checking<span class="token operator">=</span>yes --with-pkgversion<span class="token operator">=</span><span class="token string">&#39;C-SKY RISCV Tools V1.8.4 B20200702&#39;</span> --enable-multilib --with-abi<span class="token operator">=</span>lp64d --with-arch<span class="token operator">=</span>rv64gcxthead <span class="token string">&#39;CFLAGS_FOR_TARGET=-O2  -mcmodel=medany&#39;</span> <span class="token string">&#39;CXXFLAGS_FOR_TARGET=-O2  -mcmodel=medany&#39;</span> <span class="token assign-left variable">CC</span><span class="token operator">=</span>gcc <span class="token assign-left variable">CXX</span><span class="token operator">=</span>g++
Thread model: posix
gcc version <span class="token number">8.1</span>.0 <span class="token punctuation">(</span>C-SKY RISCV Tools V1.8.4 B20200702<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成以后 我们就可以加入到 系统的 PATH环境变量内。</p><p>首先 需要获取 交叉编译工具链 所在的绝对路径，进入到 <code>eLinuxCore_dongshannezhastu/toolchain/riscv64-glibc-gcc-thead_20200702/bin</code>目录下执行 <strong>pwd</strong> 命令，即可得到绝对路径 <code> /home/book/eLinuxCore_dongshannezhastu/toolchain/riscv64-glibc-gcc-thead_20200702/bin</code> 。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>book@virtual-machine:~/eLinuxCore_dongshannezhastu/toolchain/riscv64-glibc-gcc-thead_20200702/bin$ <span class="token builtin class-name">pwd</span>
/home/book/eLinuxCore_dongshannezhastu/toolchain/riscv64-glibc-gcc-thead_20200702/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，可以在终端下执行如下命令，讲这个加入到系统 环境变量内，这样就可以在任意位置执行 交叉编译工具链了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/home/book/eLinuxCore_dongshannezhastu/toolchain/riscv64-glibc-gcc-thead_20200702/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：此方式只针对当前的终端有效，如果你关闭了这个终端，再次开启终端 需要重新执行才可以。</p><p>还有另一种永久生效的方式 就是写入到 系统环境变量里面，需要修改 <strong>/etc/environment</strong> 在末尾加上 你获取到的交叉编译工具链绝对路径,注意修改需要使用 sudo 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>book@virtual-machine:~$ <span class="token function">cat</span> /etc/environment
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/book/eLinuxCore_dongshannezhastu/toolchain/riscv64-glibc-gcc-thead_20200702/bin&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编写hello-word程序" tabindex="-1"><a class="header-anchor" href="#编写hello-word程序" aria-hidden="true">#</a> 编写Hello word程序</h2><ul><li>配置好交叉编译工具链以后，就可以开始编写我们的应用程序了，如下为一个最简单的 hello word打印示例程序。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello word!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写完成后，保存到 helloword.c</p><p>之后我们执行 如下编译命令进行编译</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>book@virtual-machine:~$ <span class="token function">vim</span> helloword.c 
book@virtual-machine:~$ riscv64-unknown-linux-gnu-gcc <span class="token parameter variable">-o</span> helloword helloword.c
book@virtual-machine:~$ <span class="token function">file</span> helloword
helloword: ELF <span class="token number">64</span>-bit LSB executable, UCB RISC-V, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, dynamically linked, interpreter /lib/ld-linux-riscv64xthead-lp64d.so.1, <span class="token keyword">for</span> GNU/Linux <span class="token number">4.15</span>.0, with debug_info, not stripped
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拷贝到开发板" tabindex="-1"><a class="header-anchor" href="#拷贝到开发板" aria-hidden="true">#</a> 拷贝到开发板</h2><p>怎么拷贝文件到开发板上？ 有U盘 ADB 网络 串口等等。</p><p>那么我们优先推进使用 网络方式，网络也有很多，有TFTP传输，有nfs传输，有SFTP传输，其中nfs传输需要内核支持 nfs文件系统，SFTP需要根文件系统支持 openssh组件服务，那么最终我们还是选用tftp服务。</p><h3 id="使用tftp网络服务" tabindex="-1"><a class="header-anchor" href="#使用tftp网络服务" aria-hidden="true">#</a> 使用tftp网络服务</h3><ol><li>首先，需要你的ubuntu系统支持 tftp服务，已经配置并且安装好，然后讲编译出来的 helloword程序 拷贝到 tftp目录下。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>book@virtual-machine:~$ <span class="token function">cp</span> helloword ~/tftpboot/
book@virtual-machine:~$ <span class="token function">ls</span> ~/tftpboot/helloword
/home/book/tftpboot/helloword
book@virtual-machine:~$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>进入到开发板内，首先让开发板可以获取到IP地址，并且可以和 ubuntu系统ping通(这里指的是编译helloword主机)，之后我们在开发板上 获取 helloword 应用程序，并执行。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># udhcpc</span>
udhcpc: started, v1.35.0
udhcpc: broadcasting discover
udhcpc: broadcasting <span class="token keyword">select</span> <span class="token keyword">for</span> <span class="token number">192.168</span>.1.47, server <span class="token number">192.168</span>.1.1
udhcpc: lease of <span class="token number">192.168</span>.1.47 obtained from <span class="token number">192.168</span>.1.1, lease <span class="token function">time</span> <span class="token number">86400</span>
deleting routers
adding dns <span class="token number">192.168</span>.1.1
<span class="token comment"># tftp -g -r helloword 192.168.1.133</span>
<span class="token comment"># ls</span>
helloword

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，我的ubuntu主机IP地址是 192.168.1.133 ，所以使用tftp 从 ubuntu获取helloword 程序，获取速度根据网速而定。</p><h3 id="使用usb-adb方式" tabindex="-1"><a class="header-anchor" href="#使用usb-adb方式" aria-hidden="true">#</a> 使用usb adb方式</h3><ul><li>后面我们将会介绍如何使用 usb otg adb命令传输文件。</li></ul><h2 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h2><p>下载好程序以后，需要使用chmod +x 命令来给程序添加可执行权限，之后 我们就可以执行 这个helloword应用了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># chmod +x helloword</span>
<span class="token comment"># ./helloword</span>
hello word<span class="token operator">!</span>
<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),o=[l];function t(c,r){return s(),a("div",null,o)}const p=n(i,[["render",t],["__file","05-1_RunHelloword.html.vue"]]);export{p as default};
