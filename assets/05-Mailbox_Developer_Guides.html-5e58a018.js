import{_ as n,o as s,c as a,e}from"./app-21fd3c9b.js";const t={},o=e(`<h1 id="mailbox-框架开发指南" tabindex="-1"><a class="header-anchor" href="#mailbox-框架开发指南" aria-hidden="true">#</a> mailbox 框架开发指南</h1><h2 id="_1-框架分析" tabindex="-1"><a class="header-anchor" href="#_1-框架分析" aria-hidden="true">#</a> 1 框架分析</h2><h3 id="_1-1-client、controller-与-framework" tabindex="-1"><a class="header-anchor" href="#_1-1-client、controller-与-framework" aria-hidden="true">#</a> 1.1 client、controller 与 framework</h3><p>  mailbox 框架用于处理多处理器之间的通信。框架分为 controller 与 client。<br>   controller 是直接操作硬件 mailbox 的驱动。它向下直接操作硬件寄存器，通过发送与接收中断（如果硬件支持）完成与 remote 的通信；向上通过框架提供的接口完成与 client 驱动的交流。   client 是 controller 的消费者，向下与 controller 沟通，完成通道申请，数据准备等功能；向上提供可供用户空间操作的接口。<br>   mailbox 框架所负责的就是 controller 与 client 之间的接口，内核文档中说：“client 和 controller 驱动程序可能是会非常依赖于特定平台的，因此，client 驱动大概率不能在多个平台之间共享”，所以在<code>/drivers/mailbox</code>目录下，只能找到有关 controller 的驱动而找不到 client 的驱动，只能找到一个测试 controller 的<code>mailbox-test.c</code>的 client 驱动。client 驱动如何与用户空间交换数据也就由驱动开发者自己决定。<br>   下图是两个驱动注册的基本框架：</p><p><img src="http://photos.100ask.net/canaan-docs/130101_frame_00.svg" alt="frame"></p><h3 id="_1-2-数据结构" tabindex="-1"><a class="header-anchor" href="#_1-2-数据结构" aria-hidden="true">#</a> 1.2 数据结构</h3><p>  controller 与 client 的数据结构如下图所示：</p><p><img src="http://photos.100ask.net/canaan-docs/130102_data_structure.svg" alt="data_structure"></p><p>  框架中使用<code>struct mbox_controller</code>抽象 mailbox 控制器，使用<code>struct mbox_chan</code>抽象通道，使用函数集合<code>struct mbox_chan_ops</code>来对通道进行操作。上面三个数据结构是针对 controller 的。框架使用<code>struct mbox_client</code>抽象客户端，是针对 client 的。<br>   除此之外，我们需要针对我们的设备与驱动定义一个我们自己的设备结构体，如上图所示。client 与 controller 的联系是通过在 client 中申请通道时，在<code>mbox_request_channel</code>函数中完成的，一个通道绑定一个<code>struct mbox_client</code>结构体。</p><h3 id="_1-3-函数调用流程" tabindex="-1"><a class="header-anchor" href="#_1-3-函数调用流程" aria-hidden="true">#</a> 1.3 函数调用流程</h3><p>  函数调用流程如下图所示：</p><p><img src="http://photos.100ask.net/canaan-docs/130103_frame_callback.svg" alt="frame_callback"></p><p>  用户空间与 client 驱动的数据传递使用 ioctl 加异步通知的方式，这一部分内容由驱动开发者自己决定，不属于框架的内容。<br>   我们在 client 驱动中创建了设备节点<code>/dev/mailbox-client</code>，用户空间通过此文件进行数据读取与发送。8 个发送通道，8 个接收通道。</p><h4 id="_1-3-1-发送数据流程" tabindex="-1"><a class="header-anchor" href="#_1-3-1-发送数据流程" aria-hidden="true">#</a> 1.3.1 发送数据流程</h4><p>  如上图所示：</p><ol><li>用户空间操作文件句柄发送数据；</li><li>进入 client 驱动的 ioctl 函数，此函数将用户空间数据复制到内核空间，最终调用了<code>mbox_send_message</code>函数；</li><li>此函数的具体处理流程可以看后面章节的代码分析，主要就是调用了两个回调函数：client 驱动实现的<code>tx_prepare</code>，controller 驱动实现的<code>send_data</code>。看名字就可以知道这两个函数的作用。需要注意的是，有些硬件的 mailbox 是有硬件数据传输寄存器的，那么此时，数据传输就可以在<code>send_data</code>中完成；有些硬件没有硬件数据传输寄存器，那么也可以在<code>tx_prepare</code>中完成实际的数据传输，<code>send_data</code>的作用就变成了单纯的<strong>触发中断通知远端处理器</strong>；</li><li>当远端处理器收到中断，并接收数据以后，需要回复给 controller 一个中断表明 Tx 已经完成；</li><li>收到 Tx ACK 以后，controller 注册的中断处理函数需要调用<code>mbox_chan_txdone</code>来通知上层本次传输已被远端接收；</li><li><code>mbox_chan_txdone</code>通过 client 注册的<code>tx_done</code>来告知 client 本次传输已完成。由 client 决定后续处理，<code>tx_done</code>的参数记录了数据传输的状态。</li></ol><h4 id="_1-3-1-接收数据流程" tabindex="-1"><a class="header-anchor" href="#_1-3-1-接收数据流程" aria-hidden="true">#</a> 1.3.1 接收数据流程</h4><p>  如上图所示：</p><ol><li>远端处理器发送给 controller 传输数据的中断；</li><li>收到中断以后，controller 注册的中断处理函数调用<code>mbox_chan_received_data</code>通知上层收到远端传来的数据，并回复给远端 Rx ACK。</li><li><code>mbox_chan_received_data</code>调用客户端注册的<code>rx_callback</code>；</li><li><code>rx_callback</code>中从设备树指定的地址读取数据，然后使用异步通知的方式通知用户空间；</li><li>用户空间的异步处理函数中调用 ioctl 读取接收通道的数据。</li></ol><h2 id="_2-框架代码分析" tabindex="-1"><a class="header-anchor" href="#_2-框架代码分析" aria-hidden="true">#</a> 2 框架代码分析</h2><h3 id="_2-1-mailbox-controller-h" tabindex="-1"><a class="header-anchor" href="#_2-1-mailbox-controller-h" aria-hidden="true">#</a> 2.1 mailbox_controller.h</h3><p>  定义了<code>mbox_controller</code>（对 mailbox 硬件的抽象）、<code>mbox_chan</code>（对 channel 的抽象）<code>mbox_chan_ops</code>（操作 channel 的回调函数的集合）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">mbox_controller</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 此 controller 对应的设备，在 probe 时赋值，dev = &amp;pdev-&gt;dev */</span>
    <span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">;</span>                  
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">mbox_chan_ops</span> <span class="token operator">*</span>ops<span class="token punctuation">;</span>    <span class="token comment">// 对 channel 进行操作的函数集合</span>
    <span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chans<span class="token punctuation">;</span>            <span class="token comment">// channel 的指针数组，channel 的集合</span>
    <span class="token keyword">int</span> num_chans<span class="token punctuation">;</span>                      <span class="token comment">// 支持的 channel 的个数</span>
    <span class="token comment">/* 是否支持通过中断来检查 remote 消费了一条消息。
        * 例如：硬件上有一些 TX ACK irq（传输完成后收到中断回复表明传输完成了） */</span>
    bool txdone_irq<span class="token punctuation">;</span>                  
    <span class="token comment">/* 是否支持通过 poll 机制来检查 remote 消费了一条消息。
        * 此标志用于硬件没有 TX ACK irq 机制，但是可以通过查询相关寄存器的某些位
        * 来检查是否完成传输。如果设置了 txdone_irq，此标志位会被忽略 */</span>  
    bool txdone_poll<span class="token punctuation">;</span>                   
    <span class="token keyword">unsigned</span> txpoll_period<span class="token punctuation">;</span>             <span class="token comment">// POLL 周期，以 ms 计</span>
    <span class="token comment">/* controller 驱动中通过此函数返回设备树参数中设定的通道 */</span>
    <span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>of_xlate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_controller</span> <span class="token operator">*</span>mbox<span class="token punctuation">,</span>
                        <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">of_phandle_args</span> <span class="token operator">*</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Internal to API */</span>
    <span class="token keyword">struct</span> <span class="token class-name">hrtimer</span> poll_hrt<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">mbox_controller</span> <span class="token operator">*</span>mbox<span class="token punctuation">;</span>           <span class="token comment">// 此通道所属的 controller</span>
    <span class="token keyword">unsigned</span> txdone_method<span class="token punctuation">;</span>                 <span class="token comment">// 传输完成的通知方式，在 mailbox.h中定义</span>
    <span class="token comment">/* 指向占有此 channel 的 client 的指针，client 在 client driver 中声明 */</span>
    <span class="token keyword">struct</span> <span class="token class-name">mbox_client</span> <span class="token operator">*</span>cl<span class="token punctuation">;</span>                 
    <span class="token keyword">struct</span> <span class="token class-name">completion</span> tx_complete<span class="token punctuation">;</span>          
    <span class="token keyword">void</span> <span class="token operator">*</span>active_req<span class="token punctuation">;</span>                       <span class="token comment">// 如果不为 NULL，说明还有数据在传输</span>
    <span class="token keyword">unsigned</span> msg_count<span class="token punctuation">,</span> msg_free<span class="token punctuation">;</span>           <span class="token comment">// 在代码中会详细分析</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>msg_data<span class="token punctuation">[</span>MBOX_TX_QUEUE_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">spinlock_t</span> lock<span class="token punctuation">;</span> <span class="token comment">/* Serialise access to the channel */</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>con_priv<span class="token punctuation">;</span>                         <span class="token comment">// controller 的私有数据，我用作了channel number</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * struct mbox_chan_ops - 控制 mailbox channels 的函数
 * @send_data: 此 API 在 MBOX 驱动中使用, 在原子上下文中尝试在总线上
 *      发送消息. 如果发送的消息被远端接受，则返回0；如果远端还没有读取
 *      上一次的数据，会被拒绝并返回 -EBUSY（这个 -EBUSY 怎么使用还没
 *      看懂）。如果有 TX ACK irq 的话，实际的数据传输完成的通知是由 MBOX 
 *      controller 通过 mbox_chan_txdone 来完成的（在中断中）。此函数
 *      禁止睡眠。
 *      实际上，如果硬件没有发送数据的寄存器，那此函数只进行开始传输数据
 *      的通知。例如触发 remote 的中断，告诉远端开始发送数据了。
 * @startup: Called when a client requests the chan. The controller
 *      could ask clients for additional parameters of communication
 *      to be provided via client&#39;s chan_data. This call may
 *      block. After this call the Controller must forward any
 *      data received on the chan by calling mbox_chan_received_data.
 *      The controller may do stuff that need to sleep.
 * @shutdown:  Called when a client relinquishes control of a chan.
 *      This call may block too. The controller must not forward
 *      any received data anymore.
 *      The controller may do stuff that need to sleep.
 * @last_tx_done: If the controller sets &#39;txdone_poll&#39;, the API calls
 *        this to poll status of last TX. The controller must
 *        give priority to IRQ method over polling and never
 *        set both txdone_poll and txdone_irq. Only in polling
 *        mode &#39;send_data&#39; is expected to return -EBUSY.
 *        The controller may do stuff that need to sleep/block.
 *        Used only if txdone_poll:=true &amp;&amp; txdone_irq:=false
 * @peek_data: Atomic check for any received data. Return true if controller
 *        has some data to push to the client. False otherwise.
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">mbox_chan_ops</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>send_data<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>startup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>shutdown<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span>last_tx_done<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span>peek_data<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* 
 * client 要送的消息的 buffer 队列，此队列是循环缓冲区。
 * &#39;msg_count&#39; 记录缓冲消息的数量；
 * &#39;msg_free&#39; 是下一条将被缓存的消息的 index。
 * 此缓冲区长度不需要太大，因为每次传输都会触发中断，如果有大量数据需要传输，
 * 终端延迟将会成为瓶颈，而不是缓冲区长度。
 * 此外，mbox_send_message 可以在原子上下文中调用，并且 client 可以在它的
 * 回调函数 tx_done 中发送下一条要发送的数据（tx_done 是传输完成的通知函数）。
 */</span>
##define MBOX_TX_QUEUE_LEN   <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-mailbox-client-h" tabindex="-1"><a class="header-anchor" href="#_2-2-mailbox-client-h" aria-hidden="true">#</a> 2.2 mailbox_client.h</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * struct mbox_client - User of a mailbox
 * @dev:            此 client 对应的设备
 * @tx_block:       如果 mbox_send_message 在数据传输完之前应该是阻塞的，那么
 *                  设置为 true。
 * @tx_tout:        最大阻塞时间，如果超过此时间，认为传输失败。
 * @knows_txdone:   在可以知道 TX 状态的机器上使用. 如果已经有了 TX_Done/RTR 
 *                  中断，那就不需要此位，置为 false 即可。
 * @rx_callback:    Atomic callback to provide client the data received
 * @tx_prepare:     原子回调函数，在初始化开始传输的寄存器之前，在此函数中准备
 *                  要传输的数据。
 *                  实际上：如果硬件只负责通知消息已经开始传输（例如触发远端中
 *                  断），而没有实际的数据传输寄存器，那么在此函数中完成实际的
 *                  数据传输（从源地址拷贝到目的地址）。
 * @tx_done:        原子回调函数，通知 client 传输已经完成，可以在此函数中准备
 *                  下一次要发送的数据，见 MBOX_TX_QUEUE_LEN 的注释。
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">mbox_client</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">;</span>
    bool tx_block<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> tx_tout<span class="token punctuation">;</span>
    bool knows_txdone<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>rx_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_client</span> <span class="token operator">*</span>cl<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>mssg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>tx_prepare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_client</span> <span class="token operator">*</span>cl<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>mssg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>tx_done<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_client</span> <span class="token operator">*</span>cl<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>mssg<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-mailbox-c" tabindex="-1"><a class="header-anchor" href="#_2-3-mailbox-c" aria-hidden="true">#</a> 2.3 mailbox.c</h3><h4 id="_2-3-1-add-to-rbuf" tabindex="-1"><a class="header-anchor" href="#_2-3-1-add-to-rbuf" aria-hidden="true">#</a> 2.3.1 add_to_rbuf</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 
 * 缓存通道传输的消息。
 * &#39;msg_count&#39; 记录缓冲消息的数量；
 * &#39;msg_free&#39; 是下一条将被缓存的消息的 index。
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add_to_rbuf</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>mssg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  该函数逻辑如下：</p><p><img src="http://photos.100ask.net/canaan-docs/130203_add_to_rbuf.svg" alt="add_to_rbuf"></p><h4 id="_2-3-2msg-submit" tabindex="-1"><a class="header-anchor" href="#_2-3-2msg-submit" aria-hidden="true">#</a> 2.3.2msg_submit</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 判断存在有效数据以后，调用准备数据和发送数据的回调函数。*/</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">msg_submit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* 
    * index -= count 是为了取出还未传输的最早缓存的 data
    * 缓存区是环形的，当 index &lt; count 时，需要 + MBOX_TX_QUEUE_LEN - count。
    */</span>
    count <span class="token operator">=</span> chan<span class="token operator">-&gt;</span>msg_count<span class="token punctuation">;</span>
    idx <span class="token operator">=</span> chan<span class="token operator">-&gt;</span>msg_free<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">&gt;=</span> count<span class="token punctuation">)</span>
        idx <span class="token operator">-=</span> count<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        idx <span class="token operator">+=</span> MBOX_TX_QUEUE_LEN <span class="token operator">-</span> count<span class="token punctuation">;</span>

    data <span class="token operator">=</span> chan<span class="token operator">-&gt;</span>msg_data<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  该函数逻辑如下：</p><p><img src="http://photos.100ask.net/canaan-docs/130203_msg_submit.svg" alt="msg_submit"></p><h4 id="_2-3-3-tx-tick" tabindex="-1"><a class="header-anchor" href="#_2-3-3-tx-tick" aria-hidden="true">#</a> 2.3.3 tx_tick</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 
 * 此函数的作用应该是更新状态，在 txdone 传输完成函数中调用，或者超时以后
 * 调用此函数。
 * 如果正确传输完成，complete(&amp;chan-&gt;tx_complete) 结束此次传输。
 *
 * active_req 在此函数中清空。
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tx_tick</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">/* 如果缓冲区还有消息，会继续发送下一条，如果没有，
        msg_submit 函数会直接返回 */</span>
    <span class="token function">msg_submit</span><span class="token punctuation">(</span>chan<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Notify the client */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>chan<span class="token operator">-&gt;</span>cl<span class="token operator">-&gt;</span>tx_done<span class="token punctuation">)</span>
        chan<span class="token operator">-&gt;</span>cl<span class="token operator">-&gt;</span><span class="token function">tx_done</span><span class="token punctuation">(</span>chan<span class="token operator">-&gt;</span>cl<span class="token punctuation">,</span> mssg<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token operator">-</span>ETIME <span class="token operator">&amp;&amp;</span> chan<span class="token operator">-&gt;</span>cl<span class="token operator">-&gt;</span>tx_block<span class="token punctuation">)</span>
        <span class="token function">complete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token operator">-&gt;</span>tx_complete<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-4-mbox-chan-received-data" tabindex="-1"><a class="header-anchor" href="#_2-3-4-mbox-chan-received-data" aria-hidden="true">#</a> 2.3.4 mbox_chan_received_data</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 
 * 此函数的作用是在 controller 驱动接收到远端数据时，调用此函数来通知
 * 上层（client）接收到的数据。通知上层的方式是调用 client 中的回调函
 * 数 rx_callback。
 * @chan: RX chennel
 * @mssg: 数据指针，如果没有传输数据的寄存器，可以为空
 * 
 * 一般在 controller 驱动的中断处理函数中调用，在收到远端传输数据的中断
 * 后调用。
 */</span>
<span class="token keyword">void</span> <span class="token function">mbox_chan_received_data</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>mssg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-5-mbox-chan-txdone" tabindex="-1"><a class="header-anchor" href="#_2-3-5-mbox-chan-txdone" aria-hidden="true">#</a> 2.3.5 mbox_chan_txdone</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 
 * controller 驱动中通知框架数据传输完成的方式，在 controller 驱动的中
 * 断处理函数中调用，在接收到远端 ACK irq 以后调用。
 * 调用了 tx_tick 来完成状态更新。
 */</span>
<span class="token keyword">void</span> <span class="token function">mbox_chan_txdone</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-6-mbox-client-txdone" tabindex="-1"><a class="header-anchor" href="#_2-3-6-mbox-client-txdone" aria-hidden="true">#</a> 2.3.6 mbox_client_txdone</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 
 * 在 client 驱动中完成 tx 状态更新的方式
 * 此函数主要是为了不支持 ACK irq 的芯片服务的。例如，txdone_poll 的方式，
 * 芯片提供 tx 传输完成的标志位，此时，可以在 client 驱动中调用此函数完成
 * tx 状态更新。
 */</span>
<span class="token keyword">void</span> <span class="token function">mbox_client_txdone</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-7-mbox-send-message" tabindex="-1"><a class="header-anchor" href="#_2-3-7-mbox-send-message" aria-hidden="true">#</a> 2.3.7 mbox_send_message</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 
 * 为了 client 驱动准备的向 remote 传输数据的函数。
 * 如果在 client 中设置为 tx_block，此函数会在远端接收数据以后或者超时 
 * tx_out 以后返回。
 */</span>
<span class="token function">mbox_send_message</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>mssg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  该函数逻辑如下：</p><p><img src="http://photos.100ask.net/canaan-docs/130203_mbox_send_message.svg" alt="mbox_send_message"></p><h4 id="_2-3-8-mbox-request-channel" tabindex="-1"><a class="header-anchor" href="#_2-3-8-mbox-request-channel" aria-hidden="true">#</a> 2.3.8 mbox_request_channel</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 
 * cl：请求通道的 client，在 client 驱动中调用，当客户端驱动声明了一个
 *     struct mbox_client 变量，并为其各个成员赋值以后，调用此函数来
 *     绑定 client 和 chan。
 * index：设备树中的通道的索引，下面会分析。
 * 返回值：如果 client 申请 channel 成功，返回对应 channel 的指针。
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span><span class="token function">mbox_request_channel</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_client</span> <span class="token operator">*</span>cl<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">of_parse_phandle_with_args</span><span class="token punctuation">(</span>dev<span class="token operator">-&gt;</span>of_node<span class="token punctuation">,</span> <span class="token string">&quot;mboxes&quot;</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;##mbox-cells&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token operator">&amp;</span>spec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">dev_dbg</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token string">&quot;%s: can&#39;t parse \\&quot;mboxes\\&quot; property\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>con_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">ERR_PTR</span><span class="token punctuation">(</span><span class="token operator">-</span>ENODEV<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    chan <span class="token operator">=</span> <span class="token function">ERR_PTR</span><span class="token punctuation">(</span><span class="token operator">-</span>EPROBE_DEFER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_for_each_entry</span><span class="token punctuation">(</span>mbox<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mbox_cons<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mbox<span class="token operator">-&gt;</span>dev<span class="token operator">-&gt;</span>of_node <span class="token operator">==</span> spec<span class="token punctuation">.</span>np<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            chan <span class="token operator">=</span> mbox<span class="token operator">-&gt;</span><span class="token function">of_xlate</span><span class="token punctuation">(</span>mbox<span class="token punctuation">,</span> <span class="token operator">&amp;</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    chan<span class="token operator">-&gt;</span>msg_free <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    chan<span class="token operator">-&gt;</span>msg_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    chan<span class="token operator">-&gt;</span>active_req <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    chan<span class="token operator">-&gt;</span>cl <span class="token operator">=</span> cl<span class="token punctuation">;</span>
    <span class="token function">init_completion</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token operator">-&gt;</span>tx_complete<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  此函数，通过<code>of_parse_phandle_with_args</code>来从设备树中获得 index 对应请求的 channel。</p><ul><li><code>mboxes</code>指向节点中 phandle 列表属性名；</li><li><code>##mbox-cells</code>指明 phandle 指向的节点所含的 cell 个数；</li><li><code>index</code>表示 phandle 列表的索引，0 代表第一个 phandle，1 代表第二个 phandle；</li><li><code>out_args</code>存储 phandle 中的参数。</li></ul><p>  例如，在我们的设备树中</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 
 * ##mbox-cells 指明了 mboxes 属性只有一个 cell；
 * mboxes 是对应的通道的参数列表，我们将其用作了通道的索引
 * 此时，在 client 中调用上面申请通道的函数时，index = 1，就得到了
 * &lt;&amp;mailbox 1&gt;，然后在 of_xlate 函数中进行处理并返回对应 channel 
 * 的指针。（of_xlate 函数是controller 驱动中注册的回调，可以参看
 * mbox_controller 结构体。）
 */</span>
<span class="token operator">&amp;</span>mailbox <span class="token punctuation">{</span>
    ##mbox<span class="token operator">-</span>cells <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>manage_subsys <span class="token punctuation">{</span>
    mailbox_client<span class="token operator">:</span> mailbox_client@<span class="token number">0</span> <span class="token punctuation">{</span>
        mboxes <span class="token operator">=</span>    <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">0</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                    <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">12</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">13</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">14</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">15</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
        mbox<span class="token operator">-</span>names <span class="token operator">=</span> <span class="token string">&quot;tx_chan_0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tx_chan_1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tx_chan_2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tx_chan_3&quot;</span><span class="token punctuation">,</span> 
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                    <span class="token string">&quot;rx_chan_7&quot;</span><span class="token punctuation">;</span>                    
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  后面是对通道信息的初始化，包括缓存计数的清零，chan 的 cl 和客户端申请 channel 的 client 绑定，tx_complete 的初始化等。<br>   该函数逻辑如下：</p><p><img src="http://photos.100ask.net/canaan-docs/130203_mbox_request_channel.svg" alt="mbox_request_channel"></p><h4 id="_2-3-9-mbox-request-channel-byname" tabindex="-1"><a class="header-anchor" href="#_2-3-9-mbox-request-channel-byname" aria-hidden="true">#</a> 2.3.9 mbox_request_channel_byname</h4><p>  此函数就是根据 name（mbox-names 属性） 从设备树中获取对应的 mboxes 列表，最后还是调用了 mbox_request_channel 函数申请通道。</p><h4 id="_2-3-10-mbox-free-channel" tabindex="-1"><a class="header-anchor" href="#_2-3-10-mbox-free-channel" aria-hidden="true">#</a> 2.3.10 mbox_free_channel</h4><p>  通道释放函数，将指定通道的成员清空，如果对应的硬件寄存器需要配置的，实现<code>shutdown</code>回调函数。</p><h4 id="_2-3-11-mbox-controller-register-和-mbox-controller-unregister" tabindex="-1"><a class="header-anchor" href="#_2-3-11-mbox-controller-register-和-mbox-controller-unregister" aria-hidden="true">#</a> 2.3.11 mbox_controller_register 和 mbox_controller_unregister</h4><p>  顾名思义。</p><h2 id="_3-设备树分析" tabindex="-1"><a class="header-anchor" href="#_3-设备树分析" aria-hidden="true">#</a> 3 设备树分析</h2><p>  示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* controller */</span>
mailbox<span class="token operator">:</span> mailbox@<span class="token number">970e0000</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    compatible          <span class="token operator">=</span> <span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    ##mbox<span class="token operator">-</span>cells <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* client */</span>
<span class="token operator">&amp;</span>manage_subsys <span class="token punctuation">{</span>
    mailbox_client<span class="token operator">:</span> mailbox_client@<span class="token number">0</span> <span class="token punctuation">{</span>
        compatible <span class="token operator">=</span> <span class="token string">&quot;mailbox-client&quot;</span><span class="token punctuation">;</span>
        mboxes <span class="token operator">=</span>    <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">0</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                    <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">12</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">13</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">14</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>mailbox <span class="token number">15</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
        mbox<span class="token operator">-</span>names <span class="token operator">=</span> <span class="token string">&quot;tx_chan_0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tx_chan_1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tx_chan_2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tx_chan_3&quot;</span><span class="token punctuation">,</span> 
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
                    <span class="token string">&quot;rx_chan_4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rx_chan_5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rx_chan_6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rx_chan_7&quot;</span><span class="token punctuation">;</span>                    
        reg <span class="token operator">=</span>   <span class="token operator">&lt;</span><span class="token number">0x1</span> <span class="token number">0x087ffe00</span> <span class="token number">0x0</span> <span class="token number">0x20</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">/* cpu2dsp channel 0 */</span>
                <span class="token operator">&lt;</span><span class="token number">0x1</span> <span class="token number">0x087ffe20</span> <span class="token number">0x0</span> <span class="token number">0x20</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">/* cpu2dsp channel 1 */</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token operator">&lt;</span><span class="token number">0x1</span> <span class="token number">0x087fffc0</span> <span class="token number">0x0</span> <span class="token number">0x20</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">/* dsp2cpu channel 6 */</span>
                <span class="token operator">&lt;</span><span class="token number">0x1</span> <span class="token number">0x087fffe0</span> <span class="token number">0x0</span> <span class="token number">0x20</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">/* dsp2cpu channel 7 */</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-controller" tabindex="-1"><a class="header-anchor" href="#_3-1-controller" aria-hidden="true">#</a> 3.1 controller</h3><p>  必须有属性<code>##mbox-cells</code>，值至少为 1。它指明了 client 属性<code>mboxes</code> cell 的个数。</p><h3 id="_3-2-client" tabindex="-1"><a class="header-anchor" href="#_3-2-client" aria-hidden="true">#</a> 3.2 client</h3><p>  必须有属性<code>mboxes</code>，它会提供给驱动通道的信息。<br>   可选属性<code>mbox-names</code>，是<code>mboxes</code>的别名。<br>   可选属性<code>reg</code>，mailbox client 与 remote 通信而保留的任何内存的一部分。</p><h3 id="_3-3-该属性的使用方法" tabindex="-1"><a class="header-anchor" href="#_3-3-该属性的使用方法" aria-hidden="true">#</a> 3.3 该属性的使用方法</h3><p>  <code>mbox-cells</code>、<code>mboxes</code>、<code>mbox-names</code>三个属性是在申请通道时用到的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token comment">/* mailbox.c */</span>
<span class="token keyword">struct</span> <span class="token class-name">of_phandle_args</span> spec<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">of_parse_phandle_with_args</span><span class="token punctuation">(</span>dev<span class="token operator">-&gt;</span>of_node<span class="token punctuation">,</span> <span class="token string">&quot;mboxes&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;##mbox-cells&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token operator">&amp;</span>spec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">dev_dbg</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token string">&quot;%s: can&#39;t parse \\&quot;mboxes\\&quot; property\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>con_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">ERR_PTR</span><span class="token punctuation">(</span><span class="token operator">-</span>ENODEV<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

chan <span class="token operator">=</span> <span class="token function">ERR_PTR</span><span class="token punctuation">(</span><span class="token operator">-</span>EPROBE_DEFER<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">list_for_each_entry</span><span class="token punctuation">(</span>mbox<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mbox_cons<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbox<span class="token operator">-&gt;</span>dev<span class="token operator">-&gt;</span>of_node <span class="token operator">==</span> spec<span class="token punctuation">.</span>np<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        chan <span class="token operator">=</span> mbox<span class="token operator">-&gt;</span><span class="token function">of_xlate</span><span class="token punctuation">(</span>mbox<span class="token punctuation">,</span> <span class="token operator">&amp;</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">/* controller driver */</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">mbox_chan</span> <span class="token operator">*</span><span class="token function">canaan_mailbox_xlate</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mbox_controller</span> <span class="token operator">*</span>controller<span class="token punctuation">,</span>
                        <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">of_phandle_args</span> <span class="token operator">*</span>spec<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ch <span class="token operator">=</span> spec<span class="token operator">-&gt;</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>mbox<span class="token operator">-&gt;</span>chan<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  在这里我们将其用作了通道号，也可以添加别的特定于硬件的信息，具体解释由驱动开发者自行决定。</p><h2 id="_4-驱动实现" tabindex="-1"><a class="header-anchor" href="#_4-驱动实现" aria-hidden="true">#</a> 4 驱动实现</h2><ul><li>dts 配置   参见上面设备树示例。</li><li>controller   参考<code>/drivers/mailbox/canaan-mailbox.c</code></li><li>client   参考<code>/drivers/mailbox/canaan_mbox_client.c</code></li><li>用户空间程序   参考<code>k510_buildroot/package/mailbox_demo/src/mailbox_async.c</code>和<code>k510_buildroot/package/mailbox_demo/src/mailbox_poll.c</code></li></ul><h2 id="_5-demo-使用方法" tabindex="-1"><a class="header-anchor" href="#_5-demo-使用方法" aria-hidden="true">#</a> 5 demo 使用方法</h2><h3 id="_5-1-使用" tabindex="-1"><a class="header-anchor" href="#_5-1-使用" aria-hidden="true">#</a> 5.1 使用</h3><ol><li>加载 dsp 裸机程序 进入目录<code>/app/dsp_app_new</code>，执行命令<code>./dsp_app mailbox_demo.bin</code>将裸机程序加载到 dsp 中，如下图所示：<br><img src="http://photos.100ask.net/canaan-docs/130601_dsp_load.png" alt="dsp_load"></li><li>运行 Linux 用户空间的测试 app 进入目录<code>/app/mailbox_demo</code>，执行命令<code>./mailbox_async</code>，如下图所示：<br><img src="http://photos.100ask.net/canaan-docs/130602_mailbox_async.png" alt="mailbox_demo"><br> 此 demo 使用异步通知的方式接收 dsp 发送来的数据。</li><li>在目录<code>/app/mailbox_demo</code>中，执行命令<code>./mailbox_poll</code>，如下图所示：<br><img src="http://photos.100ask.net/canaan-docs/130602_mailbox_poll.png" alt="mailbox_demo"> 此 demo 使用 poll 阻塞 500ms 的方式接收 dsp 发送来的数据。我们每隔 4s 发送一次数据，每 2s 读一次数据，因此可以看到每隔 2s，读取成功与读取失败交错打印，阻塞读取是成功的。</li></ol><h3 id="_5-2-测试代码" tabindex="-1"><a class="header-anchor" href="#_5-2-测试代码" aria-hidden="true">#</a> 5.2 测试代码</h3><p>  dsp 裸机程序位于<code>k510_buildroot/package/k510_evb_test/src/test/mailbox_demo/main.c</code>中，用户空间测试代码位于<code>k510_buildroot/package/mailbox_demo/src/mailbox_async.c</code>和<code>k510_buildroot/package/mailbox_demo/src/mailbox_poll.c</code>。</p><h2 id="_6-已知问题" tabindex="-1"><a class="header-anchor" href="#_6-已知问题" aria-hidden="true">#</a> 6 已知问题</h2><p>  偶尔会出现第一次执行命令<code>./dsp_app mailbox_demo.bin</code>时没有将 dsp 程序烧进 dsp 中的情况出现。此时执行 demo 会出现发送失败的情况。</p>`,80),p=[o];function c(l,i){return s(),a("div",null,p)}const u=n(t,[["render",c],["__file","05-Mailbox_Developer_Guides.html.vue"]]);export{u as default};
