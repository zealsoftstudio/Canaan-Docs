import{_ as n,o as s,c as a,e}from"./app-21fd3c9b.js";const t={},p=e(`<h1 id="_10-移植u-boot" tabindex="-1"><a class="header-anchor" href="#_10-移植u-boot" aria-hidden="true">#</a> 10 移植U-Boot</h1><h2 id="_10-1-rtc的作用及时间表示" tabindex="-1"><a class="header-anchor" href="#_10-1-rtc的作用及时间表示" aria-hidden="true">#</a> 10.1 RTC的作用及时间表示</h2><p>​ “RTC”的英文全称是Real-Time Clock，翻译过来是实时时钟芯片。实时时钟芯片是日常生活中应用最为广泛的电子器件之一，它为人们或者电子系统提供精确的实时时间。实时时钟芯片通过引脚对外提供时间读写接口，通常内部带有电池，保证在外部系统关电时，内部电路正常工作，时间正常运行。不同的时钟芯片内部机制不一样，时间数据存储格式、读写操作方式也不一样，Linux系统和驱动封装了不同时钟芯片的操作细节，为应用程序提供了统一的时间操作接口。</p><p>​ 那么在Linux世界里，时间是怎么表示的呢？是不是与人们一样用年月日+时分秒来表示时间呢？聪明的程序员自然不会让计算机这么做，正所谓越简单越科学，直接用一个整数表示时间，这个整数代表当前与Epoch Time的时间差(以秒为单位)。Epoch Time 是指一个特定的时间：1970年1月1日0时0分0秒。假设现在距离1970年1月1日0时0分0秒走了N秒，在Linuxx系统里，时间数值就是N。</p><p>​ 那么问题来了，为什么要从1970年1月1日0时0分0秒开始呢?那年发生了什么，以至于Unix系统以它作“纪元”。原来Unix就是在那个时代产生的，1969年发布的雏形，最早是基于硬件60Hz的时间计数。1971年底出版的《Unix Programmer&#39;s Manual》里定义的Unix Time是以1971年1月1日00:00:00作为起始时间，每秒增长60。后来考虑到如果每秒60个数字，则1.1年后时间值就到达最大，于是改成以秒为计数单位，时间能表示到68.1年之长，就不在乎起始时间是1970还是1971年，遂改成人工记忆、计算比较方便的1970年。于是Unix的世界开启了“纪元”，Unix时间戳也就成为了一个专有名称。后Linux系统沿用了这种定义时间的方式。</p><p>​ 当时计算机操作系统是32位，时间也是用一个32位的有符号数来表示，数据取值范围为-2147483648~2147483647，也就是说时间最大值只能取到2147483647（秒），换算成年也即2147483647÷365÷24÷60÷60=68.1年，也就是说32位能表示的最长时间是1970+68.1=2038年。精确点讲，2038年01月19日03时14分07秒，时间便会达到最大值，为0x7FFFFFFF。过了这个时间点，下一秒时间值便会变为0x80000000，算下来也就是1901年12月13日20时45分52秒，这样便会出现时间回归的现象，很多系统便会运行异常。</p><p>​ 上边说过了，那是Unix系统“元年”时候的事情，32位的时间已经足以解决当时的问题了。现在主流CPU都是64位的，使用64位的数据表示时间也是顺其自然的事，用64位的有符号数来表示时间，可以表示到292，277，026，596年12月4日15时30分08秒，相信我们再也不用愁时间回归的问题了。</p><h2 id="_10-2-rtc的操作命令" tabindex="-1"><a class="header-anchor" href="#_10-2-rtc的操作命令" aria-hidden="true">#</a> 10.2 RTC的操作命令</h2><p>​ 弄清楚了时间怎么表示之后，Linux是怎么使用和维护时间的呢？我们怎么通过Linux操作时间呢？</p><h3 id="_10-2-1-系统时间和硬件时间" tabindex="-1"><a class="header-anchor" href="#_10-2-1-系统时间和硬件时间" aria-hidden="true">#</a> 10.2.1 系统时间和硬件时间</h3><p>​ 在Linux中有系统时钟与硬件时钟两种时钟。系统时间是由CPU主芯片的定时器进行维护的时间，一般情况下都会选择芯片上精度最高的定时器作为系统时间的定时基准，以避免在系统运行较长时间后出现大的时间偏移。特点是系统掉电后，系统时间将丢失。硬件时钟是指系统中包含的RTC芯片内部所维护的时间。RTC芯片都有电池+系统电源的双重供电机制，在系统正常工作时由系统供电，在系统掉电后由电池进行供电。因此系统电源掉电后RTC时间仍然能够正常运行，Linux系统中硬件时钟的基本目的是在Linux不运行时保持时间。</p><p>​ 在Linux启动时，将系统时间从硬件时钟初始化，然后不再使用硬件时钟。在系统开机时，由Linux操作系统从RTC芯片读取硬件时间后，由CPU内部定时器维护时间运行。此后操作系统使用的时间都是系统时间，如果没有显式的通过命令去控制RTC的读写操作，系统将不会再从RTC中去获取或者同步设置时间。</p><h3 id="_10-2-2-系统时间操作命令" tabindex="-1"><a class="header-anchor" href="#_10-2-2-系统时间操作命令" aria-hidden="true">#</a> 10.2.2 系统时间操作命令</h3><p>​ 查看系统时间：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>date
Sat May  <span class="token number">1</span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">19</span> EDT <span class="token number">2020</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 格式化输出：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>date <span class="token operator">+</span><span class="token string">&quot;%Y-%m-%d&quot;</span> 
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">01</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 2秒后输出：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>date <span class="token operator">-</span>d <span class="token string">&quot;2 second&quot;</span> <span class="token operator">+</span><span class="token string">&quot;%Y-%m-%d %H:%M.%S&quot;</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">21.31</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 显示1234567890秒的时间：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>date <span class="token operator">-</span>d <span class="token string">&quot;1970-01-01 1234567890 seconds&quot;</span> <span class="token operator">+</span><span class="token string">&quot;%Y-%m-%d %H:%m:%S&quot;</span>
<span class="token number">2009</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 普通转格式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>date <span class="token operator">-</span>d <span class="token string">&quot;2009-05-01&quot;</span> <span class="token operator">+</span><span class="token string">&quot;%Y/%m/%d %H:%M.%S&quot;</span>
<span class="token number">2020</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">01</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 输出其他日期：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>date <span class="token operator">-</span>d <span class="token string">&quot;+1 day&quot;</span> <span class="token operator">+</span><span class="token operator">%</span>Y<span class="token operator">%</span>m<span class="token operator">%</span>d   #显示后一天的日期 
date <span class="token operator">-</span>d <span class="token string">&quot;-1 day&quot;</span> <span class="token operator">+</span><span class="token operator">%</span>Y<span class="token operator">%</span>m<span class="token operator">%</span>d   #显示前一天的日期 
date <span class="token operator">-</span>d <span class="token string">&quot;-1 month&quot;</span> <span class="token operator">+</span><span class="token operator">%</span>Y<span class="token operator">%</span>m<span class="token operator">%</span>d #显示上一月的日期 
date <span class="token operator">-</span>d <span class="token string">&quot;+1 month&quot;</span> <span class="token operator">+</span><span class="token operator">%</span>Y<span class="token operator">%</span>m<span class="token operator">%</span>d #显示下一月的日期 
date <span class="token operator">-</span>d <span class="token string">&quot;-1 year&quot;</span> <span class="token operator">+</span><span class="token operator">%</span>Y<span class="token operator">%</span>m<span class="token operator">%</span>d  #显示前一年的日期 
date <span class="token operator">-</span>d <span class="token string">&quot;+1 year&quot;</span> <span class="token operator">+</span><span class="token operator">%</span>Y<span class="token operator">%</span>m<span class="token operator">%</span>d  #显示下一年的日期
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 设置系统时间：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>date <span class="token operator">-</span>s <span class="token number">20200501</span> #设置成<span class="token number">20200501</span>，这样会把具体时间设置成空<span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> 
date <span class="token operator">-</span>s <span class="token number">01</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">01</span> #设置具体时间，不会对日期做更改 
date <span class="token operator">-</span>s <span class="token string">&quot;01:01:01 2020-05-01&quot;</span> #这样可以设置全部时间 
date <span class="token operator">-</span>s <span class="token string">&quot;01:01:01 20200501&quot;</span>    #这样可以设置全部时间 
date <span class="token operator">-</span>s <span class="token string">&quot;2020-05-01 01:01:01&quot;</span> #这样可以设置全部时间 
date <span class="token operator">-</span>s <span class="token string">&quot;20200501 01:01:01&quot;</span>    #这样可以设置全部时间
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 命令更多参数使用方法可访问：https://www.cnblogs.com/machangwei-8/p/10352546.html</p><h3 id="_10-2-3-硬件时间操作命令" tabindex="-1"><a class="header-anchor" href="#_10-2-3-硬件时间操作命令" aria-hidden="true">#</a> 10.2.3 硬件时间操作命令</h3><p>​ 显示硬件时间：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>hwclock或 hwclock <span class="token operator">-</span>r 或 hwclock <span class="token operator">--</span>show
<span class="token number">2000</span>年<span class="token number">04</span>月<span class="token number">11</span>日 星期二 <span class="token number">13</span>时<span class="token number">24</span>分<span class="token number">35</span>秒  <span class="token operator">-</span><span class="token number">0.109687</span> seconds 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 设置硬件时钟：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>hwclock <span class="token operator">--</span>set <span class="token operator">--</span>date <span class="token char">&#39;2015-04-11 13:36:11&#39;</span><span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 将系统时钟同步到硬件时钟：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>hwclock <span class="token operator">-</span>w
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 将硬件时钟同步到系统时钟：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>hwclock <span class="token operator">-</span>s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 命令更多参数使用方法可访问：https://www.cnblogs.com/wj78080458/p/9806774.html</p><h2 id="_10-3-rtc的数据结构和函数" tabindex="-1"><a class="header-anchor" href="#_10-3-rtc的数据结构和函数" aria-hidden="true">#</a> 10.3 RTC的数据结构和函数</h2><p>​ 在Linux环境中，我们学会了使用命令，修改系统时间和硬件时间。在编程时我们当然可以直接使用system系统调用来操作时间，但是这样既显得不够专业，也不能满足大部分需求，因为很多情况下我们不只是要修改时间，而是要对时间进行运算处理。</p><p>​ RTC编程，重点是学习时间相关的结构体和相关操作函数。</p><h3 id="_10-3-1-时间相关的数据结构" tabindex="-1"><a class="header-anchor" href="#_10-3-1-时间相关的数据结构" aria-hidden="true">#</a> 10.3.1 时间相关的数据结构</h3><p>​ 在C语言涉及中经常需要定时触发事件，涉及到获取系统时间，其结构体类型有多种。Linux系统下,与时间有关的数据类型定义在头文件 /usr/include/sys/time.h 中：</p><p>只要有以下几种时间相关的数据类型：</p><h4 id="_1-time-t-类型-长整型" tabindex="-1"><a class="header-anchor" href="#_1-time-t-类型-长整型" aria-hidden="true">#</a> 1.time_t 类型：长整型</h4><p>​ 一般用来表示从Epoch Time（1970年1月1日午夜(00:00:00)）以来的秒数，单位为秒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_TIME_T</span>	</span>
	<span class="token keyword">typedef</span>    <span class="token keyword">long</span>    <span class="token class-name">time_t</span><span class="token punctuation">;</span>        
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 由函数time_t time(time_t* lpt)来获取time_t 数据，函数返回自Epoch Time（1970年1月1日午夜(00:00:00)）起经过的时间，以秒为单位。如果 lpt不为空，则返回值也存储在lpt指向的变量中。</p><p>​ 示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>time_t t = time(NULL);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-struct-timeb-结构" tabindex="-1"><a class="header-anchor" href="#_2-struct-timeb-结构" aria-hidden="true">#</a> 2.struct timeb 结构</h4><p>​ 它有四个成员，一个是秒，另一个是毫秒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">timeb</span><span class="token punctuation">{</span>    
    <span class="token class-name">time_t</span>  time<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> millitm<span class="token punctuation">;</span>     
    <span class="token keyword">short</span>   timezone<span class="token punctuation">;</span>          
    <span class="token keyword">short</span>   dstflag<span class="token punctuation">;</span>                
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ time是从Epoch Time（1970年1月1日午夜(00:00:00)）起累计的秒数。</p><p>​ millitm是一秒内的毫秒数。</p><p>​ dstflag不为0，说明这是夏令时时间。</p><p>​ timezone是UTC时间和本地时间的相差分钟数。</p><p>​ 由函数int ftime(struct timeb *tp) 来获取timeb，调用成功返回0，调用失败返回-1。</p><p>示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">timeb</span> tp<span class="token punctuation">;</span>
<span class="token function">ftime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-struct-timeval-和struct-timezone结构" tabindex="-1"><a class="header-anchor" href="#_3-struct-timeval-和struct-timezone结构" aria-hidden="true">#</a> 3.struct timeval 和struct timezone结构</h4><p>​ timeval 有两个成员，一个是秒，另一个表示微秒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span>  <span class="token class-name">timeval</span><span class="token punctuation">{</span>
	<span class="token keyword">long</span>  tv_sec；    <span class="token comment">/*秒*/</span>
	<span class="token keyword">long</span>  tv_usec；<span class="token comment">/*微秒*/</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ tv_sec为Epoch Time到创建struct timeval时的秒数，tv_usec为微秒数，即秒后面的零头。比如当tv_sec为1234567890，tv_usec为1234，即当前时间距Epoch时间1234567890秒，1234微秒。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span>  <span class="token class-name">timezone</span><span class="token punctuation">{</span>	
    <span class="token keyword">int</span> tz_minuteswest<span class="token punctuation">;</span><span class="token comment">/*和greenwich 时间差了多少分钟*/</span>	
    <span class="token keyword">int</span> tz_dsttime<span class="token punctuation">;</span>    <span class="token comment">/*type of DST correction*/</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
tz_minuteswest表示当前系统所在时区和UTC的时间差，tz_minuteswest以分钟计算。比如北京GMT<span class="token operator">+</span><span class="token number">8</span>区，tz_minuteswest为<span class="token operator">-</span><span class="token number">480</span>。tz_dsttime的定义为日光节约时间（DST，也就是夏令时。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 由函数int gettimeofday(struct timeval*tv,struct timezone *tz )来获取timeval和timezone，在gettimeofday()函数中tv或者tz都可以为空。如果为空则就不返回其对应的结构体。函数执行成功后返回0，失败后返回-1，错误代码存于errno中。</p><p>示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span>  <span class="token class-name">timeval</span>  tv<span class="token punctuation">;</span>
<span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tv<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-struct-tm-结构" tabindex="-1"><a class="header-anchor" href="#_4-struct-tm-结构" aria-hidden="true">#</a> 4.struct tm 结构</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token punctuation">{</span>
　　<span class="token keyword">int</span> tm_sec<span class="token punctuation">;</span> <span class="token comment">/* 秒–取值区间为[0,59] */</span>
　　<span class="token keyword">int</span> tm_min<span class="token punctuation">;</span> <span class="token comment">/* 分 - 取值区间为[0,59] */</span>
　　<span class="token keyword">int</span> tm_hour<span class="token punctuation">;</span> <span class="token comment">/* 时 - 取值区间为[0,23] */</span>
　　<span class="token keyword">int</span> tm_mday<span class="token punctuation">;</span> <span class="token comment">/* 一个月中的日期 - 取值区间为[1,31] */</span>
　　<span class="token keyword">int</span> tm_mon<span class="token punctuation">;</span> <span class="token comment">/* 月份（从一月开始，0代表一月） - 取值区间为[0,11] */</span>
　　<span class="token keyword">int</span> tm_year<span class="token punctuation">;</span> <span class="token comment">/* 年份，其值从1900开始 */</span>
　　<span class="token keyword">int</span> tm_wday<span class="token punctuation">;</span> <span class="token comment">/* 星期–取值区间为[0,6]，其中0代表星期天，1代表星期一，以此类推 */</span>
　　<span class="token keyword">int</span> tm_yday<span class="token punctuation">;</span> <span class="token comment">/* 从每年的1月1日开始的天数–取值区间为[0,365]，其中0代表1月1日，1代表1月2				日，以此类推 */</span>
　　<span class="token keyword">int</span> tm_isdst<span class="token punctuation">;</span> <span class="token comment">/* 夏令时标识符，实行夏令时的时候，tm_isdst为正。不实行夏令时的进候，tm_isdst为0；				不了解情况时，tm_isdst()为负。*/</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>   tm_sec 代表目前秒数，正常范围为<span class="token number">0</span><span class="token operator">-</span><span class="token number">59</span>	
	<span class="token keyword">int</span>   tm_min 代表目前分数，范围<span class="token number">0</span><span class="token operator">-</span><span class="token number">59</span>	
	<span class="token keyword">int</span>   tm_hour 从午夜算起的时数，范围为<span class="token number">0</span><span class="token operator">-</span><span class="token number">23</span> 		
	<span class="token keyword">int</span>   tm_mday 目前月份的日数，范围<span class="token number">01</span><span class="token operator">-</span><span class="token number">31</span> 
	<span class="token keyword">int</span>   tm_mon 代表目前月份，从一月算起，范围从<span class="token number">0</span><span class="token operator">-</span><span class="token number">11</span>
	<span class="token keyword">int</span>   tm_year 从<span class="token number">1900</span> 年算起至今的年数
	<span class="token keyword">int</span>   tm_wday 一星期的日数，从星期一算起，范围为<span class="token number">0</span><span class="token operator">-</span><span class="token number">6</span>
	<span class="token keyword">int</span>   tm_yday 从今年<span class="token number">1</span>月<span class="token number">1</span>日算起至今的天数，范围为<span class="token number">0</span><span class="token operator">-</span><span class="token number">365</span>
	<span class="token keyword">int</span>   tm_isdst 日光节约时间的旗标
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 由函数struct tm* gmtime(const time_t*timep)解析得到tm，gmtime()将参数timep 所指的time_t 数据类型中的信息转换成真实世界所使用的时间日期表示方法，然后将结果由结构tm的指针返回。 ​ 示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">tm</span><span class="token operator">*</span> tm <span class="token operator">=</span><span class="token constant">NULL</span> <span class="token punctuation">;</span> 
<span class="token class-name">time_t</span> t <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tm <span class="token operator">=</span> <span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-3-2时间相关的函数" tabindex="-1"><a class="header-anchor" href="#_10-3-2时间相关的函数" aria-hidden="true">#</a> 10.3.2时间相关的函数</h3><h4 id="_1-时间格式化函数" tabindex="-1"><a class="header-anchor" href="#_1-时间格式化函数" aria-hidden="true">#</a> 1.时间格式化函数</h4><p>​ strftime()函数原型：size_t strftime(char *str,size_t max,char *fmt,struct tm *tp);函数识别以百分号(%)开始的格式命令集合，其格式由fmt来指定,可以使用strftime 函数将时间格式转化为我们想要的格式（其输出结果为字符串），strftime有点像sprintf。</p><p>​ str 表示返回的时间字符串</p><p>​ count要写入的字节的最大数量</p><p>​ format 格式字符串由零个或多个转换符和普通字符(除%)</p><p>​ tm 输入时间</p><p>​ 格式命令，是区分大小写的：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">%</span>a 星期几的简写
<span class="token operator">%</span>A 星期几的全称
<span class="token operator">%</span>b 月分的简写
<span class="token operator">%</span>B 月份的全称
<span class="token operator">%</span>c 标准的日期的时间串
<span class="token operator">%</span>C 年份的后两位数字
<span class="token operator">%</span>d 十进制表示的每月的第几天
<span class="token operator">%</span>D 月<span class="token operator">/</span>天<span class="token operator">/</span>年
<span class="token operator">%</span>e 在两字符域中，十进制表示的每月的第几天
<span class="token operator">%</span>F 年<span class="token operator">-</span>月<span class="token operator">-</span>日
<span class="token operator">%</span>g 年份的后两位数字，使用基于周的年
<span class="token operator">%</span>G 年分，使用基于周的年
<span class="token operator">%</span>h 简写的月份名
<span class="token operator">%</span>H <span class="token number">24</span>小时制的小时
<span class="token operator">%</span>I <span class="token number">12</span>小时制的小时
<span class="token operator">%</span>j 十进制表示的每年的第几天
<span class="token operator">%</span>m 十进制表示的月份
<span class="token operator">%</span>M 十时制表示的分钟数
<span class="token operator">%</span>n 新行符
<span class="token operator">%</span>p 本地的AM或PM的等价显示
<span class="token operator">%</span>r <span class="token number">12</span>小时的时间
<span class="token operator">%</span>R 显示小时和分钟：hh<span class="token operator">:</span>mm
<span class="token operator">%</span>S 十进制的秒数
<span class="token operator">%</span>t 水平制表符
<span class="token operator">%</span>T 显示时分秒：hh<span class="token operator">:</span>mm<span class="token operator">:</span>ss
<span class="token operator">%</span>u 每周的第几天，星期一为第一天 （值从<span class="token number">0</span>到<span class="token number">6</span>，星期一为<span class="token number">0</span>）
<span class="token operator">%</span>U 第年的第几周，把星期日做为第一天（值从<span class="token number">0</span>到<span class="token number">53</span>）
<span class="token operator">%</span>V 每年的第几周，使用基于周的年
<span class="token operator">%</span>w 十进制表示的星期几（值从<span class="token number">0</span>到<span class="token number">6</span>，星期天为<span class="token number">0</span>）
<span class="token operator">%</span>W 每年的第几周，把星期一做为第一天（值从<span class="token number">0</span>到<span class="token number">53</span>）
<span class="token operator">%</span>x 标准的日期串
<span class="token operator">%</span>X 标准的时间串
<span class="token operator">%</span>y 不带世纪的十进制年份（值从<span class="token number">0</span>到<span class="token number">99</span>）
<span class="token operator">%</span>Y 带世纪部分的十进制年份
<span class="token operator">%</span>z，<span class="token operator">%</span>Z 时区名称，如果不能得到时区名称则返回空字符。
<span class="token operator">%</span><span class="token operator">%</span> 百分号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">time_t</span> t <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>info<span class="token punctuation">;</span>
info <span class="token operator">=</span> <span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strftime</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;格式化的日期 &amp; 时间 : |%s|\\n&quot;</span><span class="token punctuation">,</span> buffer <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-localtime函数" tabindex="-1"><a class="header-anchor" href="#_2-localtime函数" aria-hidden="true">#</a> 2.localtime函数</h4><p>​ localtime（）函数原型：struct tm *localtime(const time_t *timer) 使用 timer 的值来填充 tm 结构，timer 的值被解析为 tm 结构，并用本地时区表示</p><p>​ 示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">time_t</span> rawtime<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>info<span class="token punctuation">;</span> 
<span class="token function">time</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>rawtime <span class="token punctuation">)</span><span class="token punctuation">;</span> 
info <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>rawtime <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-mktime函数" tabindex="-1"><a class="header-anchor" href="#_3-mktime函数" aria-hidden="true">#</a> 3.mktime函数</h4><p>​ mktime()函数原型： time_t mktime(struct tm *timeptr) 把 timeptr 所指向的结构转换为一个依据本地时区的 time_t 值。函数将参数timeptr所指的tm结构数据转换成从公元1970年1月1日0时0分0 秒算起至今的UTC时间所经过的秒数。该函数返回一个 time_t 值，该值对应于以参数传递的日历时间。如果发生错误，则返回 -1 值。</p><p>​ 示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">time_t</span> rawtime<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span> timeinfo<span class="token punctuation">;</span>
<span class="token keyword">int</span> year<span class="token punctuation">,</span> month <span class="token punctuation">,</span>day<span class="token punctuation">;</span>
<span class="token comment">/* 获取当前时间信息，并修改用户输入的输入信息 */</span>
<span class="token function">time</span> <span class="token punctuation">(</span> <span class="token operator">&amp;</span>rawtime <span class="token punctuation">)</span><span class="token punctuation">;</span>
timeinfo <span class="token operator">=</span> <span class="token function">localtime</span> <span class="token punctuation">(</span> <span class="token operator">&amp;</span>rawtime <span class="token punctuation">)</span><span class="token punctuation">;</span>
timeinfo<span class="token operator">-&gt;</span>tm_year<span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//去年的今天</span>
rawtime <span class="token operator">=</span> <span class="token function">mktime</span> <span class="token punctuation">(</span> timeinfo <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-asctime函数" tabindex="-1"><a class="header-anchor" href="#_4-asctime函数" aria-hidden="true">#</a> 4.asctime函数</h4><p>​ asctime()函数原型： char *asctime(const struct tm *timeptr) ；函数返回一个指向字符串的指针，它代表了结构 struct timeptr 的日期和时间。包含了可读格式的日期和时间信息 Www Mmm dd hh:mm:ss yyyy，其中，Www 表示星期几，Mmm 是以字母表示的月份，dd 表示一月中的第几天，hh:mm:ss 表示时间，yyyy 表示年份。</p><p>​ 示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">tm</span> t<span class="token punctuation">;</span>
t<span class="token punctuation">.</span>tm_sec    <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span>tm_min    <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span>tm_hour   <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span>tm_mday   <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span>tm_mon    <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span>tm_year   <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span>tm_wday   <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token function">puts</span><span class="token punctuation">(</span><span class="token function">asctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-ctime函数" tabindex="-1"><a class="header-anchor" href="#_5-ctime函数" aria-hidden="true">#</a> 5.ctime函数</h4><p>​ ctime()函数原型：char *ctime(const time_t *timer); 可以把time函数得到的结果转换成一个时间字符串， 返回一个表示当地时间的字符串，当地时间是基于参数 timer。返回的字符串格式如下： Www Mmm dd hh:mm:ss yyyy 其中，Www 表示星期几，Mmm 是以字母表示的月份，dd 表示一月中的第几天，hh:mm:ss 表示时间，yyyy 表示年份。调用ctime(t)等价于asctime(localtime(t))。</p><p>​ 示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">time_t</span> curtime<span class="token punctuation">;</span> 
<span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>curtime<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;当前时间 = %s&quot;</span><span class="token punctuation">,</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>curtime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-4-rtc时间的编程实例" tabindex="-1"><a class="header-anchor" href="#_10-4-rtc时间的编程实例" aria-hidden="true">#</a> 10.4 RTC时间的编程实例</h2><p>​ 嵌入式Linux环境下，RTC时间编程与桌面Linux环境下的编程是一样的。本文在桌面Linux下编程，实现时间显示、计算等功能。编译后的程序名为“mytime”，进入程序后，使用不同命令完成不同功能，主要命令见下表：</p><table><thead><tr><th>序号</th><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>p</td><td>在终端显示当前时间</td><td>p</td></tr><tr><td>2</td><td>y</td><td>在终端显示昨天日期</td><td>y</td></tr><tr><td>3</td><td>n</td><td>在终端显示现在距新年的天数</td><td>n</td></tr><tr><td>4</td><td>a</td><td>根据输入的出生年代，在终端显示年纪</td><td>a 2001</td></tr><tr><td>5</td><td>e</td><td>退出程序</td><td>e</td></tr></tbody></table><p>​ 在main函数中，首先打印函数的使用手册，然后循环接收用户输入的命令，根据命令调用相应的函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">32</span>      <span class="token comment">//打印使用手册</span>
<span class="token number">33</span>      <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;\\n\\n&quot;</span>\\
<span class="token number">34</span>            <span class="token string">&quot;Usage:\\np\\n&quot;</span>\\
<span class="token number">35</span>            <span class="token string">&quot;y\\n&quot;</span>\\
<span class="token number">36</span>             <span class="token string">&quot;n\\n&quot;</span>\\
<span class="token number">37</span>             <span class="token string">&quot;a 2001\\n&quot;</span>\\
<span class="token number">38</span>             <span class="token string">&quot;e\\n&quot;</span>\\
<span class="token number">39</span>             <span class="token string">&quot;p:在终端显示当前时间\\ny:查看昨天日期\\nn:查看现在距新年的天数\\n&quot;</span>\\
<span class="token number">40</span>             <span class="token string">&quot;a:根据输入的出生年计算出年纪\\ne:退出程序\\n&quot;</span>\\
<span class="token number">41</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span>
<span class="token number">43</span>     <span class="token comment">//主程序中循环接收输入的命令，根据不同命令执行不同函数</span>
<span class="token number">44</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">45</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
<span class="token number">46</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n请输入命令：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">47</span>              <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">48</span>              <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">49</span>                      <span class="token keyword">case</span> <span class="token char">&#39;p&#39;</span><span class="token operator">:</span><span class="token comment">//在终端显示当前时间</span>
<span class="token number">50</span>                              <span class="token function">displaydate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">51</span>                              <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">52</span>              		<span class="token keyword">case</span> <span class="token char">&#39;y&#39;</span><span class="token operator">:</span><span class="token comment">//显示昨天日期</span>
<span class="token number">53</span>                              <span class="token function">displayyesterday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">54</span>                              <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">55</span>                      <span class="token keyword">case</span> <span class="token char">&#39;n&#39;</span><span class="token operator">:</span><span class="token comment">//显示现在距新年的天数</span>
<span class="token number">56</span>                              <span class="token function">displaynewyear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">57</span>                              <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">58</span>                      <span class="token keyword">case</span> <span class="token char">&#39;a&#39;</span><span class="token operator">:</span><span class="token comment">//根据输入的出生年计算出年纪</span>
<span class="token number">59</span>                          	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">60</span>                              <span class="token function">displayage</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">61</span>                              <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">62</span>                      <span class="token keyword">case</span> <span class="token char">&#39;e&#39;</span><span class="token operator">:</span><span class="token comment">//退出程序</span>
<span class="token number">63</span>                              <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">64</span>                              <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">65</span>
<span class="token number">66</span>                      <span class="token keyword">default</span> <span class="token operator">:</span> <span class="token comment">/* 可选的 */</span>
<span class="token number">67</span>                              <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">68</span>      	<span class="token punctuation">}</span>
<span class="token number">69</span>      <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 实现在终端显示当前时间的函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**********************************************************
72  * 函数名称： displaydate
73  * 功能描述： 在终端打印当前时间信息
74  * 输入参数： 无
75  * 输出参数： 无
76  * 返 回 值： 无
77  * 2020/05/10         V1.0    yanxni            创建
78 ***********************************************************/</span>
<span class="token number">79</span> <span class="token keyword">void</span> <span class="token function">displaydate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">80</span>      <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token number">81</span>      <span class="token class-name">time_t</span> lt<span class="token punctuation">;</span>
<span class="token number">82</span>
<span class="token number">83</span>     <span class="token comment">/*获取日历时间*/</span>
<span class="token number">84</span>     lt <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">85</span>
<span class="token number">86</span>     <span class="token comment">/*转化为本地时间*/</span>
<span class="token number">87</span>     ptr <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">88</span>
<span class="token number">89</span>     <span class="token comment">/*以本地时间的字符串方式打印*/</span>
<span class="token number">90</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">91</span>
<span class="token number">92</span>      <span class="token comment">/*以本地时间的字符串方式打印*/</span>
<span class="token number">93</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span><span class="token function">asctime</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">94</span>
<span class="token number">95</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 实现在终端显示昨天日期的函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**********************************************************
97  * 函数名称： displayyesterday
98  * 功能描述： 在终端打印昨天的日期
99  * 输入参数： 无
100  * 输出参数： 无
101  * 返 回 值： 无
102  * 2020/05/10         V1.0    yanxni            创建
103 ***********************************************************/</span>
<span class="token number">104</span> <span class="token keyword">void</span> <span class="token function">displayyesterday</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">105</span>     <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token number">106</span>     <span class="token class-name">time_t</span> lt<span class="token punctuation">;</span>
<span class="token number">107</span>
<span class="token number">108</span>     <span class="token comment">/*获取日历时间*/</span>
<span class="token number">109</span>     lt <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">110</span>     lt <span class="token operator">-=</span> <span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">;</span>
<span class="token number">111</span>
<span class="token number">112</span>     <span class="token comment">/*转化为本地时间*/</span>
<span class="token number">113</span>     ptr <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">114</span>
<span class="token number">115</span>     <span class="token comment">/*以本地时间的字符串方式打印*/</span>
<span class="token number">116</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;昨天是%d年%d月%d日\\n&quot;</span><span class="token punctuation">,</span>ptr<span class="token operator">-&gt;</span>tm_year <span class="token operator">+</span> <span class="token number">1900</span><span class="token punctuation">,</span>ptr<span class="token operator">-&gt;</span>tm_mon <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>ptr<span class="token operator">-&gt;</span>tm_mday<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">117</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 实现在终端显示现在距新年的天数的函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">118</span> <span class="token comment">/**********************************************************
119  * 函数名称： displaynewyear
120  * 功能描述： 在终端打印距离新年的天数
121  * 输入参数： 无
122  * 输出参数： 无
123  * 返 回 值： 无
124  * 2020/05/10         V1.0    yanxni            创建
125 ***********************************************************/</span>
<span class="token number">126</span> <span class="token keyword">void</span> <span class="token function">displaynewyear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">127</span>     <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token number">128</span>     <span class="token class-name">time_t</span> lt<span class="token punctuation">,</span>lt2<span class="token punctuation">;</span>
<span class="token number">129</span>     <span class="token keyword">int</span> date<span class="token punctuation">;</span>
<span class="token number">130</span>
<span class="token number">131</span>     <span class="token comment">/*获取日历时间*/</span>
<span class="token number">132</span>     lt <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">133</span>
<span class="token number">134</span>     <span class="token comment">/*转化为本地时间*/</span>
<span class="token number">135</span>     ptr <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">136</span>     <span class="token comment">/*构造新年的本地时间*/</span>
<span class="token number">137</span>     ptr<span class="token operator">-&gt;</span>tm_year <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">138</span>     ptr<span class="token operator">-&gt;</span>tm_mon <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">139</span>     ptr<span class="token operator">-&gt;</span>tm_mday <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">140</span>     ptr<span class="token operator">-&gt;</span>tm_hour <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">141</span>     ptr<span class="token operator">-&gt;</span>tm_min <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">142</span>     ptr<span class="token operator">-&gt;</span>tm_sec <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">143</span>
<span class="token number">144</span>     lt2 <span class="token operator">=</span> <span class="token function">mktime</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">145</span>     date <span class="token operator">=</span> <span class="token punctuation">(</span>lt2<span class="token operator">-</span>lt<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">146</span>
<span class="token number">147</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;距离新年还有%d天\\n&quot;</span><span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">148</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 实现在根据输入的出生年代在终端显示年纪的函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**********************************************************
151  * 函数名称： displayage
152  * 功能描述： 在终端打印年纪
153  * 输入参数： 出生年代
154  * 输出参数： 无
155  * 返 回 值： 无
156  * 2020/05/10         V1.0    yanxni            创建
157 ***********************************************************/</span>
<span class="token number">158</span> <span class="token keyword">void</span> <span class="token function">displayage</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token number">159</span>     <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token number">160</span>     <span class="token class-name">time_t</span> lt<span class="token punctuation">;</span>
<span class="token number">161</span>
<span class="token number">162</span>     <span class="token comment">/*获取日历时间*/</span>
<span class="token number">163</span>     lt <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">164</span>
<span class="token number">165</span>     <span class="token comment">/*转化为本地时间*/</span>
<span class="token number">166</span>     ptr <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">167</span>
<span class="token number">168</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你的年龄是：%d岁\\n&quot;</span><span class="token punctuation">,</span>ptr<span class="token operator">-&gt;</span>tm_year <span class="token operator">+</span><span class="token number">1900</span> <span class="token operator">-</span> year  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,112),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","index.html.vue"]]);export{u as default};
