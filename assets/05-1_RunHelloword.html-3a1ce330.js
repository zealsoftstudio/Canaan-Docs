import{_ as a,o as n,c as e,e as s}from"./app-21fd3c9b.js";const i={},l=s(`<h1 id="运行输出hello-word" tabindex="-1"><a class="header-anchor" href="#运行输出hello-word" aria-hidden="true">#</a> 运行输出hello word</h1><h2 id="配置开发环境" tabindex="-1"><a class="header-anchor" href="#配置开发环境" aria-hidden="true">#</a> 配置开发环境</h2><p>首先我们需要获取 交叉编译工具链。</p><h2 id="获取交叉编译工具链" tabindex="-1"><a class="header-anchor" href="#获取交叉编译工具链" aria-hidden="true">#</a> 获取交叉编译工具链</h2><p>我们的源码都存放在不同的git仓库内，其中以github为主要托管，也是最新的状态，同时也会使用 gitee作为备用站点，根据大家的实际情况，来进行选择。</p><ul><li>对于可以访问github的同学 请使用如下命令获取源码</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/DongshanPI/eLinuxCore_100ask-t113-pro.git
<span class="token builtin class-name">cd</span>  eLinuxCore_100ask-t113-pro
<span class="token function">git</span> submodule update  <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于无法访问GitHub的同学 请使用如下命令获取源码。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://gitee.com/weidongshan/eLinuxCore_100ask-t113-pro.git
<span class="token builtin class-name">cd</span>  eLinuxCore_100ask-t113-pro
<span class="token function">git</span> submodule update  <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取完成源码后，需要进入到交叉编译工具链路径到 内，用于验证是否可用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>book@virtual-machine:~/eLinuxCore_100ask-t113-pro/toolchain/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi/bin$ ./arm-linux-gnueabi-gcc <span class="token parameter variable">-v</span>
Using built-in specs.
<span class="token assign-left variable">COLLECT_GCC</span><span class="token operator">=</span>./arm-linux-gnueabi-gcc
<span class="token assign-left variable">COLLECT_LTO_WRAPPER</span><span class="token operator">=</span>/home/book/eLinuxCore_100ask-t113-pro/toolchain/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi/bin/<span class="token punctuation">..</span>/libexec/gcc/arm-linux-gnueabi/7.2.1/lto-wrapper
Target: arm-linux-gnueabi
Configured with: <span class="token string">&#39;/home/tcwg-buildslave/workspace/tcwg-make-release/builder_arch/amd64/label/tcwg-x86_64-build/target/arm-linux-gnueabi/snapshots/gcc.git~linaro-7.2-2017.11/configure&#39;</span> <span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/bash --with-mpc<span class="token operator">=</span>/home/tcwg-buildslave/workspace/tcwg-make-release/builder_arch/amd64/label/tcwg-x86_64-build/target/arm-linux-gnueabi/_build/builds/destdir/x86_64-unknown-linux-gnu --with-mpfr<span class="token operator">=</span>/home/tcwg-buildslave/workspace/tcwg-make-release/builder_arch/amd64/label/tcwg-x86_64-build/target/arm-linux-gnueabi/_build/builds/destdir/x86_64-unknown-linux-gnu --with-gmp<span class="token operator">=</span>/home/tcwg-buildslave/workspace/tcwg-make-release/builder_arch/amd64/label/tcwg-x86_64-build/target/arm-linux-gnueabi/_build/builds/destdir/x86_64-unknown-linux-gnu --with-gnu-as --with-gnu-ld --disable-libmudflap --enable-lto --enable-shared --without-included-gettext --enable-nls --disable-sjlj-exceptions --enable-gnu-unique-object --enable-linker-build-id --disable-libstdcxx-pch --enable-c99 --enable-clocale<span class="token operator">=</span>gnu --enable-libstdcxx-debug --enable-long-long --with-cloog<span class="token operator">=</span>no --with-ppl<span class="token operator">=</span>no --with-isl<span class="token operator">=</span>no --disable-multilib --with-float<span class="token operator">=</span>soft --with-mode<span class="token operator">=</span>thumb --with-tune<span class="token operator">=</span>cortex-a9 --with-arch<span class="token operator">=</span>armv7-a --enable-threads<span class="token operator">=</span>posix --enable-multiarch --enable-libstdcxx-time<span class="token operator">=</span>yes --enable-gnu-indirect-function --with-build-sysroot<span class="token operator">=</span>/home/tcwg-buildslave/workspace/tcwg-make-release/builder_arch/amd64/label/tcwg-x86_64-build/target/arm-linux-gnueabi/_build/sysroots/arm-linux-gnueabi --with-sysroot<span class="token operator">=</span>/home/tcwg-buildslave/workspace/tcwg-make-release/builder_arch/amd64/label/tcwg-x86_64-build/target/arm-linux-gnueabi/_build/builds/destdir/x86_64-unknown-linux-gnu/arm-linux-gnueabi/libc --enable-checking<span class="token operator">=</span>release --disable-bootstrap --enable-languages<span class="token operator">=</span>c,c++,fortran,lto <span class="token parameter variable">--build</span><span class="token operator">=</span>x86_64-unknown-linux-gnu <span class="token parameter variable">--host</span><span class="token operator">=</span>x86_64-unknown-linux-gnu <span class="token parameter variable">--target</span><span class="token operator">=</span>arm-linux-gnueabi <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/home/tcwg-buildslave/workspace/tcwg-make-release/builder_arch/amd64/label/tcwg-x86_64-build/target/arm-linux-gnueabi/_build/builds/destdir/x86_64-unknown-linux-gnu
Thread model: posix
gcc version <span class="token number">7.2</span>.1 <span class="token number">20171011</span> <span class="token punctuation">(</span>Linaro GCC <span class="token number">7.2</span>-2017.11<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成以后 我们就可以加入到 系统的 PATH环境变量内。</p><p>首先 需要获取 交叉编译工具链 所在的绝对路径，进入到 <code>eLinuxCore_100ask-t113-pro/toolchain/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi/bin</code>目录下执行 <strong>pwd</strong> 命令，即可得到绝对路径 <code> /home/book/eLinuxCore_100ask-t113-pro/toolchain/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi/bin</code> 。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>book@virtual-machine:~/eLinuxCore_100ask-t113-pro/toolchain/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi/bin$ <span class="token builtin class-name">pwd</span>
/home/book/eLinuxCore_100ask-t113-pro/toolchain/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，可以在终端下执行如下命令，讲这个加入到系统 环境变量内，这样就可以在任意位置执行 交叉编译工具链了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/home/book/eLinuxCore_100ask-t113-pro/toolchain/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：此方式只针对当前的终端有效，如果你关闭了这个终端，再次开启终端 需要重新执行才可以。</p><p>还有另一种永久生效的方式 就是写入到 系统环境变量里面，需要修改 <strong>/etc/environment</strong> 在末尾加上 你获取到的交叉编译工具链绝对路径,注意修改需要使用 sudo 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>book@virtual-machine:~$ <span class="token function">cat</span> /etc/environment
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/book/eLinuxCore_100ask-t113-pro/toolchain/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi/bin&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编写hello-word程序" tabindex="-1"><a class="header-anchor" href="#编写hello-word程序" aria-hidden="true">#</a> 编写Hello word程序</h2><ul><li>配置好交叉编译工具链以后，就可以开始编写我们的应用程序了，如下为一个最简单的 hello word打印示例程序。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello word!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写完成后，保存到 helloword.c</p><p>之后我们执行 如下编译命令进行编译</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>book@virtual-machine:~$ <span class="token function">vim</span> helloword.c 
book@virtual-machine:~$ arm-linux-gnueabi-gcc <span class="token parameter variable">-o</span> helloword helloword.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拷贝到开发板" tabindex="-1"><a class="header-anchor" href="#拷贝到开发板" aria-hidden="true">#</a> 拷贝到开发板</h2><p>怎么拷贝文件到开发板上？ 有U盘 ADB 网络 串口等等。</p><p>那么我们优先推进使用 网络方式，网络也有很多，有TFTP传输，有nfs传输，有SFTP传输，其中nfs传输需要内核支持 nfs文件系统，SFTP需要根文件系统支持 openssh组件服务，那么最终我们还是选用tftp服务。</p><h3 id="使用usb-adb方式" tabindex="-1"><a class="header-anchor" href="#使用usb-adb方式" aria-hidden="true">#</a> 使用usb adb方式</h3><ul><li>首先将开发板OTG线连接，系统内默认启动会自动启动一个 usb adb服务，这时电脑会弹出一个设备，进入到我们的VMware虚拟机讲弹出来的设备，连接到ubuntu内。</li><li>这时我可以使用 adb push命令来上传文件,开始上传之前可以使用 adb devices 命令来查看开发板是否连接到系统上。</li><li>如下示例，使用adb命令 上传 helloword到 开发板的 /root下。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>adb push helloword /root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h2><p>下载好程序以后，需要使用chmod +x 命令来给程序添加可执行权限，之后 我们就可以执行 这个helloword应用了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># chmod +x helloword</span>
<span class="token comment"># ./helloword</span>
hello word<span class="token operator">!</span>
<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),o=[l];function r(t,c){return n(),e("div",null,o)}const p=a(i,[["render",r],["__file","05-1_RunHelloword.html.vue"]]);export{p as default};
