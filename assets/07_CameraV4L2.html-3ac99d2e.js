import{_ as n,o as s,c as a,e as p}from"./app-21fd3c9b.js";const e={},t=p(`<h1 id="_7-摄像头v4l2编程" tabindex="-1"><a class="header-anchor" href="#_7-摄像头v4l2编程" aria-hidden="true">#</a> 7 摄像头V4L2编程</h1><h2 id="_7-1-v4l2简介" tabindex="-1"><a class="header-anchor" href="#_7-1-v4l2简介" aria-hidden="true">#</a> 7.1 V4L2简介</h2><p>​ Video for Linux two(Video4Linux2)简称V4L2，是V4L的改进版。V4L2是linux操作系统下一套用于采集图片、视频和音频数据的通用API接口，配合适当的视频采集设备和相应的驱动程序，可以实现图片、视频、音频等的采集。V4L2像一个优秀的快递员，将视频采集设备的图像数据安全、高效的传递给不同需求的用户。</p><p>​ 在Linux中，一切皆文件，所有外设都被看成一种特殊的文件，称为“设备文件”。视频设备也不例外，也可以可以看成是设备文件，可以像访问普通文件一样对其进行读写。V4L2驱动的摄像头的设备文件一般是/dev/videoX（X为任意数字，要与自己的设备相对应）。</p><p>​ V4L2支持三种方式来采集图像：内存映射方式(mmap)、直接读取方式(read)和用户指针。内存映射的方式采集速度较快，一般用于连续视频数据的采集，实际工作中的应用概率更高；直接读取的方式相对速度慢一些，所以常用于静态图片数据的采集；用户指针使用较少，如有兴趣可自行研究。由于内存映射方式的应用更广泛，所以本文重点讨论内存映射方式的视频采集。</p><h2 id="_7-2-v4l2视频采集原理" tabindex="-1"><a class="header-anchor" href="#_7-2-v4l2视频采集原理" aria-hidden="true">#</a> 7.2 V4L2视频采集原理</h2><p>​ 在通过V4L2采集图像之前，我们需要做的很多，但是很重要的一步是分配帧缓冲区，并将分配的帧缓冲区从内核空间映射到用户空间，然后将申请到的帧缓冲区在视频采集输入队列排队，剩下的就是等待视频数据的到来。但是，万一视频数据真的来了是怎么个流动过程呢？这个我们有必要了解一下。</p><p>​ 当启动视频采集后，驱动程序开始采集一帧图像数据，会把采集的图像数据放入视频采集输入队列的第一个帧缓冲区，一阵图像数据就算采集完成了。第一个帧缓冲区存满一帧图像数据后，驱动程序将该帧缓冲区移至视频采集输出队列，等待应用程序从输出队列取出，应用程序取出图像数据可以对图像数据进行处理或存储操作，然后将帧该缓冲区放入视频采集输入队列的尾部。驱动程序接下来采集下一帧数据，放入第二个缓冲区，同样的帧缓冲区存满一帧数据后，驱动程序将该缓冲区移至视频采集输出队列，应用程序将该帧缓冲区的图像数据取出后又将该帧缓冲区放入视频输入队列尾部，这样循环往复就实现了循环采集。流程如下图所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/Video_V4L2_image1.png" alt=""></p><p>​ 为了更好的理解这个过程，我们可以把“应用程序处理数据”比喻成“西瓜加工商加工西瓜”，“V4L2驱动程序采集数据”比喻成“西瓜采集员采集西瓜”，事先“西瓜加工商”会给“西瓜采集员”准备几个空篮子，然后“西瓜采集员”守着几个空篮子等待“瓜农”（图像采集设备，例如：摄像头）将空篮子装满，当“空篮子1”被“瓜农”装满以后，“西瓜采集员”会将装满西瓜的篮子放到“西瓜加工队列”等待“西瓜加工商”取走加工，当“西瓜加工商”取走装满西瓜的篮子中的西瓜的时候，“西瓜加工商”会将空篮子放回到事先给“西瓜采集员”准备好的西瓜采集队列的尾部。当“瓜农”装满下一个空篮子的时候，“西瓜采集员”同样的将装满西瓜的篮子放到“西瓜加工队列”等待“西瓜加工商”取走加工。这样，整个过程会持续不断的继续下去。</p><p><img src="http://photos.100ask.net/NewHomeSite/Video_V4L2_image2.png" alt=""></p><h2 id="_7-3-v4l2程序实现流程" tabindex="-1"><a class="header-anchor" href="#_7-3-v4l2程序实现流程" aria-hidden="true">#</a> 7.3 V4L2程序实现流程</h2><p>​ 使用V4L2进行视频采集，一般分为5个步骤：</p><p>（1）打开设备，进行初始化参数设置，通过V4L2接口设置视频图像的采集窗口、采集的点阵大小和格式；</p><p>（2）申请图像帧缓冲，并进行内存映射，将这些帧缓冲区从内核空间映射到用户空间，便于应用程序读取、处理图像数据；</p><p>（3）将帧缓冲进行入队操作，启动视频采集；</p><p>（4）驱动开始视频数据的采集，应用程序从视频采集输出队列取出帧缓冲区，处理完后，将帧缓冲区重新放入视频采集输入队列，循环往复采集连续的视频数据；</p><p>（5）释放资源，停止采集工作。</p><p>​ 在进行V4L2开发中，常用的命令标识符如下：</p><p>（1）VIDIOC_REQBUFS:分配内存；</p><p>（2）VIDIOC_QUERYBUF:把VIDIOC_REQBUFS中分配的数据缓存转换成物理地址；</p><p>（3）VIDIOC_QUERYCAP:查询驱动功能；</p><p>（4）VIDIOC_ENUM_FMT:获取当前驱动支持的视频格式；</p><p>（5）VIDIOC_S_FMT:设置当前驱动的视频捕获格式；</p><p>（6）VIDIOC_G_FMT:读取当前驱动的视频捕获格式；</p><p>（7）VIDIOC_TRY_FMT:验证当前驱动的显示格式；</p><p>（8）VIDIOC_CROPCAP:查询驱动的修剪功能；</p><p>（9）VIDIOC_S_CROP:设置视频信号的边框；</p><p>（10）VIDIOC_G_CROP:读取视频信号的边框；</p><p>（11）VIDIOC_QBUF:把数据从缓存中读取出来；</p><p>（12）VIDIOC_DQBUF:把数据放回缓存队列；</p><p>（13）VIDIOC_STREAMOP:开始视频显示函数；</p><p>（14）VIDIOC_STREAMOFF:结束视频显示函数；</p><p>（15）VIDIOC_QUERYSTD:检查当前视频设备支持的标准，例如PAL或NTSC；</p><p>这些IO调用，有些是必须的，有些是可选择的。</p><p>具体流程如下图所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/Video_V4L2_image3.png" alt=""></p><h2 id="_7-4-v4l2程序实例" tabindex="-1"><a class="header-anchor" href="#_7-4-v4l2程序实例" aria-hidden="true">#</a> 7.4 V4L2程序实例</h2><p>​ V4L2的代码主要位于video2lcd/video/v4l2.c文件中，接下来就针对上文 V4L2程序实现流程和流程中使用的重要数据结构，结合v4l2.c文件中的代码进行说明。代码支持内存映射和直接读取两种方式，由于内存映射方式应用更广泛，本文只详细说明内存映射方式，直接读取方式与内存映射方式类似，可自行研究。</p><h3 id="_7-4-1-打开设备" tabindex="-1"><a class="header-anchor" href="#_7-4-1-打开设备" aria-hidden="true">#</a> 7.4.1 打开设备</h3><p>​ 应用程序能够使用阻塞模式或非阻塞模式打开视频设备，如果使用非阻塞模式调用视频设备，即使尚未捕获到信息，驱动依旧会把缓存（DQBUFF）里的东西返回给应用程序。如果使用非阻塞的方式打开摄像头设备，第2行代码中open函数的第二个参数修改为O_RDWR | O_NONBLOCK 即可。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">70</span>     iFd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>strDevName<span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">71</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>iFd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">72</span>     <span class="token punctuation">{</span>
<span class="token number">73</span>         <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;can not open %s\\n&quot;</span><span class="token punctuation">,</span> strDevName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">74</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">75</span>     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-2-查询设备属性" tabindex="-1"><a class="header-anchor" href="#_7-4-2-查询设备属性" aria-hidden="true">#</a> 7.4.2 查询设备属性</h3><p>​ 查询设备属性需要使用struct v4l2_capability结构体，该结构体描述了视频采集设备的driver信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token keyword">struct</span> <span class="token class-name">v4l2_capability</span>
<span class="token number">02</span> <span class="token punctuation">{</span>
<span class="token number">03</span>     __u8 driver<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 驱动名字</span>
<span class="token number">04</span>     __u8 card<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// 设备名字</span>
<span class="token number">05</span>     __u8 bus_info<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 设备在系统中的位置</span>
<span class="token number">06</span>     __u32 version<span class="token punctuation">;</span>         <span class="token comment">// 驱动版本号</span>
<span class="token number">07</span>     __u32 capabilities<span class="token punctuation">;</span>    <span class="token comment">// 设备支持的操作</span>
<span class="token number">08</span>     __u32 reserved<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 保留字段</span>
<span class="token number">09</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 通过VIDIOC_QUERYCAP命令来查询driver是否合乎规范。因为V4L2要求所有driver和device都支持这个ioctl。所以，通过VIDIOC_QUERYCAP命令是否成功来判断当前device和driver是否符合V4L2规范。当然，这个命令执行成功的同时还能够得到设备足够的信息，如struct v4l2_capability结构体所示内容。86~98行代码检查当前设备是否为capture设备，并检查使用内存映射还是直接读的方式获取图像数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">78</span>     iError <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>iFd<span class="token punctuation">,</span> VIDIOC_QUERYCAP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tV4l2Cap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">79</span>     <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tV4l2Cap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_capability</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">80</span>     iError <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>iFd<span class="token punctuation">,</span> VIDIOC_QUERYCAP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tV4l2Cap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">81</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>iError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">82</span>      <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;Error opening device %s: unable to query device.\\n&quot;</span><span class="token punctuation">,</span> strDevName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">83</span>      <span class="token keyword">goto</span> err_exit<span class="token punctuation">;</span>
<span class="token number">84</span>     <span class="token punctuation">}</span>
<span class="token number">85</span>
<span class="token number">86</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tV4l2Cap<span class="token punctuation">.</span>capabilities <span class="token operator">&amp;</span> V4L2_CAP_VIDEO_CAPTURE<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">87</span>     <span class="token punctuation">{</span>
<span class="token number">88</span>      <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;%s is not a video capture device\\n&quot;</span><span class="token punctuation">,</span> strDevName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">89</span>         <span class="token keyword">goto</span> err_exit<span class="token punctuation">;</span>
<span class="token number">90</span>     <span class="token punctuation">}</span>
<span class="token number">91</span>
<span class="token number">92</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tV4l2Cap<span class="token punctuation">.</span>capabilities <span class="token operator">&amp;</span> V4L2_CAP_STREAMING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">93</span>          <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;%s supports streaming i/o\\n&quot;</span><span class="token punctuation">,</span> strDevName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">94</span>      <span class="token punctuation">}</span>
<span class="token number">95</span>
<span class="token number">96</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tV4l2Cap<span class="token punctuation">.</span>capabilities <span class="token operator">&amp;</span> V4L2_CAP_READWRITE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">97</span>          <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;%s supports read i/o\\n&quot;</span><span class="token punctuation">,</span> strDevName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">98</span>      <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-3-显示所有支持的格式" tabindex="-1"><a class="header-anchor" href="#_7-4-3-显示所有支持的格式" aria-hidden="true">#</a> 7.4.3 显示所有支持的格式</h3><p>​ 显示所有支持的格式需要用到struct v4l2_fmtdesc结构体，该结构体描述当前camera支持的格式信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token keyword">struct</span> <span class="token class-name">v4l2_fmtdesc</span>
<span class="token number">02</span> <span class="token punctuation">{</span>
<span class="token number">03</span>     __u32 index<span class="token punctuation">;</span>               <span class="token comment">// 要查询的格式序号，应用程序设置</span>
<span class="token number">04</span>     <span class="token keyword">enum</span> <span class="token class-name">v4l2_buf_type</span> type<span class="token punctuation">;</span>   <span class="token comment">// 帧类型，应用程序设置</span>
<span class="token number">05</span>     __u32 flags<span class="token punctuation">;</span>               <span class="token comment">// 是否为压缩格式</span>
<span class="token number">06</span>     __u8 description<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 格式名称</span>
<span class="token number">07</span>     __u32 pixelformat<span class="token punctuation">;</span>         <span class="token comment">//所支持的格式</span>
<span class="token number">08</span>     __u32 reserved<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// 保留</span>
<span class="token number">09</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 使用VIDIOC_ENUM_FMT命令查询当前camera支持的所有格式。struct v4l2_fmtdesc结构体中index要设置，从0开始；enum v4l2_buf_type type也要设置，如果使用的是camera设备，则enum v4l2_buf_type type要设置为V4L2_BUF_TYPE_VIDEO_CAPTURE，因为camera是CAPTURE设备。结构体中的其他内容driver会填充。其中__u32 pixelformat参数在设置图像帧格式时需要使用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">100</span>     <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tFmtDesc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tFmtDesc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">101</span>     tFmtDesc<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">102</span>     tFmtDesc<span class="token punctuation">.</span>type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
<span class="token number">103</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>iError <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>iFd<span class="token punctuation">,</span> VIDIOC_ENUM_FMT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tFmtDesc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">104</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSupportThisFormat</span><span class="token punctuation">(</span>tFmtDesc<span class="token punctuation">.</span>pixelformat<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">105</span>         <span class="token punctuation">{</span>
<span class="token number">106</span>             ptVideoDevice<span class="token operator">-&gt;</span>iPixelFormat <span class="token operator">=</span> tFmtDesc<span class="token punctuation">.</span>pixelformat<span class="token punctuation">;</span>
<span class="token number">107</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">108</span>         <span class="token punctuation">}</span>
<span class="token number">109</span>             tFmtDesc<span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token number">110</span>     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-4-设置图像帧格式" tabindex="-1"><a class="header-anchor" href="#_7-4-4-设置图像帧格式" aria-hidden="true">#</a> 7.4.4 设置图像帧格式</h3><p>​ 设置图像格式需要用到struct v4l2_format结构体，该结构体描述每帧图像的具体格式，包括帧类型以及图像的长、宽等信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token keyword">struct</span> <span class="token class-name">v4l2_format</span>
<span class="token number">02</span> <span class="token punctuation">{</span>
<span class="token number">03</span>     <span class="token keyword">enum</span> <span class="token class-name">v4l2_buf_type</span> type<span class="token punctuation">;</span>          <span class="token comment">// 帧类型，应用程序设置</span>
<span class="token number">04</span>     <span class="token keyword">union</span> fmt
<span class="token number">05</span>     <span class="token punctuation">{</span>
<span class="token number">06</span>         <span class="token keyword">struct</span> <span class="token class-name">v4l2_pix_format</span> pix<span class="token punctuation">;</span>   <span class="token comment">// 视频设备使用</span>
<span class="token number">07</span>         structv <span class="token number">4l</span><span class="token number">2</span>_window win<span class="token punctuation">;</span>
<span class="token number">08</span>         <span class="token keyword">struct</span> <span class="token class-name">v4l2_vbi_format</span> vbi<span class="token punctuation">;</span>
<span class="token number">09</span>         <span class="token keyword">struct</span> <span class="token class-name">v4l2_sliced_vbi_format</span> sliced<span class="token punctuation">;</span>
<span class="token number">10</span>         __u8 raw_data<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">11</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ struct v4l2_format结构体需要设置enum v4l2_buf_type type和union fmt中的struct v4l2_pix_format pix。enum v4l2_buf_type type因为使用的是camera设备，camera是CAPTURE设备，所以设置成V4L2_BUF_TYPE_VIDEO_CAPTURE。struct v4l2_pix_format pix设置一帧图像的长、宽和格式等，由于要适配LCD输出，所以长、宽设置为LCD支持的长、宽，如124~125行所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">119</span>     <span class="token comment">/* set format in */</span>
<span class="token number">120</span>     <span class="token function">GetDispResolution</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>iLcdWidth<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iLcdHeigt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iLcdBpp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">121</span>     <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tV4l2Fmt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_format</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">122</span>     tV4l2Fmt<span class="token punctuation">.</span>type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
<span class="token number">123</span>     tV4l2Fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>pixelformat <span class="token operator">=</span> ptVideoDevice<span class="token operator">-&gt;</span>iPixelFormat<span class="token punctuation">;</span>
<span class="token number">124</span>     tV4l2Fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>width       <span class="token operator">=</span> iLcdWidth<span class="token punctuation">;</span>
<span class="token number">125</span>     tV4l2Fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>height      <span class="token operator">=</span> iLcdHeigt<span class="token punctuation">;</span>
<span class="token number">126</span>     tV4l2Fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>field       <span class="token operator">=</span> V4L2_FIELD_ANY<span class="token punctuation">;</span>
<span class="token number">127</span>
<span class="token number">128</span>     <span class="token comment">/* 如果驱动程序发现无法某些参数(比如分辨率),
129      * 它会调整这些参数, 并且返回给应用程序
130      */</span>
<span class="token number">131</span>     iError <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>iFd<span class="token punctuation">,</span> VIDIOC_S_FMT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tV4l2Fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">132</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>iError<span class="token punctuation">)</span>
<span class="token number">133</span>     <span class="token punctuation">{</span>
<span class="token number">134</span>             <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to set format\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">135</span>         <span class="token keyword">goto</span> err_exit<span class="token punctuation">;</span>
<span class="token number">136</span>     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-5-申请缓冲区" tabindex="-1"><a class="header-anchor" href="#_7-4-5-申请缓冲区" aria-hidden="true">#</a> 7.4.5 申请缓冲区</h3><p>​ 相关结构体如下，该结构体描述申请的缓冲区的基本信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token keyword">struct</span> <span class="token class-name">v4l2_requestbuffers</span>
<span class="token number">02</span> <span class="token punctuation">{</span>
<span class="token number">03</span>     __u32 count<span class="token punctuation">;</span>                    <span class="token comment">// 缓冲区内缓冲帧的数目</span>
<span class="token number">04</span>     <span class="token keyword">enum</span> <span class="token class-name">v4l2_buf_type</span> type<span class="token punctuation">;</span>        <span class="token comment">// 缓冲帧数据格式</span>
<span class="token number">05</span>     <span class="token keyword">enum</span> <span class="token class-name">v4l2_memorymemory</span><span class="token punctuation">;</span>         <span class="token comment">// 区别是内存映射还是用户指针方式</span>
<span class="token number">06</span>     __u32 reserved<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">07</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 申请一个拥有四个缓冲帧的缓冲区，__u32 count为缓冲帧的数目；enum v4l2_buf_type type和前文一样，同样设置成V4L2_BUF_TYPE_VIDEO_CAPTURE；enum v4l2_memorymemory用来区分是内存映射还是用户指针，我们使用内存映射的方式，所以设置成V4L2_MEMORY_MMAP。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">140</span>     <span class="token comment">/* request buffers */</span>
<span class="token number">141</span>     <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tV4l2ReqBuffs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_requestbuffers</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">142</span>     tV4l2ReqBuffs<span class="token punctuation">.</span>count <span class="token operator">=</span> NB_BUFFER<span class="token punctuation">;</span>
<span class="token number">143</span>     tV4l2ReqBuffs<span class="token punctuation">.</span>type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
<span class="token number">144</span>     tV4l2ReqBuffs<span class="token punctuation">.</span>memory <span class="token operator">=</span> V4L2_MEMORY_MMAP<span class="token punctuation">;</span>
<span class="token number">145</span>
<span class="token number">146</span>     iError <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>iFd<span class="token punctuation">,</span> VIDIOC_REQBUFS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tV4l2ReqBuffs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">147</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>iError<span class="token punctuation">)</span>
<span class="token number">148</span>     <span class="token punctuation">{</span>
<span class="token number">149</span>             <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to allocate buffers.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">150</span>         <span class="token keyword">goto</span> err_exit<span class="token punctuation">;</span>
<span class="token number">151</span>     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-6-将申请的缓冲帧从内核空间映射到用户空间" tabindex="-1"><a class="header-anchor" href="#_7-4-6-将申请的缓冲帧从内核空间映射到用户空间" aria-hidden="true">#</a> 7.4.6 将申请的缓冲帧从内核空间映射到用户空间</h3><p>​ 相关结构体如下，该结构体表示一帧图像数据的基本信息，包含序号、缓冲帧长度和缓冲帧地址等信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span>
<span class="token number">02</span> <span class="token punctuation">{</span>
<span class="token number">03</span>     __u32 index<span class="token punctuation">;</span>                    <span class="token comment">//buffer 序号</span>
<span class="token number">04</span>     <span class="token keyword">enum</span> <span class="token class-name">v4l2_buf_type</span> type<span class="token punctuation">;</span>        <span class="token comment">//buffer 类型</span>
<span class="token number">05</span>     __u32 byteused<span class="token punctuation">;</span>                 <span class="token comment">//buffer 中已使用的字节数</span>
<span class="token number">06</span>     __u32 flags<span class="token punctuation">;</span>                    <span class="token comment">// 区分是MMAP 还是USERPTR</span>
<span class="token number">07</span>     <span class="token keyword">enum</span> <span class="token class-name">v4l2_field</span> field<span class="token punctuation">;</span>
<span class="token number">08</span>     <span class="token keyword">struct</span> <span class="token class-name">timeval</span> timestamp<span class="token punctuation">;</span>       <span class="token comment">// 获取第一个字节时的系统时间</span>
<span class="token number">09</span>     <span class="token keyword">struct</span> <span class="token class-name">v4l2_timecode</span> timecode<span class="token punctuation">;</span>
<span class="token number">10</span>     __u32 sequence<span class="token punctuation">;</span>                 <span class="token comment">// 队列中的序号</span>
<span class="token number">11</span>     <span class="token keyword">enum</span> <span class="token class-name">v4l2_memory</span> memory<span class="token punctuation">;</span>        <span class="token comment">//IO 方式，被应用程序设置</span>
<span class="token number">12</span>     <span class="token keyword">union</span> m
<span class="token number">13</span>     <span class="token punctuation">{</span>
<span class="token number">14</span>         __u32 offset<span class="token punctuation">;</span>               <span class="token comment">// 缓冲帧地址，只对MMAP 有效</span>
<span class="token number">15</span>         <span class="token keyword">unsigned</span> <span class="token keyword">long</span> userptr<span class="token punctuation">;</span>
<span class="token number">16</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">17</span>     __u32 length<span class="token punctuation">;</span>                   <span class="token comment">// 缓冲帧长度</span>
<span class="token number">18</span>     __u32 input<span class="token punctuation">;</span>
<span class="token number">19</span>     __u32 reserved<span class="token punctuation">;</span>
<span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 将内核空间的帧缓冲映射到用户空间，需要两个数据接收帧缓冲的长度和地址，我们需要自己定义一个结构体，该结构体位于video2lcd/include/video_manager.h文件中，其中iVideoBufMaxLen接收帧缓冲的长度，pucVideBuf接收帧缓冲地址。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">16</span> <span class="token keyword">struct</span> <span class="token class-name">VideoDevice</span> <span class="token punctuation">{</span>
<span class="token number">17</span>     <span class="token keyword">int</span> iFd<span class="token punctuation">;</span>
<span class="token number">18</span>     <span class="token keyword">int</span> iPixelFormat<span class="token punctuation">;</span>
<span class="token number">19</span>     <span class="token keyword">int</span> iWidth<span class="token punctuation">;</span>
<span class="token number">20</span>     <span class="token keyword">int</span> iHeight<span class="token punctuation">;</span>
<span class="token number">21</span>
<span class="token number">22</span>     <span class="token keyword">int</span> iVideoBufCnt<span class="token punctuation">;</span>
<span class="token number">23</span>     <span class="token keyword">int</span> iVideoBufMaxLen<span class="token punctuation">;</span>
<span class="token number">24</span>     <span class="token keyword">int</span> iVideoBufCurIndex<span class="token punctuation">;</span>
<span class="token number">25</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pucVideBuf<span class="token punctuation">[</span>NB_BUFFER<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">26</span>
<span class="token number">27</span>     <span class="token comment">/* 函数 */</span>
<span class="token number">28</span>     PT_VideoOpr ptOPr<span class="token punctuation">;</span>
<span class="token number">29</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 以下代码使用VIDIOC_QUERYBUF命令和mmap函数将内核空间的缓冲区映射到用户空间。VIDIOC_QUERYBUF命令的使用需要参数struct v4l2_buffer结构体，结构体中的type、memory和index参数需要设置，type和memory和前文中的设置一样，分别设置成V4L2_BUF_TYPE_VIDEO_CAPTURE和 V4L2_MEMORY_MMAP，index参数表示申请的缓冲帧的标号，从0开始，包含申请的所有缓冲帧。</p><p>​ mmap函数原形为：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> prot<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数具体的含义：</p><ol><li><p>addr：映射起始地址，一般为NULL，让内核自动选择；</p></li><li><p>length：被映射内存块的长度；</p></li><li><p>prot：标志映射后能否被读写，其值为PROT_EXEC,PROT_READ,PROT_WRITE,PROT_NONE；</p></li><li><p>flags：确定此内存映射能否被其他进程共享，可设置为MAP_SHARED或MAP_PRIVATE；</p></li><li><p>fd：设备文件句柄；</p></li><li><p>offset：确定映射后的内存地址</p></li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">156</span>         <span class="token comment">/* map the buffers */</span>
<span class="token number">157</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ptVideoDevice<span class="token operator">-&gt;</span>iVideoBufCnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">158</span>         <span class="token punctuation">{</span>
<span class="token number">159</span>             <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tV4l2Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">160</span>             tV4l2Buf<span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token number">161</span>             tV4l2Buf<span class="token punctuation">.</span>type   <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
<span class="token number">162</span>             tV4l2Buf<span class="token punctuation">.</span>memory <span class="token operator">=</span> V4L2_MEMORY_MMAP<span class="token punctuation">;</span>
<span class="token number">163</span>             iError <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>iFd<span class="token punctuation">,</span> VIDIOC_QUERYBUF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tV4l2Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">164</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>iError<span class="token punctuation">)</span>
<span class="token number">165</span>             <span class="token punctuation">{</span>
<span class="token number">166</span>                 <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to query buffer.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">167</span>                 <span class="token keyword">goto</span> err_exit<span class="token punctuation">;</span>
<span class="token number">168</span>             <span class="token punctuation">}</span>
<span class="token number">169</span>
<span class="token number">170</span>             ptVideoDevice<span class="token operator">-&gt;</span>iVideoBufMaxLen <span class="token operator">=</span> tV4l2Buf<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token number">171</span>             ptVideoDevice<span class="token operator">-&gt;</span>pucVideBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token comment">/* start anywhere */</span> <span class="token punctuation">,</span>
<span class="token number">172</span>                               tV4l2Buf<span class="token punctuation">.</span>length<span class="token punctuation">,</span> PROT_READ<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> iFd<span class="token punctuation">,</span>
<span class="token number">173</span>                               tV4l2Buf<span class="token punctuation">.</span>m<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">174</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>ptVideoDevice<span class="token operator">-&gt;</span>pucVideBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span>
<span class="token number">175</span>             <span class="token punctuation">{</span>
<span class="token number">176</span>                 <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to map buffer\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">177</span>                 <span class="token keyword">goto</span> err_exit<span class="token punctuation">;</span>
<span class="token number">178</span>             <span class="token punctuation">}</span>
<span class="token number">179</span>         <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-7-将申请的缓冲帧放入队列-并启动数据流" tabindex="-1"><a class="header-anchor" href="#_7-4-7-将申请的缓冲帧放入队列-并启动数据流" aria-hidden="true">#</a> 7.4.7 将申请的缓冲帧放入队列，并启动数据流</h3><p>​ 184~194行代码为使用VIDIOC_QBUF命令，将申请的缓冲帧依次放入缓冲帧输入队列，等待被图像采集设备依次填满；</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">181</span>         <span class="token comment">/* Queue the buffers. */</span>
<span class="token number">182</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ptVideoDevice<span class="token operator">-&gt;</span>iVideoBufCnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">183</span>         <span class="token punctuation">{</span>
<span class="token number">184</span>             <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tV4l2Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">185</span>             tV4l2Buf<span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token number">186</span>             tV4l2Buf<span class="token punctuation">.</span>type  <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
<span class="token number">187</span>             tV4l2Buf<span class="token punctuation">.</span>memory <span class="token operator">=</span> V4L2_MEMORY_MMAP<span class="token punctuation">;</span>
<span class="token number">188</span>             iError <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>iFd<span class="token punctuation">,</span> VIDIOC_QBUF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tV4l2Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">189</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>iError<span class="token punctuation">)</span>
<span class="token number">190</span>             <span class="token punctuation">{</span>
<span class="token number">191</span>                 <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to queue buffer.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">192</span>                 <span class="token keyword">goto</span> err_exit<span class="token punctuation">;</span>
<span class="token number">193</span>             <span class="token punctuation">}</span>
<span class="token number">194</span>         <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-8-启动捕捉图像数据" tabindex="-1"><a class="header-anchor" href="#_7-4-8-启动捕捉图像数据" aria-hidden="true">#</a> 7.4.8 启动捕捉图像数据</h3><p>​ 启动捕捉图像数据使用VIDIOC_STREAMON命令，当该命令执行成功后，便可以等待图像数据的到来。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">356</span> <span class="token comment">/**********************************************************************
357 * 函数名称：V4l2StartDevice
358 * 功能描述：开始捕捉图像数据
359 * 输入参数：ptVideoDevice
360 * 输出参数：无
361 * 返 回 值：无
362 * 修改日期             版本号        修改人           修改内容
363 * -----------------------------------------------
364 * 2020/02/16         V1.0     zhenhua             创建
365 ***********************************************************************/</span>
<span class="token number">366</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">V4l2StartDevice</span><span class="token punctuation">(</span>PT_VideoDevice ptVideoDevice<span class="token punctuation">)</span>
<span class="token number">367</span> <span class="token punctuation">{</span>
<span class="token number">368</span>     <span class="token keyword">int</span> iType <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
<span class="token number">369</span>     <span class="token keyword">int</span> iError<span class="token punctuation">;</span>
<span class="token number">370</span>
<span class="token number">371</span>     iError <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>ptVideoDevice<span class="token operator">-&gt;</span>iFd<span class="token punctuation">,</span> VIDIOC_STREAMON<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">372</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>iError<span class="token punctuation">)</span>
<span class="token number">373</span>     <span class="token punctuation">{</span>
<span class="token number">374</span>             <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to start capture.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">375</span>             <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">376</span>     <span class="token punctuation">}</span>
<span class="token number">377</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">378</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-9-出列采集的帧缓冲-并处理图像数据-然后再将数据帧入列" tabindex="-1"><a class="header-anchor" href="#_7-4-9-出列采集的帧缓冲-并处理图像数据-然后再将数据帧入列" aria-hidden="true">#</a> 7.4.9 出列采集的帧缓冲，并处理图像数据，然后再将数据帧入列</h3><p>​ 我们可以使用VIDIOC_DQBUF命令，等待缓冲帧的到来，当有缓冲帧被放入视频输出缓冲队列，我们便可以采到一帧图像。接收到图像我们可以对图像进行操作，例如保存、压缩或者LCD输出等。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">243</span> <span class="token comment">/**********************************************************************
244 * 函数名称：V4l2GetFrameForStreaming
245 * 功能描述：从图像数据流中获取一帧图像数据
246 * 输入参数：ptVideoDevice
247             ptVideoBuf
248 * 输出参数：无
249 * 返 回 值：无
250 * 修改日期             版本号        修改人           修改内容
251 * -----------------------------------------------
252 * 2020/02/16         V1.0     zhenhua             创建
253 ***********************************************************************/</span>
<span class="token number">254</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">V4l2GetFrameForStreaming</span><span class="token punctuation">(</span>PT_VideoDevice ptVideoDevice<span class="token punctuation">,</span> PT_VideoBuf ptVideoBuf<span class="token punctuation">)</span>
<span class="token number">255</span> <span class="token punctuation">{</span>
<span class="token number">256</span>     <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> tFds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">257</span>     <span class="token keyword">int</span> iRet<span class="token punctuation">;</span>
<span class="token number">258</span>     <span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span> tV4l2Buf<span class="token punctuation">;</span>
<span class="token number">259</span>
<span class="token number">260</span>     <span class="token comment">/* poll */</span>
<span class="token number">261</span>     tFds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fd     <span class="token operator">=</span> ptVideoDevice<span class="token operator">-&gt;</span>iFd<span class="token punctuation">;</span>
<span class="token number">262</span>     tFds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span>
<span class="token number">263</span>
<span class="token number">264</span>     iRet <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span>tFds<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">265</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>iRet <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">266</span>     <span class="token punctuation">{</span>
<span class="token number">267</span>         <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;poll error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">268</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">269</span>     <span class="token punctuation">}</span>
<span class="token number">270</span>
<span class="token number">271</span>     <span class="token comment">/* VIDIOC_DQBUF */</span>
<span class="token number">272</span>     <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tV4l2Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">273</span>     tV4l2Buf<span class="token punctuation">.</span>type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
<span class="token number">274</span>     tV4l2Buf<span class="token punctuation">.</span>memory <span class="token operator">=</span> V4L2_MEMORY_MMAP<span class="token punctuation">;</span>
<span class="token number">275</span>     iRet <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>ptVideoDevice<span class="token operator">-&gt;</span>iFd<span class="token punctuation">,</span> VIDIOC_DQBUF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tV4l2Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">276</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>iRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">277</span>     <span class="token punctuation">{</span>
<span class="token number">278</span>             <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to dequeue buffer.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">279</span>             <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">280</span>     <span class="token punctuation">}</span>
<span class="token number">281</span>     ptVideoDevice<span class="token operator">-&gt;</span>iVideoBufCurIndex <span class="token operator">=</span> tV4l2Buf<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
<span class="token number">282</span>
<span class="token number">283</span>     ptVideoBuf<span class="token operator">-&gt;</span>iPixelFormat        <span class="token operator">=</span> ptVideoDevice<span class="token operator">-&gt;</span>iPixelFormat<span class="token punctuation">;</span>
<span class="token number">284</span>     ptVideoBuf<span class="token operator">-&gt;</span>tPixelDatas<span class="token punctuation">.</span>iWidth  <span class="token operator">=</span> ptVideoDevice<span class="token operator">-&gt;</span>iWidth<span class="token punctuation">;</span>
<span class="token number">285</span>     ptVideoBuf<span class="token operator">-&gt;</span>tPixelDatas<span class="token punctuation">.</span>iHeight <span class="token operator">=</span> ptVideoDevice<span class="token operator">-&gt;</span>iHeight<span class="token punctuation">;</span>
<span class="token number">286</span>     ptVideoBuf<span class="token operator">-&gt;</span>tPixelDatas<span class="token punctuation">.</span>iBpp    <span class="token operator">=</span> <span class="token punctuation">(</span>ptVideoDevice<span class="token operator">-&gt;</span>iPixelFormat <span class="token operator">==</span> V4L2_PIX_FMT_YUYV<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">16</span> <span class="token operator">:</span> \\
<span class="token number">287</span>                                         <span class="token punctuation">(</span>ptVideoDevice<span class="token operator">-&gt;</span>iPixelFormat <span class="token operator">==</span> V4L2_PIX_FMT_MJPEG<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span>  \\
<span class="token number">288</span>                                         <span class="token punctuation">(</span>ptVideoDevice<span class="token operator">-&gt;</span>iPixelFormat <span class="token operator">==</span> V4L2_PIX_FMT_RGB565<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">16</span> <span class="token operator">:</span>  \\
<span class="token number">289</span>                                         <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">290</span>     ptVideoBuf<span class="token operator">-&gt;</span>tPixelDatas<span class="token punctuation">.</span>iLineBytes    <span class="token operator">=</span> ptVideoDevice<span class="token operator">-&gt;</span>iWidth <span class="token operator">*</span> ptVideoBuf<span class="token operator">-&gt;</span>tPixelDatas<span class="token punctuation">.</span>iBpp <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token number">291</span>     ptVideoBuf<span class="token operator">-&gt;</span>tPixelDatas<span class="token punctuation">.</span>iTotalBytes   <span class="token operator">=</span> tV4l2Buf<span class="token punctuation">.</span>bytesused<span class="token punctuation">;</span>
<span class="token number">292</span>     ptVideoBuf<span class="token operator">-&gt;</span>tPixelDatas<span class="token punctuation">.</span>aucPixelDatas <span class="token operator">=</span> ptVideoDevice<span class="token operator">-&gt;</span>pucVideBuf<span class="token punctuation">[</span>tV4l2Buf<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">293</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">294</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 当我们从缓冲帧输出队列取出一个缓冲帧，取出图像数据后我们需要将缓冲帧重新放回到视频输入缓冲队列，该操作还是使用VIDIOC_QBUF命令，放回缓冲帧输入队列后继续等待被填满。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">296</span> <span class="token comment">/**********************************************************************
297 * 函数名称：V4l2PutFrameForStreaming
298 * 功能描述：将取出的帧缓冲重新放回图像输入队列
299 * 输入参数：ptVideoDevice
300             ptVideoBuf
301 * 输出参数：无
302 * 返 回 值：无
303 * 修改日期             版本号        修改人           修改内容
304 * -----------------------------------------------
305 * 2020/02/16         V1.0     zhenhua             创建
306 ***********************************************************************/</span>
<span class="token number">307</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">V4l2PutFrameForStreaming</span><span class="token punctuation">(</span>PT_VideoDevice ptVideoDevice<span class="token punctuation">,</span> PT_VideoBuf ptVideoBuf<span class="token punctuation">)</span>
<span class="token number">308</span> <span class="token punctuation">{</span>
<span class="token number">309</span>     <span class="token comment">/* VIDIOC_QBUF */</span>
<span class="token number">310</span>     <span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span> tV4l2Buf<span class="token punctuation">;</span>
<span class="token number">311</span>     <span class="token keyword">int</span> iError<span class="token punctuation">;</span>
<span class="token number">312</span>
<span class="token number">313</span>     <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tV4l2Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">314</span>     tV4l2Buf<span class="token punctuation">.</span>index  <span class="token operator">=</span> ptVideoDevice<span class="token operator">-&gt;</span>iVideoBufCurIndex<span class="token punctuation">;</span>
<span class="token number">315</span>     tV4l2Buf<span class="token punctuation">.</span>type   <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
<span class="token number">316</span>     tV4l2Buf<span class="token punctuation">.</span>memory <span class="token operator">=</span> V4L2_MEMORY_MMAP<span class="token punctuation">;</span>
<span class="token number">317</span>     iError <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>ptVideoDevice<span class="token operator">-&gt;</span>iFd<span class="token punctuation">,</span> VIDIOC_QBUF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tV4l2Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">318</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>iError<span class="token punctuation">)</span>
<span class="token number">319</span>     <span class="token punctuation">{</span>
<span class="token number">320</span>         <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to queue buffer.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">321</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">322</span>     <span class="token punctuation">}</span>
<span class="token number">323</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">324</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-10-停止捕捉图像数据" tabindex="-1"><a class="header-anchor" href="#_7-4-10-停止捕捉图像数据" aria-hidden="true">#</a> 7.4.10 停止捕捉图像数据</h3><p>​ 停止采集图像数据，首先使用VIDIOC_STREAMOFF命令，关闭捕获图像数据。同时要注意取消内存映射和关闭句柄，防止不必要的内存泄漏。代码390~407行为停止捕捉图像数据命令；代码227~241行为取消内存映射和关闭句柄。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">380</span> <span class="token comment">/**********************************************************************
381 * 函数名称：V4l2StopDevice
382 * 功能描述：停止捕捉图像数据
383 * 输入参数：ptVideoDevice
384 * 输出参数：无
385 * 返 回 值：无
386 * 修改日期             版本号        修改人           修改内容
387 * -----------------------------------------------
388 * 2020/02/16         V1.0     zhenhua             创建
389 ***********************************************************************/</span>
<span class="token number">390</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">V4l2StopDevice</span><span class="token punctuation">(</span>PT_VideoDevice ptVideoDevice<span class="token punctuation">)</span>
<span class="token number">391</span> <span class="token punctuation">{</span>
<span class="token number">392</span>     <span class="token keyword">int</span> iType <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
<span class="token number">393</span>     <span class="token keyword">int</span> iError<span class="token punctuation">;</span>
<span class="token number">394</span>
<span class="token number">395</span>     iError <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>ptVideoDevice<span class="token operator">-&gt;</span>iFd<span class="token punctuation">,</span> VIDIOC_STREAMOFF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">396</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>iError<span class="token punctuation">)</span>
<span class="token number">397</span>     <span class="token punctuation">{</span>
<span class="token number">398</span>             <span class="token function">DBG_PRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to stop capture.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">399</span>             <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">400</span>     <span class="token punctuation">}</span>
<span class="token number">401</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">402</span> <span class="token punctuation">}</span>
<span class="token number">403</span>
<span class="token number">404</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">V4l2GetFormat</span><span class="token punctuation">(</span>PT_VideoDevice ptVideoDevice<span class="token punctuation">)</span>
<span class="token number">405</span> <span class="token punctuation">{</span>
<span class="token number">406</span>     <span class="token keyword">return</span> ptVideoDevice<span class="token operator">-&gt;</span>iPixelFormat<span class="token punctuation">;</span>
<span class="token number">407</span> <span class="token punctuation">}</span>


<span class="token number">217</span> <span class="token comment">/**********************************************************************
218 * 函数名称：V4l2ExitDevice
219 * 功能描述：退出采集设备，取消帧缓冲映射和关闭句柄
220 * 输入参数：ptVideoDevice
221 * 输出参数：无
222 * 返 回 值：无
223 * 修改日期             版本号        修改人           修改内容
224 * -----------------------------------------------
225 * 2020/02/16         V1.0     zhenhua             创建
226 ***********************************************************************/</span>
<span class="token number">227</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">V4l2ExitDevice</span><span class="token punctuation">(</span>PT_VideoDevice ptVideoDevice<span class="token punctuation">)</span>
<span class="token number">228</span> <span class="token punctuation">{</span>
<span class="token number">229</span>     <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token number">230</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ptVideoDevice<span class="token operator">-&gt;</span>iVideoBufCnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">231</span>     <span class="token punctuation">{</span>
<span class="token number">232</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>ptVideoDevice<span class="token operator">-&gt;</span>pucVideBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">233</span>         <span class="token punctuation">{</span>
<span class="token number">234</span>             <span class="token function">munmap</span><span class="token punctuation">(</span>ptVideoDevice<span class="token operator">-&gt;</span>pucVideBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ptVideoDevice<span class="token operator">-&gt;</span>iVideoBufMaxLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">235</span>             ptVideoDevice<span class="token operator">-&gt;</span>pucVideBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token number">236</span>         <span class="token punctuation">}</span>
<span class="token number">237</span>     <span class="token punctuation">}</span>
<span class="token number">238</span>
<span class="token number">239</span>     <span class="token function">close</span><span class="token punctuation">(</span>ptVideoDevice<span class="token operator">-&gt;</span>iFd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">240</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">241</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,87),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","07_CameraV4L2.html.vue"]]);export{r as default};
