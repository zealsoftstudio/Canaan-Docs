import{_ as n,o as s,c as a,e as p}from"./app-21fd3c9b.js";const t={},e=p(`<h1 id="_9-gpio编程" tabindex="-1"><a class="header-anchor" href="#_9-gpio编程" aria-hidden="true">#</a> 9 GPIO编程</h1><h2 id="_9-1-gpio编程基础介绍" tabindex="-1"><a class="header-anchor" href="#_9-1-gpio编程基础介绍" aria-hidden="true">#</a> 9.1 GPIO编程基础介绍</h2><p>​ GPIO(General-Purpose IO Ports)，即通用IO接口。GPIO的使用较为简单，主要分为输入和输出两种功能。GPIO主要用于实现一些简单设备的控制。在作为输入型GPIO的情况下，我们可以将该IO连接外部按键或者传感器，用于检测外部状态。当作为输出时，我们可以通过输出高低电平来控制外部设备的运转。</p><p>​ 由于GPIO的功能多种多样，我们需要首先将引脚设置为GPIO。设置为GPIO之后，我们需要设置GPIO的方向。当设置为输出时，我们可以控制输出高电平或者低电平。当设置为输入时，我们可以读取GPIO的电平来判断外部输入电平的高低。</p><h2 id="_9-2-gpio编程软件接口" tabindex="-1"><a class="header-anchor" href="#_9-2-gpio编程软件接口" aria-hidden="true">#</a> 9.2 GPIO编程软件接口</h2><p>​ GPIO编程有多种实现方式，在这里，我们通过sysfs方式来实现GPIO的控制实现。</p><p>​ 如果要通过sysfs方式控制gpio，首先需要底层内核的支持。为了实现内核对sysfs gpio的支持，我们需要在内核中进行设置。在编译内核的时候，加入 Device Drivers-&gt; GPIO Support -&gt;/sys/class/gpio/… (sysfs interface)。作为GPIO的引脚，不允许在内核中被用作其他用途。</p><p>​ 在系统正常运行之后，我们可以在/sys/class/gpio下看到sysfs控制相关的接口。有三种类型的接口， 分别是控制接口，GPIO信号和GPIO控制器三种接口。这部分的具体介绍可参考《kernel\\Documentation\\gpio\\sysfs.txt》。</p><h4 id="_9-2-1-控制接口" tabindex="-1"><a class="header-anchor" href="#_9-2-1-控制接口" aria-hidden="true">#</a> 9.2.1 控制接口</h4><p>​ 控制接口用于实现在用户空间对GPIO的控制，主要包括/sys/class/gpio/export和/sys/class/gpio/unexport两个接口。这这两个控制接口都是只写的，/sys/class/gpio/export实现将GPIO控制从内核空间导出到用户空间，/sys/class/gpio/unexport用于实现取消GPIO控制从内核空间到用户空间的导出。</p><p>​ 下面以引脚编号为19的GPIO为例进行说明，在/sys/class/gpio/目录下，我们执行&quot;echo 19 &gt; export&quot;之后，将会产生一个”gpio19”节点来控制引脚编号为19的GPIO。我们执行&quot;echo 19 &gt; unexport&quot;之后，将会删除之前通过export产生的”gpio19”节点。为了使用gpio，我们需要首先使用/sys/class/gpio/export导出gpio引脚编号。完成使用之后，通过/sys/class/gpio/unexport删除掉之前导出的gpio引脚。</p><h4 id="_9-2-2-gpio信号" tabindex="-1"><a class="header-anchor" href="#_9-2-2-gpio信号" aria-hidden="true">#</a> 9.2.2 GPIO信号</h4><p>​ GPIO信号，即为GPIO本身，其路径为/sys/class/gpio/gpioN/,拥有多个属性。通过对这些属性进行控制，就可以实现对GPIO的控制。</p><ul><li><p>“direction”属性，读取的值为”in”或者”out”。通过对该属性写入”in”或者”out”可以设置该GPIO为输入或者输出。如果直接写入”out”，则会使GPIO直接输出低电平。也可以通过写入”low”或者”high”来直接设置输出低电平或者高电平。</p></li><li><p>”value”属性，用于读取输入电平或者控制输出电平。如果GPIO为输出，则对value写入0为输出低电平，写入非0为输出高电平。如果设置为输入的话，则读到0表示输入为低电平，1为高电平。</p></li><li><p>”edge”属性，用于设置触发电平，只有在GPIO可以设置为中断输入引脚时才会出现该属性。</p></li></ul><h4 id="_9-2-3-gpio控制器" tabindex="-1"><a class="header-anchor" href="#_9-2-3-gpio控制器" aria-hidden="true">#</a> 9.2.3 GPIO控制器</h4><p>​ GPIO控制器，用于表示GPIO 控制实现的初始GPIO，其路径为/sys/class/gpio/gpiochipN/。比如/sys/class/gpio/gpiochip42/ 则表示实现GPIO控制器的初始化编号为42。GPIO控制器的属性为只读属性，包括base、label和ngpio等多个。</p><ul><li><p>”base”属性，和gpiochipN的N代表的含义相同，表示被该组GPIO控制器实现的第一个GPIO.</p></li><li><p>” ngpio”属性，用于表示该控制器支持多少个GPIO，支持的GPIO编号为从N到N+ngpio-1</p></li><li><p>” label”属性，用于判断控制器，并不总是唯一的</p></li></ul><h2 id="_9-3-imx6ull开发板gpio编号的确定" tabindex="-1"><a class="header-anchor" href="#_9-3-imx6ull开发板gpio编号的确定" aria-hidden="true">#</a> 9.3 IMX6ULL开发板GPIO编号的确定</h2><p>​ 每个芯片可以有N组GPIO，每组GPIO最多有32个GPIO，即最多有N*32个GPIO。但是在实际设计中，每组的GPIO数量各有不同。在IMX6ULL中，实际每组拥有的GPIO数量如下图所示，具体详见《IMX6ULLRM.pdf》手册1347页。</p><p><img src="http://photos.100ask.net/NewHomeSite/GPIOProgram_Image001.png" alt=""></p><p>​ 从上图可以看到，在IMX6ULL中，共有5组GPIO，起始GPIO组为GPIO1。因此在实际GPIO编号计算中，第一组GPIO1对应的编号为0~31。以此类推，IMX6ULL的GPION_X（N=1~5，X=0~31对应的编号实际为（N-1）*32+X。接下来，我们以板载的LED和按键各自对应的GPIO为例来说明如何在实际应用中计算GPIO编号。</p><h3 id="_9-3-1-led的gpio编号计算" tabindex="-1"><a class="header-anchor" href="#_9-3-1-led的gpio编号计算" aria-hidden="true">#</a> 9.3.1 LED的GPIO编号计算</h3><p>​ 从原理图中找到对应LED的设计，具体的连接如下图所示。从图中我们可以看到，LED连接到的GPIO为GPIO5_3，其对应的GPIO编号实际为（5-1）*32+3 = 131。因此，我们如果要在sys_gpio中操作LED，我们就需要将编号131的GPIO进行导出。</p><p><img src="http://photos.100ask.net/NewHomeSite/GPIOProgram_Image002.png" alt=""></p><h3 id="_9-3-2-按键的gpio编号计算" tabindex="-1"><a class="header-anchor" href="#_9-3-2-按键的gpio编号计算" aria-hidden="true">#</a> 9.3.2 按键的GPIO编号计算</h3><p>​ 从原理图中找到对应按键的设计，底板有2个按键，具体的连接如下图所示。从图中我们可以看到，两个按键连接到的GPIO分别为GPIO5_1和GPIO4_14，第一个按键KEY1对应的GPIO编号为（5-1） *32+1 = 129，第二个按键KEY2对应的GPIO编号为（4-1） *32+14=110。因此，我们如果要在sys_gpio中读取按键KEY1和KEY2的值，，我们就需要将编号129和110的GPIO进行导出。</p><p><img src="http://photos.100ask.net/NewHomeSite/GPIOProgram_Image003.png" alt=""></p><h3 id="_9-3-3-特殊情况下的gpio编号计算" tabindex="-1"><a class="header-anchor" href="#_9-3-3-特殊情况下的gpio编号计算" aria-hidden="true">#</a> 9.3.3 特殊情况下的GPIO编号计算</h3><p>​ 在有些情况下，起始的gpiochipN不是gpiochip0。这个时候 ，我们就需要在原有的GPIO编号基础上加上起始gpiochipN值进行计算。下图所示的为其实gpiochip为gpiochip0的情况。</p><p><img src="http://photos.100ask.net/NewHomeSite/GPIOProgram_Image004.png" alt=""></p><h2 id="_9-4-实际编程操作" tabindex="-1"><a class="header-anchor" href="#_9-4-实际编程操作" aria-hidden="true">#</a> 9.4 实际编程操作</h2><p>​ 在实际操作中，我们使用LED和按键实现了GPIO输出和输入的实验，相关的实验过程和相关代码如下。</p><h3 id="_9-4-1-导出gpio口" tabindex="-1"><a class="header-anchor" href="#_9-4-1-导出gpio口" aria-hidden="true">#</a> 9.4.1 导出GPIO口</h3><p>​ 为了导出GPIO口，我们需要向/sys/class/gpio/export写入需要导出的引脚编号。在使用之后，我们也可以使用/sys/class/gpio/unexport取消导出引脚编号。</p><p>​ 导出引脚编号的实现代码如下所示，具体详见《sysfs_gpio_1_export_gpio sysfs_gpio_export.c》的sysfs_gpio_export()函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">32</span> <span class="token keyword">int</span> <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> gpio<span class="token punctuation">)</span>
<span class="token number">33</span> <span class="token punctuation">{</span>
<span class="token number">34</span>     <span class="token keyword">int</span> fd<span class="token punctuation">,</span> len<span class="token punctuation">;</span>
<span class="token number">35</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAX_BUF<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">36</span> 	<span class="token comment">// /sys/class/gpio/export</span>
<span class="token number">37</span>     fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span> <span class="token string">&quot;/sys/class/gpio/export&quot;</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开文件</span>
<span class="token number">38</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">39</span>         <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;gpio/export&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span>         <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token number">41</span>     <span class="token punctuation">}</span>
<span class="token number">42</span>  
<span class="token number">43</span>     len <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> gpio<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从数字变换为字符串，即1 变为”1“</span>
<span class="token number">44</span>     <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将需要导出的GPIO引脚编号进行写入</span>
<span class="token number">45</span>     <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>
<span class="token number">46</span>  
<span class="token number">47</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">48</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 取消导出引脚编号的实现代码如下所示，具体详见《sysfs_gpio_export.c》的sysfs_gpio_unexport()函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">59</span> <span class="token keyword">int</span> <span class="token function">sysfs_gpio_unexport</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> gpio<span class="token punctuation">)</span>
<span class="token number">60</span> <span class="token punctuation">{</span>
<span class="token number">61</span>     <span class="token keyword">int</span> fd<span class="token punctuation">,</span> len<span class="token punctuation">;</span>
<span class="token number">62</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAX_BUF<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">63</span> 	<span class="token comment">// /sys/class/gpio/unexport</span>
<span class="token number">64</span>     fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/sys/class/gpio/unexport&quot;</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开文件</span>
<span class="token number">65</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">66</span>         <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;gpio/export&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">67</span>         <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token number">68</span>     <span class="token punctuation">}</span>
<span class="token number">69</span>  
<span class="token number">70</span>     len <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> gpio<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从数字变换为字符串，即1 变为”1“</span>
<span class="token number">71</span>     <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将需要取消导出的GPIO引脚编号进行写入</span>
<span class="token number">72</span>     <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>
<span class="token number">73</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">74</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在实现导出和取消导出引脚编号的函数之后，我们来实现具体的引脚编号的导出。LED和按键各自对应的引脚编号如下所示</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">11</span> #define GPIO4_14	<span class="token number">110</span>
<span class="token number">12</span> #define GPIO5_1 	<span class="token number">129</span>
<span class="token number">13</span> #define GPIO5_3	<span class="token number">131</span> 	
<span class="token number">14</span> 
<span class="token number">15</span> #define GPIO_KEY1     GPIO4_14
<span class="token number">16</span> #define GPIO_KEY2     GPIO5_1
<span class="token number">17</span> #define GPIO_LED	  	 GPIO5_3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在确定了各自对应的引脚编号，我们就可以进行导出了。具体实现代码在程序文件《sysfs_gpio_1_export_gpio/sysfs_gpio_export.c》中main函数，下为对应代码部分，我们将LED和按键对应的引脚都进行了导出。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">183</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">184</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token number">185</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value1<span class="token punctuation">,</span>value2<span class="token punctuation">;</span>
<span class="token number">186</span>    
<span class="token number">187</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">188</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********  SYSFS_GPIO_TEST_DEMO**************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">189</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t******** version date: 2020/05    **********\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">190</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token number">191</span> 
<span class="token number">192</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;gpio begin to export gpio\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">193</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_KEY1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio key1</span>
<span class="token number">194</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_KEY2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio key2</span>
<span class="token number">195</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio led</span>
<span class="token number">196</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;gpio export gpio ok\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">197</span> 
<span class="token number">198</span> 
<span class="token number">199</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">200</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在将代码编译之后，我们将代码在板卡上进行运行。代码运行之后的的结果如下图所示，可以看到成功的将GPIO110、GPIO129和GPIO131进行了导出。</p><p><img src="http://photos.100ask.net/NewHomeSite/GPIOProgram_Image005.png" alt=""></p><h3 id="_9-4-2-设置gpio方向" tabindex="-1"><a class="header-anchor" href="#_9-4-2-设置gpio方向" aria-hidden="true">#</a> 9.4.2 设置GPIO方向</h3><p>​ 为了实现导出的引脚的方向设置，我们需要对/sys/class/gpio/gpioN/direction写入不同的值。写入“in”则表示设置为输入，写入“out”则表示设置为输出。设置引脚编号的的实现代码如下所示，具体详见《sysfs_gpio_2_export_gpio sysfs_gpio_export.c》的sysfs_gpio_set_dir ()函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">86</span> <span class="token keyword">int</span> <span class="token function">sysfs_gpio_set_dir</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> gpio<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> out_flag<span class="token punctuation">)</span>
<span class="token number">87</span> <span class="token punctuation">{</span>
<span class="token number">88</span>     <span class="token keyword">int</span> fd<span class="token punctuation">,</span> len<span class="token punctuation">;</span>
<span class="token number">89</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAX_BUF<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">90</span> 	<span class="token comment">// /sys/class/gpio/gpioN/direction</span>
<span class="token number">91</span>     len <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> SYSFS_GPIO_DIR  <span class="token string">&quot;/gpio%d/direction&quot;</span><span class="token punctuation">,</span> gpio<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">92</span>  
<span class="token number">93</span>     fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开文件</span>
<span class="token number">94</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">95</span>         <span class="token function">perror</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">96</span>         <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token number">97</span>     <span class="token punctuation">}</span>
<span class="token number">98</span>  
<span class="token number">99</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>out_flag<span class="token punctuation">)</span><span class="token comment">//为1，则写入“out&quot;，即设置为输出</span>
<span class="token number">100</span>         <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">&quot;out&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">101</span>     <span class="token keyword">else</span><span class="token comment">//为0，则写入“in&quot;，即设置为输入</span>
<span class="token number">102</span>         <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">&quot;in&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">103</span>  
<span class="token number">104</span>     <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>
<span class="token number">105</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">106</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在实现引脚方向的设置函数之后，我们分别针对按键和LED设置各自不同的方向。将按键设置为输入“IN”,将LED设置为输出“out”，对应的代码如下图所示。相关的代码在程序文件《sysfs_gpio_2_export_gpio/sysfs_gpio_export.c》中main函数，下为对应代码部分。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">183</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">184</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token number">185</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value1<span class="token punctuation">,</span>value2<span class="token punctuation">;</span>
<span class="token number">186</span>    
<span class="token number">187</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">188</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********  SYSFS_GPIO_TEST_DEMO**************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">189</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t******** version date: 2020/05    **********\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">190</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token number">191</span> 		
<span class="token number">192</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;begin to export gpio and direction\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">193</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_KEY1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio key1</span>
<span class="token number">194</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_KEY2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio key2</span>
<span class="token number">195</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio led</span>
<span class="token number">196</span> 
<span class="token number">197</span>     <span class="token function">sysfs_gpio_set_dir</span><span class="token punctuation">(</span>GPIO_KEY1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set as input</span>
<span class="token number">198</span>     <span class="token function">sysfs_gpio_set_dir</span><span class="token punctuation">(</span>GPIO_KEY2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set as input</span>
<span class="token number">199</span>     <span class="token function">sysfs_gpio_set_dir</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set as output</span>
<span class="token number">200</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; export gpio and direction ok\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">201</span> 
<span class="token number">202</span> 
<span class="token number">203</span> 
<span class="token number">204</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">205</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在将代码编译之后，我们将代码在板卡上进行运行。代码运行之后的的结果如下图所示，我们可以看到按键GPIO110和GPIO129的方向设置成了输入，LED2的GPIO131设置成了输入。</p><p><img src="http://photos.100ask.net/NewHomeSite/GPIOProgram_Image006.png" alt=""></p><h3 id="_9-4-3-gpio输出实验-led输出控制" tabindex="-1"><a class="header-anchor" href="#_9-4-3-gpio输出实验-led输出控制" aria-hidden="true">#</a> 9.4.3 GPIO输出实验-LED输出控制</h3><p>​ 为了设置引脚的输出电平高低，我们需要对/sys/class/gpio/gpioN/value写入不同的值。写入‘1’则表示输出高电平，写入‘0’则表示输出低电平。设置引脚输出高低电平的的实现代码如下所示，具体详见《sysfs_gpio_3_export_gpio sysfs_gpio_export.c》的sysfs_gpio_set_value ()函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">119</span> <span class="token keyword">int</span> <span class="token function">sysfs_gpio_set_value</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> gpio<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>
<span class="token number">120</span> <span class="token punctuation">{</span>
<span class="token number">121</span>     <span class="token keyword">int</span> fd<span class="token punctuation">,</span> len<span class="token punctuation">;</span>
<span class="token number">122</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAX_BUF<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">123</span> 	<span class="token comment">// /sys/class/gpio/gpioN/value</span>
<span class="token number">124</span>     len <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> SYSFS_GPIO_DIR <span class="token string">&quot;/gpio%d/value&quot;</span><span class="token punctuation">,</span> gpio<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">125</span>  
<span class="token number">126</span>     fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开文件</span>
<span class="token number">127</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">128</span>         <span class="token function">perror</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">129</span>         <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token number">130</span>     <span class="token punctuation">}</span>
<span class="token number">131</span>  
<span class="token number">132</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment">//为1，则写入“1&quot;，即设置为输出高电平</span>
<span class="token number">133</span>         <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">134</span>     <span class="token keyword">else</span><span class="token comment">//为0，则写入“0&quot;，即设置为输出低电平</span>
<span class="token number">135</span>         <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">136</span>  
<span class="token number">137</span>     <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>
<span class="token number">138</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">139</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在实现引脚输出电平的控制函数之后，我们来实现LED的控制。我们通过将“1”或“0”写入value来控制GPIO输出高电平或者低电平，具体相关的代码在程序文件《sysfs_gpio_3_export_gpio/sysfs_gpio_export.c》中main函数，下为对应代码部分。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">183</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">184</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token number">185</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value1<span class="token punctuation">,</span>value2<span class="token punctuation">;</span>
<span class="token number">186</span>    
<span class="token number">187</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">188</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********  SYSFS_GPIO_TEST_DEMO**************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">189</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t******** version date: 2020/05    **********\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">190</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token number">191</span> 		
<span class="token number">192</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;led begin to init\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">193</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio led</span>
<span class="token number">194</span> 
<span class="token number">195</span>     <span class="token function">sysfs_gpio_set_dir</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set as output</span>
<span class="token number">196</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;led init ok\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">197</span> 
<span class="token number">198</span> 
<span class="token number">199</span>     <span class="token comment">/* Confirm INIT_B Pin as High */</span>
<span class="token number">200</span> 	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">201</span> 	<span class="token punctuation">{</span>
<span class="token number">202</span>     
<span class="token number">203</span>        
<span class="token number">204</span> 		<span class="token function">sysfs_gpio_set_value</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//output high </span>
<span class="token number">205</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;led off\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">206</span> 		<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//delay	</span>
<span class="token number">207</span> 		<span class="token function">sysfs_gpio_set_value</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//output low </span>
<span class="token number">208</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;led on\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">209</span> 		<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//delay</span>
<span class="token number">210</span>     <span class="token punctuation">}</span>
<span class="token number">211</span> 	
<span class="token number">212</span>     <span class="token function">sysfs_gpio_unexport</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//unexport gpio led</span>
<span class="token number">213</span> 
<span class="token number">214</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">215</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在将代码编译之后，我们将代码在板卡上进行运行。代码运行之后的的结果如下图所示， 可以看到规律性的打印LED控制信息（实物可以看到LED灯闪烁）。</p><p><img src="http://photos.100ask.net/NewHomeSite/GPIOProgram_Image007.png" alt=""></p><h3 id="_9-4-4-gpio输入试验-按键值读取" tabindex="-1"><a class="header-anchor" href="#_9-4-4-gpio输入试验-按键值读取" aria-hidden="true">#</a> 9.4.4 GPIO输入试验-按键值读取</h3><p>​ 为了读取引脚输入的电平高低，我们需要读取/sys/class/gpio/gpioN/value的值。读到的是‘1’则表输入为高电平，读到的是‘0’则表示输入为低电平。读取引脚输入电平的、的的实现代码如下所示，具体详见《sysfs_gpio_4_export_gpio sysfs_gpio_export.c》的sysfs_gpio_get_value ()函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">152</span> <span class="token keyword">int</span> <span class="token function">sysfs_gpio_get_value</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> gpio<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>value<span class="token punctuation">)</span>
<span class="token number">153</span> <span class="token punctuation">{</span>
<span class="token number">154</span>     <span class="token keyword">int</span> fd<span class="token punctuation">,</span> len<span class="token punctuation">;</span>
<span class="token number">155</span>     <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAX_BUF<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">156</span>     <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token number">157</span> 	<span class="token comment">// /sys/class/gpio/gpioN/value</span>
<span class="token number">158</span>     len <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> SYSFS_GPIO_DIR <span class="token string">&quot;/gpio%d/value&quot;</span><span class="token punctuation">,</span> gpio<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">159</span>  
<span class="token number">160</span>     fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开文件</span>
<span class="token number">161</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">162</span>         <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;gpio/get-value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">163</span>         <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token number">164</span>     <span class="token punctuation">}</span>
<span class="token number">165</span>  
<span class="token number">166</span>     <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取外部输入电平</span>
<span class="token number">167</span> 
<span class="token number">168</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//为&#39;1&#39;，则设置为1，即输入为高电平</span>
<span class="token number">169</span>         <span class="token operator">*</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">170</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//为&#39;0&#39;，则设置为0，即输入为低电平</span>
<span class="token number">171</span>         <span class="token operator">*</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">172</span>     <span class="token punctuation">}</span>
<span class="token number">173</span>  
<span class="token number">174</span>     <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>
<span class="token number">175</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">176</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在实现引脚电平读取函数之后，我们来实现外部按键值得读取，我们通过读取value的值来读取按键值，具体相关的代码在程序文件《sysfs_gpio_4_export_gpio/sysfs_gpio_export.c》中main函数，下为对应代码部分。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">183</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">184</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token number">185</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value1<span class="token punctuation">,</span>value2<span class="token punctuation">;</span>
<span class="token number">186</span>    
<span class="token number">187</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">188</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********  SYSFS_GPIO_TEST_DEMO**************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">189</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t******** version date: 2020/05    **********\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">190</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token number">191</span> 		
<span class="token number">192</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;key begin to init\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">193</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_KEY1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio key1</span>
<span class="token number">194</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_KEY2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio key2</span>
<span class="token number">195</span>     
<span class="token number">196</span>     <span class="token function">sysfs_gpio_set_dir</span><span class="token punctuation">(</span>GPIO_KEY1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set as input</span>
<span class="token number">197</span>     <span class="token function">sysfs_gpio_set_dir</span><span class="token punctuation">(</span>GPIO_KEY2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set as input</span>
<span class="token number">198</span>    
<span class="token number">199</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;key init ok\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">200</span> 
<span class="token number">201</span> 
<span class="token number">202</span>     <span class="token comment">/* Confirm INIT_B Pin as High */</span>
<span class="token number">203</span> 	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">204</span> 	<span class="token punctuation">{</span>
<span class="token number">205</span>     
<span class="token number">206</span>         <span class="token function">sysfs_gpio_get_value</span><span class="token punctuation">(</span>GPIO_KEY1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//read key1 value	</span>
<span class="token number">207</span> 		<span class="token comment">//printf(&quot;@@key1 value 1is %d \\n\\r&quot;,value1);</span>
<span class="token number">208</span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>value1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//key1 pressed</span>
<span class="token number">209</span> 		<span class="token punctuation">{</span>
<span class="token number">210</span> 			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;@@key1 is pressed 0\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			
<span class="token number">211</span> 		<span class="token punctuation">}</span>
<span class="token number">212</span> 		<span class="token function">sysfs_gpio_get_value</span><span class="token punctuation">(</span>GPIO_KEY2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//read key2 value	</span>
<span class="token number">213</span> 		<span class="token comment">//printf(&quot;##key2 value 1is %d \\n\\r&quot;,value2);</span>
<span class="token number">214</span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>value2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//key2 pressed</span>
<span class="token number">215</span> 		<span class="token punctuation">{</span>
<span class="token number">216</span> 			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;##key2 is pressed 0\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			
<span class="token number">217</span> 		<span class="token punctuation">}</span>
<span class="token number">218</span> 		<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//delay</span>
<span class="token number">219</span> 				
<span class="token number">220</span>     <span class="token punctuation">}</span>
<span class="token number">221</span> 	
<span class="token number">222</span> 	<span class="token function">sysfs_gpio_unexport</span><span class="token punctuation">(</span>GPIO_KEY1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//unexport gpio key1</span>
<span class="token number">223</span>     <span class="token function">sysfs_gpio_unexport</span><span class="token punctuation">(</span>GPIO_KEY2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//unexport gpio key2</span>
<span class="token number">224</span>    
<span class="token number">225</span> 
<span class="token number">226</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">227</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在将代码编译之后，我们将代码在板卡上进行运行。代码运行之后的的结果如下图所示，我们可以看到在按键KEY1和KEY2按下之后打印的值各有不同。</p><p><img src="http://photos.100ask.net/NewHomeSite/GPIOProgram_Image008.png" alt=""></p><h3 id="_9-4-5-led和按键控制实验" tabindex="-1"><a class="header-anchor" href="#_9-4-5-led和按键控制实验" aria-hidden="true">#</a> 9.4.5 LED和按键控制实验</h3><p>​ 在前几个实验中，我们分别实现了LED和按键各自的控制。在这个实验中，我们将前几个实验进行整合，控制LED得闪烁，并读取按键得值。当按键按下时，打印相关信息。具体相关的代码在程序文件《sysfs_gpio_5_export_gpio/sysfs_gpio_export.c》中main函数，下为对应代码部分</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">183</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">184</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token number">185</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value1<span class="token punctuation">,</span>value2<span class="token punctuation">;</span>
<span class="token number">186</span>    
<span class="token number">187</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">188</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********  SYSFS_GPIO_TEST_DEMO**************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">189</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t******** version date: 2020/05    **********\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">190</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t********************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token number">191</span> 		
<span class="token number">192</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;led&amp;key begin to init\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">193</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_KEY1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio key1</span>
<span class="token number">194</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_KEY2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio key2</span>
<span class="token number">195</span>     <span class="token function">sysfs_gpio_export</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//export gpio led</span>
<span class="token number">196</span>     <span class="token function">sysfs_gpio_set_dir</span><span class="token punctuation">(</span>GPIO_KEY1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set as input</span>
<span class="token number">197</span>     <span class="token function">sysfs_gpio_set_dir</span><span class="token punctuation">(</span>GPIO_KEY2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set as input</span>
<span class="token number">198</span>     <span class="token function">sysfs_gpio_set_dir</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set as output</span>
<span class="token number">199</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;led&amp;key init ok\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">200</span> 
<span class="token number">201</span> 
<span class="token number">202</span>     <span class="token comment">/* Confirm INIT_B Pin as High */</span>
<span class="token number">203</span> 	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">204</span> 	<span class="token punctuation">{</span>
<span class="token number">205</span>     
<span class="token number">206</span>         <span class="token function">sysfs_gpio_get_value</span><span class="token punctuation">(</span>GPIO_KEY1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//read key1 value		</span>
<span class="token number">207</span> 		<span class="token comment">//printf(&quot;@@key1 value 1is %d \\n\\r&quot;,value1);</span>
<span class="token number">208</span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>value1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//key1 pressed</span>
<span class="token number">209</span> 		<span class="token punctuation">{</span>
<span class="token number">210</span> 			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;@@key1 is pressed 0\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			
<span class="token number">211</span> 		<span class="token punctuation">}</span>
<span class="token number">212</span> 		<span class="token function">sysfs_gpio_get_value</span><span class="token punctuation">(</span>GPIO_KEY2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//read key2 value	</span>
<span class="token number">213</span> 		<span class="token comment">//printf(&quot;##key2 value 1is %d \\n\\r&quot;,value2);</span>
<span class="token number">214</span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>value2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//key2 pressed</span>
<span class="token number">215</span> 		<span class="token punctuation">{</span>
<span class="token number">216</span> 			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;##key2 is pressed 0\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			
<span class="token number">217</span> 		<span class="token punctuation">}</span>
<span class="token number">218</span> 		<span class="token comment">//led flash </span>
<span class="token number">219</span> 		<span class="token function">sysfs_gpio_set_value</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">220</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;LED OFF\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		
<span class="token number">221</span> 		<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">222</span> 		<span class="token function">sysfs_gpio_set_value</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">223</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;LED ON\\n\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		
<span class="token number">224</span> 		<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">225</span>     <span class="token punctuation">}</span>
<span class="token number">226</span> 	
<span class="token number">227</span> 	<span class="token function">sysfs_gpio_unexport</span><span class="token punctuation">(</span>GPIO_KEY1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//unexport gpio key1</span>
<span class="token number">228</span>     <span class="token function">sysfs_gpio_unexport</span><span class="token punctuation">(</span>GPIO_KEY2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//unexport gpio key2</span>
<span class="token number">229</span>     <span class="token function">sysfs_gpio_unexport</span><span class="token punctuation">(</span>GPIO_LED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//unexport gpio led</span>
<span class="token number">230</span> 
<span class="token number">231</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">232</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在将代码编译之后，我们将代码在板卡上进行运行。代码运行之后的的结果如下图所示，可以看到LED闪烁，按键KEY1和KEY2按下之后打印的值各有不同（因为LED的闪烁导致按键需要经过一次LED闪烁之后才能读取，因此按键必须一直按着才能读取到值的变化）。</p><p><img src="http://photos.100ask.net/NewHomeSite/GPIOProgram_Image009.png" alt=""></p>`,70),o=[e];function c(u,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","09_GPIOProgram.html.vue"]]);export{k as default};
