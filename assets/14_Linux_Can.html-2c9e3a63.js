import{_ as t,r as c,o,c as l,a as n,b as s,d as e,e as p}from"./app-21fd3c9b.js";const i={},u=p(`<h1 id="_14-can编程" tabindex="-1"><a class="header-anchor" href="#_14-can编程" aria-hidden="true">#</a> 14 CAN编程</h1><h2 id="_14-1-can介绍" tabindex="-1"><a class="header-anchor" href="#_14-1-can介绍" aria-hidden="true">#</a> 14.1 CAN介绍</h2><h3 id="_14-1-1-can是什么" tabindex="-1"><a class="header-anchor" href="#_14-1-1-can是什么" aria-hidden="true">#</a> 14.1.1 CAN是什么？</h3><p>​ CAN，全称为“Controller Area Network”，即控制器局域网，是国际上应用最广泛的现场总线之一。</p><p>最初，CAN 被设计作为汽车环境中的微控制器通讯，在车载各电子控制装置 ECU 之间交换信息，形成汽车</p><p>电子控制网络。比如：发动机管理系统、变速箱控制器、仪表装备、电子主干系统中，均嵌入 CAN 控制装</p><p>置。</p><p>​ 一个由 CAN 总线构成的单一网络中，理论上可以挂接无数个节点。实际应用中，节点数目受网络硬件</p><p>的电气特性所限制。例如，当使用 Philips P82C250 作为 CAN 收发器时，同一网络中允许挂接 110 个节点。</p><p>CAN 可提供高达 1Mbit/s 的数据传输速率，这使实时控制变得非常容易。另外，硬件的错误检定特性也增</p><p>强了 CAN 的抗电磁干扰能力。</p><h3 id="_14-1-2-can的起源" tabindex="-1"><a class="header-anchor" href="#_14-1-2-can的起源" aria-hidden="true">#</a> 14.1.2 CAN的起源</h3><p>​ CAN 最初出现在 80 年代末的汽车工业中，由德国 Bosch 公司最先提出。当时，由于消费者对于汽车功</p><p>能的要求越来越多，而这些功能的实现大多是基于电子操作的，这就使得电子装置之间的通讯越来越复杂，</p><p>同时意味着需要更多的连接信号线。提出 CAN 总线的最初动机就是为了解决现代汽车中庞大的电子控制装</p><p>置之间的通讯，减少不断增加的信号线。于是，他们设计了一个单一的网络总线，所有的外围器件可以被</p><p>挂接在该总线上。1993 年，CAN 已成为国际标准 ISO11898(高速应用)和 ISO11519（低速应用）。</p><p>CAN 是一种多主方式的串行通讯总线，基本设计规范要求有高的位速率，高抗电磁干扰性，而且能够检</p><p>测出产生的任何错误。当信号传输距离达到 10Km 时，CAN 仍可提供高达 50Kbit/s 的数据传输速率。</p><p>由于 CAN 总线具有很高的实时性能，因此，CAN 已经在汽车工业、航空工业、工业控制、安全防护等领</p><p>域中得到了广泛应用。</p><h3 id="_14-1-3-can传输模型" tabindex="-1"><a class="header-anchor" href="#_14-1-3-can传输模型" aria-hidden="true">#</a> 14.1.3 CAN传输模型</h3><p>​ CAN 通讯协议主要描述设备之间的信息传递方式。CAN 层的定义与开放系统互连模型（OSI）一致。每</p><p>一层与另一设备上相同的那一层通讯。实际的通讯发生在每一设备上相邻的两层，而设备只通过模型物理</p><p>层的物理介质互连。CAN 的规范定义了模型的最下面两层：数据链路层和物理层。下表中展示了 OSI 开放</p><p>式互连模型的各层。应用层协议可以由 CAN 用户定义成适合特别工业领域的任何方案。已在工业控制和制</p><p>造业领域得到广泛应用的标准是 DeviceNet，这是为 PLC 和智能传感器设计的。在汽车工业，许多制造商</p><p>都应用他们自己的标准。</p><table><thead><tr><th>表格 OSI开发系统互联模型</th><th></th><th></th></tr></thead><tbody><tr><td><strong>序号</strong></td><td><strong>层次</strong></td><td><strong>描述</strong></td></tr><tr><td>7</td><td>应用层</td><td>最高层。用户、软件、网络终端等之间用来进行信息交换。</td></tr><tr><td>6</td><td>表示层</td><td>将两个应用不同数据格式的系统信息转化为能共同理解的格式</td></tr><tr><td>5</td><td>会话层</td><td>依靠低层的通信功能来进行数据的有效传递。</td></tr><tr><td>4</td><td>传输层</td><td>两通讯节点之间数据传输控制。操作如：数据重发，数据错误修复</td></tr><tr><td>3</td><td>网络层</td><td>规定了网络连接的建立、维持和拆除的协议。如：路由和寻址</td></tr><tr><td>2</td><td>数据链路层</td><td>规定了在介质上传输的数据位的排列和组织。如：数据校验和帧结构</td></tr><tr><td>1</td><td>物理层</td><td>规定通讯介质的物理特性。如：电气特性和信号交换的解释</td></tr></tbody></table><p>​ 虽然CAN传输协议参考了OSI 七层模型，但是实际上CAN协议只定义了两层“物理层”和“数据链路层”，因此出现了各种不同的“应用层”协议，比如用在自动化技术的现场总线标准DeviceNet，用于工业控制的CanOpen,用于乘用车的诊断协议OBD、UDS(统一诊断服务，ISO14229)，用于商用车的CAN总线协议SAEJ1939.</p><table><thead><tr><th><strong>表格 CAN的</strong></th><th></th><th></th></tr></thead><tbody><tr><td><strong>序号</strong></td><td><strong>层次</strong></td><td><strong>描述</strong></td></tr><tr><td>7</td><td>应用层</td><td>主要定义CAN应用层。</td></tr><tr><td>2</td><td>数据链路层</td><td>数据链路层分为逻辑链接控制子层LLC和介质访问控制子层MAC。<br>MAC 子层是 CAN 协议的核心。它把接收到的报文提供给 LLC 子<br>层，并接收来自 LLC 子层的报文。 MAC 子层负责报文分帧、仲<br>裁、应答、错误检测和标定。MAC 子层也被称作故障界定的管理<br>实体监管 LLC 子层涉及报文滤波、过载通知、以及恢复管理。<br>LLC = Logical Link Control MAC = Medium Access Control</td></tr><tr><td>1</td><td>物理层</td><td>物理层，为物理编码子层PCS. 该层定义信号是如何实际地传输<br>的，因此涉及到位时间、位编码、同步。</td></tr></tbody></table><h3 id="_14-1-4-can网络拓扑" tabindex="-1"><a class="header-anchor" href="#_14-1-4-can网络拓扑" aria-hidden="true">#</a> 14.1.4 CAN网络拓扑</h3><p>​ CAN总线是一种分布式的控制总线。</p><p>​ CAN总线作为一种控制器局域网，和普通以太网一样，它的网络很多CAN节点构成。</p><p>其网络拓扑结构如下图所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0001.png" alt=""></p><p>​ CAN网络的每个节点非常简单，均由一个MCU（微控制器）、一个CAN控制器和一个CAN收发器构成，然后使用双绞线连接到CAN网络中。</p><h3 id="_14-1-5-can物理特性" tabindex="-1"><a class="header-anchor" href="#_14-1-5-can物理特性" aria-hidden="true">#</a> 14.1.5 CAN物理特性</h3><p>​ CAN总线遵循国际标准ISO11898，如ISO11898-1,ISO11898-2,ISO11898-3,ISO11898-4标准。</p><table><thead><tr><th>序号</th><th>标准</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>ISO11898-1</td><td>数据链路层和物理层信号</td></tr><tr><td>2</td><td>ISO11898-2</td><td>高速接入单元</td></tr><tr><td>3</td><td>ISO11898-3</td><td>低速容错接入单元</td></tr><tr><td>4</td><td>ISO11898-4</td><td>时间触发通讯</td></tr><tr><td>5</td><td>ISO11898-5</td><td>低功耗的接入单元</td></tr><tr><td>6</td><td>ISO11898-6</td><td>选择性唤醒的高速接入单元</td></tr></tbody></table><p>CAN 能够使用多种物理介质，例如双绞线、光纤等。最常用的就是双绞线。</p><p>信号使用差分电压传送，两条信号线被称为“CAN_H”和“CAN_L”。</p><p>静态时CAN_H和CAN_L均是 2.5V 左右，此时状态表示为逻辑“1”，也可以叫做 “隐性”。</p><p>用 CAN_H 比 CAN_L 高表示逻辑“0”，称为“显形”，此时，通常电压值为：CAN_H = 3.5V 和 CAN_L</p><p>= 1.5V 。</p><p>目前实际常用的CAN收发器有如下几种型号：</p><table><thead><tr><th>序号</th><th>型号</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>PCA82C250</td><td>高速 CAN 收发器</td></tr><tr><td>2</td><td>PCA82C251</td><td>高速 CAN 收发器</td></tr><tr><td>3</td><td>PCA82C252</td><td>容错 CAN 收发器</td></tr><tr><td>4</td><td>TJA1040</td><td>高速 CAN 收发器</td></tr><tr><td>5</td><td>TJA1041</td><td>高速 CAN 收发器</td></tr><tr><td>6</td><td>TJA1042</td><td>高速 CAN 收发器</td></tr><tr><td>7</td><td>TJA1043</td><td>高速 CAN 收发器</td></tr><tr><td>8</td><td>TJA1050</td><td>高速 CAN 收发器</td></tr><tr><td>9</td><td>TJA1053</td><td>容错 CAN 收发器</td></tr><tr><td>10</td><td>TJA1054</td><td>容错 CAN 收发器</td></tr></tbody></table><p>目前实际常用的CAN控制器有如下几种型号：</p><table><thead><tr><th>序号</th><th>型号</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>SJA1000</td><td>独立CAN控制器</td></tr><tr><td>2</td><td>MCU内部控制器</td><td>目前市面上如STM32系列，S32K系列，IMX6系列等等很多单片机均内部集成了CAN控制。</td></tr></tbody></table><h3 id="_14-1-6-can报文帧" tabindex="-1"><a class="header-anchor" href="#_14-1-6-can报文帧" aria-hidden="true">#</a> 14.1.6 CAN报文帧</h3><h4 id="_14-1-6-1-can报文格式" tabindex="-1"><a class="header-anchor" href="#_14-1-6-1-can报文格式" aria-hidden="true">#</a> 14.1.6.1 CAN报文格式</h4><p>标准 CAN 的标志符长度是 11 位，而扩展格式 CAN 的标志符长度可达 29 位。</p><p>CAN 协议的 2.0A 版本 规定 CAN 控制器必须有一个 11 位的标志符。</p><p>同时，在 2.0B 版本中规定，CAN 控制器的标志符长度可以是 11 位或 29 位。</p><p>遵循 CAN2.0B 协议的 CAN 控制器可以发送和接收 11 位标识符的标准格式报文或 29 位标识符的扩展格式报文。</p><table><thead><tr><th><strong>标准帧&amp;扩展帧对比</strong></th><th></th><th></th></tr></thead><tbody><tr><td><strong>帧格式</strong></td><td><strong>标准帧</strong></td><td><strong>扩展帧</strong></td></tr><tr><td>规范</td><td>CAN2.0A</td><td>CAN2.0B</td></tr><tr><td>CAN ID（标识符）长度</td><td>11 bits</td><td>29 bits</td></tr><tr><td>CAN ID（标识符）范围</td><td>0x000~0x7FF</td><td>0x00000000~0x1FFFFFFF</td></tr></tbody></table><h4 id="_14-1-6-2-can报文帧类型" tabindex="-1"><a class="header-anchor" href="#_14-1-6-2-can报文帧类型" aria-hidden="true">#</a> 14.1.6.2 CAN报文帧类型</h4><p>CAN报文类型又分如5种帧类型：</p><p>数据帧：主要用于发送方向接收方传输数据的帧；</p><p>遥控帧：主要用于接收方向具有相同ID的发送方请求数据的帧；</p><p>错误帧：主要用于当检测出错误时向其他节点通知错误的帧。</p><p>过载帧：主要用于接收方通知其他尚未做好接收准备的帧。</p><p>间隔帧：主要用于将数据帧及遥控帧与前一帧分隔开来的帧。</p><p>其中数据帧是使用最多的帧类型，这里重点介绍以下数据帧。</p><p>数据帧如下图所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0002.jpeg" alt=""></p><p>由上图所示，数据帧包括：</p><p>（1）帧起始。表示数据帧开始的段。</p><p>（2）仲裁段。表示该帧优先级的段。</p><p>（3）控制段。表示数据的字节数及保留位的段。</p><p>（4）数据段。数据的内容，一帧可发送0~8个字节的数据。</p><p>（5）CRC段。检查帧的传输错误的段。</p><p>（6）ACK段。表示确认正常接收的段。</p><p>（7）帧结束。表示数据帧结束的段。</p><p>具体介绍可以查看”CAN2.0A”、”CAN2.0B”详细介绍。</p><p>我们主要关注我们编程所需要关注的几个段：</p><p>ID: CAN报文ID；</p><p>IDE: 为0是标准帧，为1是扩展帧；</p><p>RTR: 为0是数据帧，为1是远程帧；</p><p>DLC: CAN报文数据长度，范围0~8字节；</p><p>Data：数据，0~8个字节；</p><h2 id="_14-2-can编程框架创建" tabindex="-1"><a class="header-anchor" href="#_14-2-can编程框架创建" aria-hidden="true">#</a> 14.2 CAN编程框架创建</h2><p>当前我们所学习的是应用编程，为了以后CAN编程框架的通用性和可移植性，我们创建一个抽象的CAN应用编程框架，此框架可以适用于单片机应用编程，也可以适用于linux应用编程。</p><p>因此，根据CAN总线编程的通用属性，我们抽象出如下属性：</p><table><thead><tr><th>属性</th><th>属性描述</th><th>说明</th></tr></thead><tbody><tr><td>CAN端口号</td><td>描述CAN端口，如CAN1,CAN2,CAN3,与具体硬件外设有关。</td><td></td></tr><tr><td>CAN收发器配置</td><td>描述CAN收发器模式设置，收发器模式有Normal，Stanby，<br>Sleep，ListenOnly等模式； 本章节所使用的收发器是硬件默<br>认配置，因此不需要配置。</td><td></td></tr><tr><td>CAN控制器配置</td><td>描述CAN收发器配置，如CAN波特率配置，采样率设置，过<br>滤器设置等；</td><td></td></tr><tr><td>CAN中断配置</td><td>描述CAN中断接收函数配置</td><td></td></tr><tr><td>读取CAN报文</td><td>描述CAN读取报文实现</td><td></td></tr><tr><td>发送CAN报文</td><td>描述CAN发送报文实现</td><td></td></tr></tbody></table><p>根据上面表格所描述的属性，创建CAN应用编程框架如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_CAN_COMM_STRUCT</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* CAN硬件名称 */</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">/* CAN端口号，裸机里为端口号;linux应用里作为socket套接口 */</span>
    <span class="token keyword">int</span>  can_port<span class="token punctuation">;</span>                                
    <span class="token comment">/* CAN控制器配置函数，返回端口号赋值给can_port */</span>
    <span class="token keyword">int</span>  <span class="token punctuation">(</span><span class="token operator">*</span>can_set_controller<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                  
    <span class="token comment">/* CAN接口中断创建，在linux中对应创建接收线程 */</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>can_set_interrput<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token keyword">int</span> can_port <span class="token punctuation">,</span> pCanInterrupt callback <span class="token punctuation">)</span><span class="token punctuation">;</span>             
    <span class="token comment">/* CAN读取报文接口 */</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>can_read<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token keyword">int</span> can_port <span class="token punctuation">,</span> CanRxMsg<span class="token operator">*</span> recv_msg<span class="token punctuation">)</span><span class="token punctuation">;</span>   
    <span class="token comment">/* CAN发送报文接口*/</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>can_write<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token keyword">int</span> can_port <span class="token punctuation">,</span> CanTxMsg send_msg<span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token punctuation">}</span>CAN_COMM_STRUCT<span class="token punctuation">,</span> <span class="token operator">*</span>pCAN_COMM_STRUCT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此框架可以用类比套用在单片机上，也可以使用在linux socketcan应用编程上。</p><h2 id="_14-3-stm32-can应用编程" tabindex="-1"><a class="header-anchor" href="#_14-3-stm32-can应用编程" aria-hidden="true">#</a> 14.3 STM32 CAN应用编程</h2><p>本节主要使用14.2中的应用编程框架，在单片机上试验框架的可行性，以一个基本的接收和发送的案例来做讲解；</p><h3 id="_14-3-1-stm32-can接口电路" tabindex="-1"><a class="header-anchor" href="#_14-3-1-stm32-can接口电路" aria-hidden="true">#</a> 14.3.1 STM32 CAN接口电路</h3><p>如下图所示，为本章STM32例程所使用的开发板STM32最小系统和CAN收发器接口电路。</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0003.png" alt="图14.3.1-1 STM32F407最小系统"></p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0004.png" alt="图14.3.1-1 TJA1050 CAN收发器接口电路"></p><h3 id="_14-3-2-stm32-can应用编程步骤" tabindex="-1"><a class="header-anchor" href="#_14-3-2-stm32-can应用编程步骤" aria-hidden="true">#</a> 14.3.2 STM32 CAN应用编程步骤</h3><p>下面我们按照CAN通信的编程框架来一步一步实现基于STM32的CAN应用编程。</p><p>STM32 CAN应用编程，步骤如下：</p><h4 id="_14-3-2-1-准备stm32工程模版" tabindex="-1"><a class="header-anchor" href="#_14-3-2-1-准备stm32工程模版" aria-hidden="true">#</a> <strong>14.3.2.1</strong> <strong>准备STM32工程模版</strong></h4><p>请参见第14章节代码“01_stm32f407_can”例程；</p><p>所使用的开发环境为：MDK 5.24.</p><p>打开MDK工程后，如下图所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0005.png" alt=""></p><p>上图中目录CMSIS, STM32F407_LIB，main均为STM32运行的基础框架。</p><p>目录app_can为CAN应用编程所需要的文件。</p><h4 id="_14-3-2-2-编写can抽象框架的实现函数" tabindex="-1"><a class="header-anchor" href="#_14-3-2-2-编写can抽象框架的实现函数" aria-hidden="true">#</a> <strong>14.3.2.2</strong> <strong>编写CAN抽象框架的实现函数</strong></h4><p><strong>（1）定义CAN端口号</strong></p><p>见第14章节代码“01_stm32f407_can_addline”中“can_controller.h”文件。</p><p>主要根据STM32硬件的CAN有多路，依次定义为CAN_PORTCAN1, CAN_PORT_CAN2等，从“14.3.1 STM32 CAN接口电路”可知道，当前使用的CAN1.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">25</span> <span class="token comment">/* CAN端口号定义*/</span>
<span class="token number">26</span> <span class="token keyword">enum</span>
<span class="token class-name">27</span> <span class="token punctuation">{</span>
<span class="token number">28</span>     CAN_PORT_NONE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token number">29</span>     CAN_PORT_CAN1<span class="token punctuation">,</span>
<span class="token number">30</span>     CAN_PORT_CAN2<span class="token punctuation">,</span>
<span class="token number">31</span>     CAN_PORT_MAX
<span class="token number">32</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）配置CAN控制器</strong></p><p>配置CAN控制器有3个部分：GPIO(CAN_TX,CAN_RX管脚）配置，CAN波特率配置，CAN过滤器配置。</p><p>见第14章节代码“01_stm32f407_can_addline”中“can_controller.c”文件int CAN_Set_Controller( void )函数。</p><p><strong>A.GPIO(CAN_TX,CAN_RX管脚）配置</strong></p><p>配置GPIO代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">96</span>     <span class="token comment">/*************************************************************/</span>
<span class="token number">97</span>     <span class="token comment">/*CAN相关GPIO配置，此处为：CAN_TX, CAN_RX*/</span>
<span class="token number">98</span>
<span class="token number">99</span>     <span class="token comment">/*使能GPIO时钟*/</span>
<span class="token number">100</span>     <span class="token function">RCC_AHB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_AHB1Periph_GPIOD<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">101</span>     <span class="token comment">/*初始化管脚配置*/</span>
<span class="token number">102</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin     <span class="token operator">=</span> GPIO_Pin_0 <span class="token punctuation">;</span>
<span class="token number">103</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode    <span class="token operator">=</span> GPIO_Mode_AF<span class="token punctuation">;</span>
<span class="token number">104</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed   <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>
<span class="token number">105</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_OType   <span class="token operator">=</span> GPIO_OType_PP<span class="token punctuation">;</span>
<span class="token number">106</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_PuPd    <span class="token operator">=</span> GPIO_PuPd_UP<span class="token punctuation">;</span>
<span class="token number">107</span>     <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">108</span>
<span class="token number">109</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin     <span class="token operator">=</span> GPIO_Pin_1<span class="token punctuation">;</span>
<span class="token number">110</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode    <span class="token operator">=</span> GPIO_Mode_AF<span class="token punctuation">;</span>
<span class="token number">111</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed   <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>
<span class="token number">112</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_OType   <span class="token operator">=</span> GPIO_OType_PP<span class="token punctuation">;</span>
<span class="token number">113</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_PuPd    <span class="token operator">=</span> GPIO_PuPd_UP<span class="token punctuation">;</span>
<span class="token number">114</span>     <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">115</span>     <span class="token comment">/*将GPIO设置为CAN复用模式*/</span>
<span class="token number">116</span>     <span class="token function">GPIO_PinAFConfig</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> GPIO_PinSource0<span class="token punctuation">,</span> GPIO_AF_CAN1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">117</span>     <span class="token function">GPIO_PinAFConfig</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> GPIO_PinSource1<span class="token punctuation">,</span> GPIO_AF_CAN1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>B.配置波特率，工作模式</strong></p><p>按照如下代码，使能CAN外设，设置CAN工作模式为Normal，设置波特率为500kbps。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">119</span>     <span class="token comment">/*************************************************************/</span>
<span class="token number">120</span>     <span class="token comment">/*CAN控制器相关配置，此处为波特率，采样率等*/</span>
<span class="token number">121</span>
<span class="token number">122</span>     <span class="token comment">/* 使能CAN时钟 */</span>
<span class="token number">123</span>     <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_CAN1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">124</span>
<span class="token number">125</span>     <span class="token comment">/* 初始化CAN控制器工作模式*/</span>
<span class="token number">126</span>     <span class="token function">CAN_DeInit</span><span class="token punctuation">(</span>CAN1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">127</span>     <span class="token function">CAN_StructInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>CAN_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">128</span>     CAN_InitStructure<span class="token punctuation">.</span>CAN_TTCM <span class="token operator">=</span> DISABLE<span class="token punctuation">;</span>
<span class="token number">129</span>     CAN_InitStructure<span class="token punctuation">.</span>CAN_ABOM <span class="token operator">=</span> DISABLE<span class="token punctuation">;</span>
<span class="token number">130</span>     CAN_InitStructure<span class="token punctuation">.</span>CAN_AWUM <span class="token operator">=</span> DISABLE<span class="token punctuation">;</span>
<span class="token number">131</span>     CAN_InitStructure<span class="token punctuation">.</span>CAN_NART <span class="token operator">=</span> DISABLE<span class="token punctuation">;</span>
<span class="token number">132</span>     CAN_InitStructure<span class="token punctuation">.</span>CAN_RFLM <span class="token operator">=</span> DISABLE<span class="token punctuation">;</span>
<span class="token number">133</span>     CAN_InitStructure<span class="token punctuation">.</span>CAN_TXFP <span class="token operator">=</span> DISABLE<span class="token punctuation">;</span>
<span class="token number">134</span>     CAN_InitStructure<span class="token punctuation">.</span>CAN_Mode <span class="token operator">=</span> CAN_Mode_Normal<span class="token punctuation">;</span><span class="token comment">//CAN工作模式</span>
<span class="token number">135</span>
<span class="token number">136</span>     <span class="token comment">/* 初始化CAN波特率 */</span>
<span class="token number">137</span>     <span class="token function">CAN_Baud_Process</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>CAN_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">138</span>     <span class="token function">CAN_Init</span><span class="token punctuation">(</span>CAN1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>CAN_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中配置波特率的函数是一个自定义函数，这里可以不了解，只需要知道是配置波特率即可，如果需要使用本章代码，可以查看具体的源码工程。</p><p><strong>C.</strong> <strong>配置CAN过滤器</strong></p><p>如下代码为配置过滤器：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">141</span>     <span class="token comment">/*************************************************************/</span>
<span class="token number">142</span>     <span class="token comment">/* 初始化CAN过滤器 */</span>
<span class="token number">143</span>     CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                       <span class="token comment">/* CAN1滤波器号从0到13 */</span>
<span class="token number">144</span>     CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterMode <span class="token operator">=</span> CAN_FilterMode_IdMask<span class="token punctuation">;</span>     <span class="token comment">/* 滤波屏蔽模式 */</span>
<span class="token number">145</span>     CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterScale <span class="token operator">=</span> CAN_FilterScale_32bit<span class="token punctuation">;</span>
<span class="token number">146</span>     CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterIdHigh <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>
<span class="token number">147</span>     CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterIdLow <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>
<span class="token number">148</span>     CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterMaskIdHigh <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>      <span class="token comment">/* 不屏蔽任何ID */</span>
<span class="token number">149</span>     CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterMaskIdLow <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>           <span class="token comment">/* 不屏蔽任何ID */</span>
<span class="token number">150</span>     CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterFIFOAssignment <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">151</span>
<span class="token number">152</span>     CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterActivation <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>
<span class="token number">153</span>     <span class="token function">CAN_FilterInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>CAN_FilterInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">154</span>
<span class="token number">155</span>     <span class="token comment">/*************************************************************/</span>
<span class="token number">156</span>     <span class="token comment">/* 设置完CAN后，返回当前设置的CAN的端口号，此处主要类比linux socketcan中的套接口 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处我们设置过滤器不屏蔽任何报文ID，这里只是了解单片机下的一些过程。</p><p><strong>（3）配置CAN接收中断</strong></p><p>CAN总线支持发送中断和接收中断，此处仅仅使用了接收中断。</p><p>见第14章节代码“01_stm32f407_can_addline”中“can_controller.c”文件void CAN_Set_Interrupt(int can_port, pCanInterrupt callback)函数。</p><p>CAN中断配置代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">163</span> <span class="token comment">/**********************************************************************
164 * 函数名称： void CAN_Set_Interrupt(int can_port,  pCanInterrupt callback)
165 * 功能描述： 使能CAN中断处理，并传入应用的的回调函数，回调函数主要处理应用层的功能
166 * 输入参数： can_port,端口号
167 *            callback： 中断具体处理应用功能的回调函数
168 * 输出参数： 无
169 * 返 回 值： 无
170 * 修改日期             版本号        修改人           修改内容
171 * -----------------------------------------------
172 * 2020/05/13         V1.0             bert            创建
173 ***********************************************************************/</span>
<span class="token number">174</span> <span class="token keyword">void</span> <span class="token function">CAN_Set_Interrupt</span><span class="token punctuation">(</span><span class="token keyword">int</span> can_port<span class="token punctuation">,</span>  pCanInterrupt callback<span class="token punctuation">)</span>
<span class="token number">175</span> <span class="token punctuation">{</span>
<span class="token number">176</span>     NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>
<span class="token number">177</span>
<span class="token number">178</span>     <span class="token comment">/* 根据CAN端口号配置中断 */</span>
<span class="token number">179</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span> can_port <span class="token punctuation">)</span>
<span class="token number">180</span>     <span class="token punctuation">{</span>
<span class="token number">181</span>         <span class="token keyword">case</span> CAN_PORT_CAN1<span class="token operator">:</span>
<span class="token number">182</span>         <span class="token punctuation">{</span>
<span class="token number">183</span>             <span class="token comment">/* 初始化回调接口函数 */</span>
<span class="token number">184</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">!=</span> callback <span class="token punctuation">)</span>
<span class="token number">185</span>             <span class="token punctuation">{</span>
<span class="token number">186</span>                 g_pCanInterrupt <span class="token operator">=</span> callback<span class="token punctuation">;</span>
<span class="token number">187</span>             <span class="token punctuation">}</span>
<span class="token number">188</span>
<span class="token number">189</span>             <span class="token comment">/* 使用CAN0_RX中断，在linux socket can中类似创建接收线程 */</span>
<span class="token number">190</span>             NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> CAN1_RX0_IRQn<span class="token punctuation">;</span>
<span class="token number">191</span>             <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">192</span>             NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">193</span>             NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">194</span>             NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>
<span class="token number">195</span>             <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">196</span>             <span class="token function">CAN_ITConfig</span><span class="token punctuation">(</span>CAN1<span class="token punctuation">,</span> CAN_IT_FMP0<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">197</span>         <span class="token punctuation">}</span>
<span class="token number">198</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">199</span>
<span class="token number">200</span>         <span class="token keyword">default</span><span class="token operator">:</span>
<span class="token number">201</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">202</span>
<span class="token number">203</span>     <span class="token punctuation">}</span>
<span class="token number">204</span>     <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token number">205</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CAN接收中断函数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">275</span> <span class="token comment">/**********************************************************************
276 * 函数名称： void CAN1_RX0_IRQHandler(void)
277 * 功能描述： CAN接收中断函数
278 * 输入参数： 无
279 * 输出参数： 无
280 * 返 回 值： 无
281 * 修改日期             版本号        修改人           修改内容
282 * -----------------------------------------------
283 * 2020/05/13         V1.0             bert            创建
284 ***********************************************************************/</span>
<span class="token number">285</span> <span class="token keyword">void</span> <span class="token function">CAN1_RX0_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">286</span> <span class="token punctuation">{</span>
<span class="token number">287</span>     <span class="token comment">/* 如果回调函数存在，则执行回调函数 */</span>
<span class="token number">288</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> g_pCanInterrupt <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token number">289</span>     <span class="token punctuation">{</span>
<span class="token number">290</span>         <span class="token function">g_pCanInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">291</span>     <span class="token punctuation">}</span>
<span class="token number">292</span>
<span class="token number">293</span>     <span class="token comment">/* 清除挂起中断 */</span>
<span class="token number">294</span>     <span class="token function">CAN_ClearITPendingBit</span><span class="token punctuation">(</span>CAN1<span class="token punctuation">,</span>CAN_IT_FMP0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">295</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处CAN中断通过回调函数g_pCanInterrupt()函数将应用层需要的代码分层到应用层，此处为驱动部分通用接口。</p><p><strong>（4）CAN报文读取函数</strong></p><p>当CAN接收中断产生，通过CAN报文读取函数从FIFO中读取已经接收到的CAN报文。</p><p>见第14章节代码“01_stm32f407_can_addline”中“can_controller.c”文件void CAN_Read(int can_port, CanRxMsg* recv_msg)函数。</p><p>CAN报文读取函数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">208</span> <span class="token comment">/**********************************************************************
209 * 函数名称： void CAN_Read(int can_port, CanRxMsg* recv_msg)
210 * 功能描述： CAN读取接收寄存器，取出接收到的报文
211 * 输入参数： can_port,端口号
212 * 输出参数： recv_msg：接收报文
213 * 返 回 值： 无
214 * 修改日期             版本号        修改人           修改内容
215 * -----------------------------------------------
216 * 2020/05/13         V1.0             bert            创建
217 ***********************************************************************/</span>
<span class="token number">218</span> <span class="token keyword">void</span> <span class="token function">CAN_Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> can_port<span class="token punctuation">,</span> CanRxMsg<span class="token operator">*</span> recv_msg<span class="token punctuation">)</span>
<span class="token number">219</span> <span class="token punctuation">{</span>
<span class="token number">220</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span> can_port <span class="token punctuation">)</span>
<span class="token number">221</span>     <span class="token punctuation">{</span>
<span class="token number">222</span>         <span class="token keyword">case</span> CAN_PORT_CAN1<span class="token operator">:</span>
<span class="token number">223</span>         <span class="token punctuation">{</span>
<span class="token number">224</span>             <span class="token comment">/* 从FIFO中读取CAN报文 */</span>
<span class="token number">225</span>             <span class="token function">CAN_Receive</span><span class="token punctuation">(</span>CAN1<span class="token punctuation">,</span>CAN_FIFO0<span class="token punctuation">,</span> recv_msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">226</span>         <span class="token punctuation">}</span>
<span class="token number">227</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">228</span>
<span class="token number">229</span>         <span class="token keyword">default</span><span class="token operator">:</span>
<span class="token number">230</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">231</span>     <span class="token punctuation">}</span>
<span class="token number">232</span>     <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token number">233</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（5）CAN报文发送函数</strong></p><p>当需要发送CAN报文时，通过向CAN发送邮箱填充数据，启动发送报文。</p><p>见第14章节代码“01_stm32f407_can_addline”中“can_controller.c”文件void CAN_Write(int can_port, CanTxMsg send_msg)函数。</p><p>CAN报文读取函数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">235</span> <span class="token comment">/**********************************************************************
236 * 函数名称： void CAN_Write(int can_port, CanTxMsg send_msg)
237 * 功能描述： CAN报文发送接口，调用发送寄存器发送报文
238 * 输入参数： can_port,端口号
239 * 输出参数： send_msg：发送报文
240 * 返 回 值： 无
241 * 修改日期             版本号        修改人           修改内容
242 * -----------------------------------------------
243 * 2020/05/13         V1.0             bert            创建
244 ***********************************************************************/</span>
<span class="token number">245</span> <span class="token keyword">void</span> <span class="token function">CAN_Write</span><span class="token punctuation">(</span><span class="token keyword">int</span> can_port<span class="token punctuation">,</span> CanTxMsg send_msg<span class="token punctuation">)</span>
<span class="token number">246</span> <span class="token punctuation">{</span>
<span class="token number">247</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>
<span class="token number">248</span>     <span class="token class-name">uint8_t</span> transmit_mailbox <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">249</span>     CanTxMsg TxMessage<span class="token punctuation">;</span>
<span class="token number">250</span>
<span class="token number">251</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span> can_port <span class="token punctuation">)</span>
<span class="token number">252</span>     <span class="token punctuation">{</span>
<span class="token number">253</span>         <span class="token keyword">case</span> CAN_PORT_CAN1<span class="token operator">:</span>
<span class="token number">254</span>         <span class="token punctuation">{</span>
<span class="token number">255</span>             TxMessage<span class="token punctuation">.</span>StdId <span class="token operator">=</span> send_msg<span class="token punctuation">.</span>StdId<span class="token punctuation">;</span>     <span class="token comment">// 标准标识符为0x000~0x7FF</span>
<span class="token number">256</span>             TxMessage<span class="token punctuation">.</span>ExtId <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>             <span class="token comment">// 扩展标识符0x0000</span>
<span class="token number">257</span>             TxMessage<span class="token punctuation">.</span>IDE   <span class="token operator">=</span> CAN_ID_STD<span class="token punctuation">;</span>         <span class="token comment">// 使用标准标识符</span>
<span class="token number">258</span>             TxMessage<span class="token punctuation">.</span>RTR   <span class="token operator">=</span> CAN_RTR_DATA<span class="token punctuation">;</span>       <span class="token comment">// 设置为数据帧</span>
<span class="token number">259</span>             TxMessage<span class="token punctuation">.</span>DLC   <span class="token operator">=</span> send_msg<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span>       <span class="token comment">// 数据长度, can报文规定最大的数据长度为8字节</span>
<span class="token number">260</span>
<span class="token number">261</span>             <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>TxMessage<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">262</span>             <span class="token punctuation">{</span>
<span class="token number">263</span>                 TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> send_msg<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">264</span>             <span class="token punctuation">}</span>
<span class="token number">265</span>             transmit_mailbox <span class="token operator">=</span> <span class="token function">CAN_Transmit</span><span class="token punctuation">(</span>CAN1<span class="token punctuation">,</span><span class="token operator">&amp;</span>TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 返回这个信息请求发送的邮箱号0,1,2或没有邮箱申请发送no_box */</span>
<span class="token number">266</span>         <span class="token punctuation">}</span>
<span class="token number">267</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">268</span>
<span class="token number">269</span>         <span class="token keyword">default</span><span class="token operator">:</span>
<span class="token number">270</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token number">271</span>     <span class="token punctuation">}</span>
<span class="token number">272</span>     <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token number">273</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（6）CAN抽象结构体框架初始化</strong></p><p>定义一个can1通信结构实例CAN_COMM_STRUCT can1_controller；</p><p>使用（1）~（5）步骤实现的函数，初始化can1_controller，构成与应用层关联的一个连接点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">298</span> <span class="token comment">/**********************************************************************
299 * 名称：     can1_controller
300 * 功能描述： CAN1结构体初始化
301 * 修改日期             版本号        修改人           修改内容
302 * -----------------------------------------------
303 * 2020/05/13         V1.0             bert            创建
304 ***********************************************************************/</span>
<span class="token number">305</span> CAN_COMM_STRUCT can1_controller <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token number">306</span>     <span class="token punctuation">.</span>name                   <span class="token operator">=</span> <span class="token string">&quot;can0&quot;</span><span class="token punctuation">,</span>
<span class="token number">307</span>     <span class="token punctuation">.</span>can_port               <span class="token operator">=</span> CAN_PORT_CAN1<span class="token punctuation">,</span>
<span class="token number">308</span>     <span class="token punctuation">.</span>can_set_controller     <span class="token operator">=</span> CAN_Set_Controller<span class="token punctuation">,</span>
<span class="token number">309</span>     <span class="token punctuation">.</span>can_set_interrput      <span class="token operator">=</span> CAN_Set_Interrupt<span class="token punctuation">,</span>
<span class="token number">310</span>     <span class="token punctuation">.</span>can_read               <span class="token operator">=</span> CAN_Read<span class="token punctuation">,</span>
<span class="token number">311</span>     <span class="token punctuation">.</span>can_write              <span class="token operator">=</span> CAN_Write<span class="token punctuation">,</span>
<span class="token number">312</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_14-3-2-3-编写can应用层代码" tabindex="-1"><a class="header-anchor" href="#_14-3-2-3-编写can应用层代码" aria-hidden="true">#</a> <strong>14.3.2.3</strong> <strong>编写CAN应用层代码</strong></h4><p>根据14.3.2.2 已经将具体的CAN硬件操作已经实现，并且已经抽象实例化了CAN编程框架。</p><p>但是我们现在还没关联到应用层，应用层并不知道调用哪个接口。</p><p><strong>（1）CAN应用层注册实例</strong></p><p>在应用层编写一个通用的实例化注册函数。</p><p>见第14章节代码“01_stm32f407_can_addline”中“app_can.c”文件int register_can_controller(const pCAN_COMM_STRUCT p_can_controller)函数。</p><p>代码实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">62</span> <span class="token comment">/**********************************************************************
63 * 函数名称： int register_can_controller(const pCAN_COMM_STRUCT p_can_controller)
64 * 功能描述： 应用层进行CAN1结构体注册
65 * 输入参数： p_can_controller，CAN控制器抽象结构体
66 * 输出参数： 无
67 * 返 回 值： 无
68 * 修改日期             版本号        修改人           修改内容
69 * -----------------------------------------------
70 * 2020/05/13         V1.0             bert            创建
71 ***********************************************************************/</span>
<span class="token number">72</span> <span class="token keyword">int</span> <span class="token function">register_can_controller</span><span class="token punctuation">(</span><span class="token keyword">const</span> pCAN_COMM_STRUCT p_can_controller<span class="token punctuation">)</span>
<span class="token number">73</span> <span class="token punctuation">{</span>
<span class="token number">74</span>     <span class="token comment">/* 判断传入的p_can_controller为非空，目的是确认这个结构体是实体*/</span>
<span class="token number">75</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> p_can_controller <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>
<span class="token number">76</span>     <span class="token punctuation">{</span>
<span class="token number">77</span>         <span class="token comment">/* 将传入的参数p_can_controller赋值给应用层结构体gCAN_COMM_STRUCT */</span>
<span class="token number">78</span>
<span class="token number">79</span>         <span class="token comment">/*端口号，类比socketcan套接口*/</span>
<span class="token number">80</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port              <span class="token operator">=</span> p_can_controller<span class="token operator">-&gt;</span>can_port<span class="token punctuation">;</span>
<span class="token number">81</span>         <span class="token comment">/*CAN控制器配置函数*/</span>
<span class="token number">82</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_set_controller    <span class="token operator">=</span> p_can_controller<span class="token operator">-&gt;</span>can_set_controller<span class="token punctuation">;</span>
<span class="token number">83</span>         <span class="token comment">/*CAN中断配置*/</span>
<span class="token number">84</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_set_interrput     <span class="token operator">=</span> p_can_controller<span class="token operator">-&gt;</span>can_set_interrput<span class="token punctuation">;</span>
<span class="token number">85</span>         <span class="token comment">/*CAN报文读函数*/</span>
<span class="token number">86</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_read              <span class="token operator">=</span> p_can_controller<span class="token operator">-&gt;</span>can_read<span class="token punctuation">;</span>
<span class="token number">87</span>         <span class="token comment">/*CAN报文发送函数*/</span>
<span class="token number">88</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_write             <span class="token operator">=</span> p_can_controller<span class="token operator">-&gt;</span>can_write<span class="token punctuation">;</span>
<span class="token number">89</span>         <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">90</span>     <span class="token punctuation">}</span>
<span class="token number">91</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">92</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过调用register_can_controller( &amp;can1_controller );将实例can1_controller注册给应用的4 static CAN_COMM_STRUCT gCAN_COMM_STRUCT;</p><p>之后应用层只需要调用应用层自己的gCAN_COMM_STRUCT实例即可操作CAN通信功能。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">315</span> <span class="token comment">/**********************************************************************
316 * 函数名称： void CAN1_contoller_add(void)
317 * 功能描述： CAN结构体注册接口，应用层在使用can1_controller前调用
318 * 输入参数： 无
319 * 输出参数： 无
320 * 返 回 值： 无
321 * 修改日期             版本号        修改人           修改内容
322 * -----------------------------------------------
323 * 2020/05/13         V1.0             bert            创建
324 ***********************************************************************/</span>
<span class="token number">325</span> <span class="token keyword">void</span> <span class="token function">CAN1_contoller_add</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">326</span> <span class="token punctuation">{</span>
<span class="token number">327</span>     <span class="token comment">/*将can1_controller传递给应用层*/</span>
<span class="token number">328</span>     <span class="token function">register_can_controller</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>can1_controller <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">329</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）CAN应用层初始化</strong></p><p>CAN应用层初始化代码如下；</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">94</span> <span class="token comment">/**********************************************************************
95 * 函数名称： void app_can_init(void)
96 * 功能描述： CAN应用层初始化
97 * 输入参数： 无
98 * 输出参数： 无
99 * 返 回 值： 无
100 * 修改日期             版本号        修改人           修改内容
101 * -----------------------------------------------
102 * 2020/05/13         V1.0             bert            创建
103 ***********************************************************************/</span>
<span class="token number">104</span> <span class="token keyword">void</span> <span class="token function">app_can_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">105</span> <span class="token punctuation">{</span>
<span class="token number">106</span>     <span class="token comment">/**
107     * 应用层进行CAN1结构体注册
108     */</span>
<span class="token number">109</span>     <span class="token function">CAN1_contoller_add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">110</span>
<span class="token number">111</span>     <span class="token comment">/*
112     *调用can_set_controller进行CAN控制器配置，
113     *返回can_port，类比linux socketcan中的套接口，单片机例程中作为自定义CAN通道
114     */</span>
<span class="token number">115</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port <span class="token operator">=</span> gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_set_controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">116</span>     <span class="token comment">/**
117     * 调用can_set_interrput配置CAN接收中断，类比socketcan中的接收线程
118     */</span>
<span class="token number">119</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_set_interrput</span><span class="token punctuation">(</span> gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> CAN_RX_IRQHandler_Callback <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">120</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）设计一个简单的周期发送报文功能</strong></p><p>CAN周期发送报文的功能代码实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">123</span> <span class="token comment">/**********************************************************************
124 * 函数名称： void app_can_tx_test(void)
125 * 功能描述： CAN应用层报文发送函数，用于测试周期发送报文
126 * 输入参数： 无
127 * 输出参数： 无
128 * 返 回 值： 无
129 * 修改日期             版本号        修改人           修改内容
130 * -----------------------------------------------
131 * 2020/05/13         V1.0             bert            创建
132 ***********************************************************************/</span>
<span class="token number">133</span> <span class="token keyword">void</span> <span class="token function">app_can_tx_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">134</span> <span class="token punctuation">{</span>
<span class="token number">135</span>     <span class="token comment">// 以10ms为基准，运行CAN测试程序</span>
<span class="token number">136</span>
<span class="token number">137</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">138</span>
<span class="token number">139</span>     <span class="token comment">/* 发送报文定义 */</span>
<span class="token number">140</span>     CanTxMsg TxMessage<span class="token punctuation">;</span>
<span class="token number">141</span>
<span class="token number">142</span>     <span class="token comment">/* 发送报文中用一个字节来作为计数器 */</span>
<span class="token number">143</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tx_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">144</span>
<span class="token number">145</span>     <span class="token comment">/* 以10ms为基准，通过timer计数器设置该处理函数后面运行代码的周期为1秒钟*/</span>
<span class="token number">146</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timer <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">147</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token number">148</span>     <span class="token punctuation">{</span>
<span class="token number">149</span>         timer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">150</span>     <span class="token punctuation">}</span>
<span class="token number">151</span>     <span class="token keyword">else</span>
<span class="token number">152</span>     <span class="token punctuation">{</span>
<span class="token number">153</span>         <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token number">154</span>     <span class="token punctuation">}</span>
<span class="token number">155</span>
<span class="token number">156</span>     <span class="token comment">/* 发送报文报文数据填充，此报文周期是1秒 */</span>
<span class="token number">157</span>     TxMessage<span class="token punctuation">.</span>StdId <span class="token operator">=</span> TX_CAN_ID<span class="token punctuation">;</span>          <span class="token comment">/* 标准标识符为0x000~0x7FF */</span>
<span class="token number">158</span>     TxMessage<span class="token punctuation">.</span>ExtId <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>             <span class="token comment">/* 扩展标识符0x0000 */</span>
<span class="token number">159</span>     TxMessage<span class="token punctuation">.</span>IDE   <span class="token operator">=</span> CAN_ID_STD<span class="token punctuation">;</span>         <span class="token comment">/* 使用标准标识符 */</span>
<span class="token number">160</span>     TxMessage<span class="token punctuation">.</span>RTR   <span class="token operator">=</span> CAN_RTR_DATA<span class="token punctuation">;</span>       <span class="token comment">/* 设置为数据帧  */</span>
<span class="token number">161</span>     TxMessage<span class="token punctuation">.</span>DLC   <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>                  <span class="token comment">/* 数据长度, can报文规定最大的数据长度为8字节 */</span>
<span class="token number">162</span>
<span class="token number">163</span>     <span class="token comment">/* 填充数据，此处可以根据实际应用填充 */</span>
<span class="token number">164</span>     TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tx_counter<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token comment">/* 用来识别报文发送计数器 */</span>
<span class="token number">165</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>TxMessage<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">166</span>     <span class="token punctuation">{</span>
<span class="token number">167</span>         TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token number">168</span>     <span class="token punctuation">}</span>
<span class="token number">169</span>
<span class="token number">170</span>     <span class="token comment">/*  调用can_write发送CAN报文 */</span>
<span class="token number">171</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">172</span>
<span class="token number">173</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）设计一个简单的接收报文功能</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">220</span> <span class="token comment">/**********************************************************************
221 * 函数名称： void CAN_RX_IRQHandler_Callback(void)
222 * 功能描述： CAN1接收中断函数；在linux中可以类比用线程，或定时器去读CAN数据
223 * 输入参数： 无
224 * 输出参数： 无
225 * 返 回 值： 无
226 * 修改日期             版本号        修改人           修改内容
227 * -----------------------------------------------
228 * 2020/05/13         V1.0             bert            创建
229 ***********************************************************************/</span>
<span class="token number">230</span> <span class="token keyword">void</span> <span class="token function">CAN_RX_IRQHandler_Callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">231</span> <span class="token punctuation">{</span>
<span class="token number">232</span>     <span class="token comment">/* 接收报文定义 */</span>
<span class="token number">233</span>     CanRxMsg RxMessage<span class="token punctuation">;</span>
<span class="token number">234</span>
<span class="token number">235</span>     <span class="token comment">/* 接收报文清零 */</span>
<span class="token number">236</span>     <span class="token function">memset</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>RxMessage<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>CanRxMsg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">237</span>
<span class="token number">238</span>     <span class="token comment">/* 通过can_read接口读取寄存器已经接收到的报文 */</span>
<span class="token number">239</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_read</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>RxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">240</span>
<span class="token number">241</span>     <span class="token comment">/* 将读取到的CAN报文存拷贝到全局报文结构体g_CAN1_Rx_Message */</span>
<span class="token number">242</span>     <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_CAN1_Rx_Message<span class="token punctuation">,</span> <span class="token operator">&amp;</span>RxMessage<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> CanRxMsg <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">243</span>
<span class="token number">244</span>     <span class="token comment">/* 设置当前接收完成标志，判断当前接收报文ID为RX_CAN_ID，则设置g_CAN1_Rx_Flag=1*/</span>
<span class="token number">245</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> g_CAN1_Rx_Message<span class="token punctuation">.</span>StdId <span class="token operator">==</span> RX_CAN_ID <span class="token punctuation">)</span>
<span class="token number">246</span>     <span class="token punctuation">{</span>
<span class="token number">247</span>         g_CAN1_Rx_Flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">248</span>     <span class="token punctuation">}</span>
<span class="token number">249</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">176</span> <span class="token comment">/**********************************************************************
177 * 函数名称： void app_can_rx_test(void)
178 * 功能描述： CAN应用层接收报文处理函数，用于处理中断函数中接收的报文
179 * 输入参数： 无
180 * 输出参数： 无
181 * 返 回 值： 无
182 * 修改日期             版本号        修改人           修改内容
183 * -----------------------------------------------
184 * 2020/05/13         V1.0             bert            创建
185 ***********************************************************************/</span>
<span class="token number">186</span> <span class="token keyword">void</span> <span class="token function">app_can_rx_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">187</span> <span class="token punctuation">{</span>
<span class="token number">188</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">189</span>
<span class="token number">190</span>     <span class="token comment">/* 发送报文定义 */</span>
<span class="token number">191</span>     CanTxMsg TxMessage<span class="token punctuation">;</span>
<span class="token number">192</span>
<span class="token number">193</span>     <span class="token comment">/* 发送报文中用一个字节来作为计数器 */</span>
<span class="token number">194</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> rx_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">195</span>
<span class="token number">196</span>
<span class="token number">197</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> g_CAN1_Rx_Flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">198</span>     <span class="token punctuation">{</span>
<span class="token number">199</span>         g_CAN1_Rx_Flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">200</span>
<span class="token number">201</span>         <span class="token comment">/* 发送报文报文数据填充，此报文周期是1秒 */</span>
<span class="token number">202</span>         TxMessage<span class="token punctuation">.</span>StdId <span class="token operator">=</span> RX_TO_TX_CAN_ID<span class="token punctuation">;</span>    <span class="token comment">/* 标准标识符为0x000~0x7FF */</span>
<span class="token number">203</span>         TxMessage<span class="token punctuation">.</span>ExtId <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>             <span class="token comment">/* 扩展标识符0x0000 */</span>
<span class="token number">204</span>         TxMessage<span class="token punctuation">.</span>IDE   <span class="token operator">=</span> CAN_ID_STD<span class="token punctuation">;</span>         <span class="token comment">/* 使用标准标识符 */</span>
<span class="token number">205</span>         TxMessage<span class="token punctuation">.</span>RTR   <span class="token operator">=</span> CAN_RTR_DATA<span class="token punctuation">;</span>       <span class="token comment">/* 设置为数据帧  */</span>
<span class="token number">206</span>         TxMessage<span class="token punctuation">.</span>DLC   <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>                  <span class="token comment">/* 数据长度, can报文规定最大的数据长度为8字节 */</span>
<span class="token number">207</span>
<span class="token number">208</span>         <span class="token comment">/* 填充数据，此处可以根据实际应用填充 */</span>
<span class="token number">209</span>         TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> rx_counter<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment">/* 用来识别报文发送计数器 */</span>
<span class="token number">210</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>TxMessage<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">211</span>         <span class="token punctuation">{</span>
<span class="token number">212</span>             TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> g_CAN1_Rx_Message<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">213</span>         <span class="token punctuation">}</span>
<span class="token number">214</span>
<span class="token number">215</span>         <span class="token comment">/*  调用can_write发送CAN报文 */</span>
<span class="token number">216</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">217</span>     <span class="token punctuation">}</span>
<span class="token number">218</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_14-3-2-4-stm32-can案例测试" tabindex="-1"><a class="header-anchor" href="#_14-3-2-4-stm32-can案例测试" aria-hidden="true">#</a> <strong>14.3.2.4 STM32 CAN案例测试</strong></h4><p>在前面几个章节将代码编写完成之后，我们做个测试；</p><p>测试工具使用的是：英特蓓斯的Valuecan3(CAN协议盒)，Vehicle Vspy3（电脑端软件）。</p><p>也可以在淘宝上购买便宜的USB转CAN的工具即可。</p><p>测试步骤如下：</p><p>Step1：将已经完成的STM32 CAN测试程序下载到实际开发板上；</p><p>Step2：通过CAN测试工具Vehicle Vspy3发送报文ID为0X201的报文；</p><p>Step3：观察CAN测试软件显示如下：</p><p>报文ID为0x101的报文是按照1秒周期进行发送，如图14.3.2.4-1。</p><p>报文ID为0x201的报文是Vehicle Spy3按照周期500ms发送给STM32开发板，如图14.3.2.4-1</p><p>报文ID为0x301的报文是在接收到报文ID为0x201的报文后，然后转发出报文ID为0x301的报文，如图14.3.2.4-2。</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0006.png" alt="图14.3.2.4-1 报文发送结果查看"></p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0007.png" alt="图14.3.2.4-2 报文接收情况查看"></p><h2 id="_14-4-linux-socketcan基础应用编程" tabindex="-1"><a class="header-anchor" href="#_14-4-linux-socketcan基础应用编程" aria-hidden="true">#</a> <strong>14.4 Linux socketcan基础应用编程</strong></h2><h3 id="_14-4-1-socketcan概述" tabindex="-1"><a class="header-anchor" href="#_14-4-1-socketcan概述" aria-hidden="true">#</a> <strong>14.4.1 socketcan概述</strong></h3><p>​ socketcan是在Linux下CAN协议(Controller Area Network)实现的一种实现方法。 CAN是一种在世界范围内广泛用于自动控制、嵌入式设备和汽车领域的网络技术。Linux下最早使用CAN的方法是基于字符设备来实现的，与之不同的是Socket CAN使用伯克利的socket接口和linux网络协议栈，这种方法使得can设备驱动可以通过网络接口来调用。Socket CAN的接口被设计的尽量接近TCP/IP的协议，让那些熟悉网络编程的程序员能够比较容易的学习和使用。</p><p>​ 使用Socket CAN的主要目的就是为用户空间的应用程序提供基于Linux网络层的套接字接口。与广为人知的TCP/IP协议以及以太网不同，CAN总线没有类似以太网的MAC层地址，只能用于广播。CAN ID仅仅用来进行总线的仲裁。因此CAN ID在总线上必须是唯一的。当设计一个CAN-ECU(Electronic Control Unit 电子控制单元）网络的时候，CAN报文ID可以映射到具体的ECU。因此CAN报文ID可以当作发送源的地址来使用。</p><h3 id="_14-4-2-socketcan基本知识点" tabindex="-1"><a class="header-anchor" href="#_14-4-2-socketcan基本知识点" aria-hidden="true">#</a> <strong>14.4.2 socketcan基本知识点</strong></h3><p>​ 在“14.3 STM32 CAN应用编程”中我们已经完整的构建了CAN应用编程框架，但是在linux应用编程中，操作CAN底层驱动与STM32思路上相似，但是操作方法或者说调用的接口还是差异很大的，因为STM32是直接调用的SDK包或直接操作寄存器，但是linux系统是需要通过调用系统命令或linuxCAN驱动来实现物理层的操作。</p><p>因此这里我们重点介绍linux上的一些系统调用命令，和一些socketcan相关的概念。</p><h4 id="_14-4-2-1-can设备操作" tabindex="-1"><a class="header-anchor" href="#_14-4-2-1-can设备操作" aria-hidden="true">#</a> <strong>14.4.2.1 CAN设备操作</strong></h4><p>​ CAN设备有开启、关闭、设置参数3个功能。因为linux下CAN设备是模拟网络操作的方式，这里CAN设备的开启、关闭和设置，均通过ip命令来操作。</p><p>​ 在100ask_IMX6ULL开发板上打开串口，使用“ifconfig -a”查看所有的网络节点，发现第1个节点就是“can0”。</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0008.png" alt=""></p><p>（1）Linux CAN设备开启：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ip_cmd_open</span>      <span class="token string">&quot;ifconfig can0 up&quot;</span>     <span class="token comment">/* 打开CAN0 */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明：can0：can设备名；</p><p>up： 打开设备命令</p><p>（2）Linux CAN设备关闭：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ip_cmd_close</span>      <span class="token string">&quot;ifconfig can0 down&quot;</span>    <span class="token comment">/* 关闭CAN0 */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明：can0：can设备名；</p><p>down： 关闭设备命令</p><p>（2）Linux CAN参数设置（波特率，采样率）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ip_cmd_set_can_params</span> <span class="token string">&quot;ip link set can0 type can bitrate 500000 triple-sampling on&quot;</span></span>

<span class="token comment">/* 将CAN0波特率设置为500000 bps */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：can0：can设备名；</p><p>down： 关闭设备命令</p><p>Type can： 设备类型为can</p><p>Bitrate 500000： 波特率设置为500kbps</p><p>Triple-sampleing on: 采样打开</p><h4 id="_14-4-2-2-什么是socket套接口" tabindex="-1"><a class="header-anchor" href="#_14-4-2-2-什么是socket套接口" aria-hidden="true">#</a> <strong>14.4.2.2 什么是Socket套接口</strong></h4><p>​ 在linux里网络操作使用socket进行接口创建，竟然CAN设备也是虚拟成网络接口，也是使用的socket套接口。</p><p>​ 如下图所示，电话A呼叫电话B，电话A会输入电话B的号码，电话B会接收到电话A的来电。</p><p>电话A和电话B是两个端点。而linux套接口与这个电话通信类似，套接口就是一个通信的端点，端点之间是通信链路；电话通信是通过电话号码进行拨号通信，而套接口是使用地址进行识别对方的。</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0009.png" alt="图14.2.2.2 电话通信模型"></p><h4 id="_14-4-2-3-socket接口函数" tabindex="-1"><a class="header-anchor" href="#_14-4-2-3-socket接口函数" aria-hidden="true">#</a> <strong>14.4.2.3 Socket接口函数</strong></h4><p>我们要创建并使用socket套接口进行通信编程，就需要了解一下socket相关的接口函数。</p><p>需要查询linux系统里的函数，可以通过man命令查看。</p><p>举例：</p><p>man socket /* 查看socket函数描述 */</p><p><strong>（1）socket()函数</strong></p><p>在linux系统下，通过“man socket”命令，查询socket()函数描述如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0010.png" alt=""></p><p>Socket函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span>     </span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 套接口函数原型 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数三个参数如下:</p><table><thead><tr><th>domain：即协议域，又称为协议族（family）。 常用的协议族有，AF_INET、AF_INET6、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。</th></tr></thead><tbody><tr><td>type： 指定socket类型。常用的socket类型有， SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等。</td></tr><tr><td>protocol：就是指定协议。 常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议。</td></tr></tbody></table><p>注意：</p><p>​ 1.并不是上面的type和protocol可以随意组合的，如SOCK_STREAM不可以跟IPPROTO_UDP组合。当protocol为0时，会自动选择type类型对应的默认协议。</p><p>​ 当我们调用socket创建一个socket时，返回的socket描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用bind()函数，否则就当调用connect()、listen()时系统会自动随机分配一个端口。</p><p>​ 2. Socketcan使用的domain协议域是AF_CAN(或PF_CAN)，type类型是SOCK_RAW, 指定协议protocol是CAN_RAW.</p><p><strong>（2）bind()函数</strong></p><p>​ 在linux系统下，通过“man bind”命令，查询bind()函数描述如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0011.png" alt=""></p><p>​ bind()函数把一个地址族中的特定地址赋给socket。例如对应AF_INET、AF_INET6就是把一个ipv4或ipv6地址和端口号组合赋给socket。</p><p>​ Bind函数原型如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span>          </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span><span class="token class-name">socklen_t</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数的三个参数分别为：</p><p><strong>sockfd</strong>：即socket描述字，它是通过socket()函数创建了，唯一标识一个socket。bind()函数就是将给这个描述字绑定一个名字。</p><p><strong>addr</strong>：一个const struct sockaddr *指针，指向要绑定给sockfd的协议地址。这个地址结构根据地址创建socket时的地址协议族的不同而不同，</p><p>如ipv4对应的是：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token punctuation">{</span>
    <span class="token class-name">sa_family_t</span>    sin_family<span class="token punctuation">;</span>   <span class="token comment">/* address family: AF_INET */</span>
    <span class="token class-name">in_port_t</span>      sin_port<span class="token punctuation">;</span>    <span class="token comment">/* port in network byte order */</span>
    <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> sin_addr<span class="token punctuation">;</span>     <span class="token comment">/* internet address */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* Internet address. */</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>       s_addr<span class="token punctuation">;</span>     <span class="token comment">/* address in network byte order */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ipv6对应的是：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in6</span> <span class="token punctuation">{</span> 
    <span class="token class-name">sa_family_t</span>     sin6_family<span class="token punctuation">;</span>   <span class="token comment">/* AF_INET6 */</span> 
    <span class="token class-name">in_port_t</span>       sin6_port<span class="token punctuation">;</span>     <span class="token comment">/* port number */</span> 
    <span class="token class-name">uint32_t</span>        sin6_flowinfo<span class="token punctuation">;</span> <span class="token comment">/* IPv6 flow information */</span> 
    <span class="token keyword">struct</span> <span class="token class-name">in6_addr</span>  sin6_addr<span class="token punctuation">;</span>     <span class="token comment">/* IPv6 address */</span> 
    <span class="token class-name">uint32_t</span>        sin6_scope_id<span class="token punctuation">;</span> <span class="token comment">/* Scope ID (new in 2.4) */</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">in6_addr</span> <span class="token punctuation">{</span> 
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   s6_addr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">/* IPv6 address */</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unix域对应的是：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UNIX_PATH_MAX</span>  <span class="token expression"><span class="token number">108</span></span></span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> <span class="token punctuation">{</span> 
  <span class="token class-name">sa_family_t</span> sun_family<span class="token punctuation">;</span>        <span class="token comment">/* AF_UNIX */</span> 
  <span class="token keyword">char</span>    sun_path<span class="token punctuation">[</span>UNIX_PATH_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* pathname */</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CAN域对应的是：</p><p>在文件“Linux-4.9.88\\include\\uapi\\linux\\can.h”中有定义，这个是本章需要重点了解的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * struct sockaddr_can - CAN sockets的地址结构
 * @can_family:  地址协议族 AF_CAN.
 * @can_ifindex:  CAN网络接口索引
 * @can_addr:    协议地址信息
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr_can</span> <span class="token punctuation">{</span>
	__kernel_sa_family_t can_family<span class="token punctuation">;</span>
	<span class="token keyword">int</span>         can_ifindex<span class="token punctuation">;</span>
	<span class="token keyword">union</span> <span class="token punctuation">{</span>
		<span class="token comment">/* 传输协议类地址信息 (e.g. ISOTP) */</span>
		<span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token class-name">canid_t</span> rx_id<span class="token punctuation">,</span> tx_id<span class="token punctuation">;</span> <span class="token punctuation">}</span> tp<span class="token punctuation">;</span>

		<span class="token comment">/* 预留给将来使用的CAN协议地址信息*/</span>
	<span class="token punctuation">}</span> can_addr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>addrlen</strong>：对应的是地址的长度。</p><p>通常服务器在启动的时候都会绑定一个众所周知的地址（如ip地址+端口号），用于提供服务，客户就可以通过它来接连服务器；而客户端就不用指定，有系统自动分配一个端口号和自身的ip地址组合。这就是为什么通常服务器端在listen之前会调用bind()，而客户端就不会调用，而是在connect()时由系统随机生成一个。</p><p><strong>（3）ioctl()函数</strong></p><p>在linux系统下，通过“man ioctl”命令，查询ioctl()函数描述如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0012.png" alt=""></p><p>Ioctl()函数调用层次如下图所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0013.png" alt=""></p><p>Ioctl()函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> request<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>用ioctl获得本地网络接口地址时要用到两个结构体ifconf和ifreq。</p><p><strong>struct ifreq定义</strong> ifreq用来保存某个接口的信息。</p><p>在文件“Linux-4.9.88\\include\\uapi\\linux\\if.h”中有定义struct ifreq，这个只需要了解是在ioctl()函数调用时用来获取CAN设备索引（ifr_ifindex）使用，其他的参数可以不用关注。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * Interface request structure used for socket
 * ioctl&#39;s.  All interface ioctl&#39;s must have parameter
 * definitions which begin with ifr_name.  The
 * remainder may be interface specific.
 */</span>

<span class="token comment">/* for compatibility with glibc net/if.h */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__UAPI_DEF_IF_IFREQ</span></span>
<span class="token keyword">struct</span> <span class="token class-name">ifreq</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IFHWADDRLEN</span>	<span class="token expression"><span class="token number">6</span></span></span>
	<span class="token keyword">union</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">char</span>	ifrn_name<span class="token punctuation">[</span>IFNAMSIZ<span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">/* if name, e.g. &quot;en0&quot; */</span>
	<span class="token punctuation">}</span> ifr_ifrn<span class="token punctuation">;</span>
	
	<span class="token keyword">union</span> <span class="token punctuation">{</span>
		<span class="token keyword">struct</span>	<span class="token class-name">sockaddr</span> ifru_addr<span class="token punctuation">;</span>
		<span class="token keyword">struct</span>	<span class="token class-name">sockaddr</span> ifru_dstaddr<span class="token punctuation">;</span>
		<span class="token keyword">struct</span>	<span class="token class-name">sockaddr</span> ifru_broadaddr<span class="token punctuation">;</span>
		<span class="token keyword">struct</span>	<span class="token class-name">sockaddr</span> ifru_netmask<span class="token punctuation">;</span>
		<span class="token keyword">struct</span>  <span class="token class-name">sockaddr</span> ifru_hwaddr<span class="token punctuation">;</span>
		<span class="token keyword">short</span>	ifru_flags<span class="token punctuation">;</span>
		<span class="token keyword">int</span>	ifru_ivalue<span class="token punctuation">;</span>
		<span class="token keyword">int</span>	ifru_mtu<span class="token punctuation">;</span>
		<span class="token keyword">struct</span>  <span class="token class-name">ifmap</span> ifru_map<span class="token punctuation">;</span>
		<span class="token keyword">char</span>	ifru_slave<span class="token punctuation">[</span>IFNAMSIZ<span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">/* Just fits the size */</span>
		<span class="token keyword">char</span>	ifru_newname<span class="token punctuation">[</span>IFNAMSIZ<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">void</span> __user <span class="token operator">*</span>	ifru_data<span class="token punctuation">;</span>
		<span class="token keyword">struct</span>	<span class="token class-name">if_settings</span> ifru_settings<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> ifr_ifru<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __UAPI_DEF_IF_IFREQ */</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ifr_name</span>	<span class="token expression">ifr_ifrn<span class="token punctuation">.</span>ifrn_name	</span><span class="token comment">/* interface name 	*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ifr_hwaddr</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_hwaddr	</span><span class="token comment">/* MAC address 		*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">ifr_addr</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_addr	</span><span class="token comment">/* address		*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">ifr_dstaddr</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_dstaddr	</span><span class="token comment">/* other end of p-p lnk	*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">ifr_broadaddr</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_broadaddr	</span><span class="token comment">/* broadcast address	*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">ifr_netmask</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_netmask	</span><span class="token comment">/* interface net mask	*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">ifr_flags</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_flags	</span><span class="token comment">/* flags		*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">ifr_metric</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_ivalue	</span><span class="token comment">/* metric		*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">ifr_mtu</span>		<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_mtu	</span><span class="token comment">/* mtu			*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ifr_map</span>		<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_map	</span><span class="token comment">/* device map		*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ifr_slave</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_slave	</span><span class="token comment">/* slave device		*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">ifr_data</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_data	</span><span class="token comment">/* for use by interface	*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ifr_ifindex</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_ivalue	</span><span class="token comment">/* interface index	*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ifr_bandwidth</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_ivalue    </span><span class="token comment">/* link bandwidth	*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ifr_qlen</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_ivalue	</span><span class="token comment">/* Queue length 	*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ifr_newname</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_newname	</span><span class="token comment">/* New name		*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ifr_settings</span>	<span class="token expression">ifr_ifru<span class="token punctuation">.</span>ifru_settings	</span><span class="token comment">/* Device/proto settings*/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>struct ifconf定义</strong> ifconf通常是用来保存所有接口信息的，本章节未使用到，在此不作详细介绍。</p><p><strong>（4）setsockopt()函数</strong></p><p>​ 在linux系统下，通过“man setsockopt”命令，查询setsockopt()函数描述如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0014.png" alt=""></p><p>setsockopt()和getsockopt函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span>    </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">getsockopt</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">int</span> optname<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>optval<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> <span class="token operator">*</span>optlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">setsockopt</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">int</span> optname<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>optval<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> optlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,262),r={href:"https://baike.baidu.com/item/%E5%A5%97%E6%8E%A5%E5%8F%A3/10058888",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"其函数参数如下：可以看出其参数",-1),k=n("thead",null,[n("tr",null,[n("th",null,"sockfd：标识一个套接口的描述字。")])],-1),m=n("tr",null,[n("td",null,"level：选项定义的层次；支持SOL_SOCKET、IPPROTO_TCP、IPPROTO_IP，IPPROTO_IPV6，SOL_CAN_RAW等。")],-1),v=n("tr",null,[n("td",null,"optname：需设置的选项。")],-1),b={href:"https://baike.baidu.com/item/%E6%8C%87%E9%92%88",target:"_blank",rel:"noopener noreferrer"},_={href:"https://baike.baidu.com/item/%E7%BC%93%E5%86%B2%E5%8C%BA",target:"_blank",rel:"noopener noreferrer"},C=n("tr",null,[n("td",null,"optlen：optval缓冲区长度。")],-1),g=p(`<p>函数调用示例如下：</p><table><thead><tr><th><strong>示例1：设置CAN过滤器为不接收所有报文。</strong></th></tr></thead><tbody><tr><td>//禁用过滤规则，本进程不接收报文，只负责发送 <br><br> //设置过滤规则 setsockopt(s, SOL_CAN_RAW, CAN_RAW_FILTER, NULL, 0);</td></tr></tbody></table><table><thead><tr><th><strong>示例2：设置CAN过滤器为接收某个指定报文</strong></th></tr></thead><tbody><tr><td>//定义接收规则，只接收表示符等于 0x201 的报文 <br><br> //在linux头文件有定义，也可以自己定义 <br>#define CAN_SFF_MASK 0x000007ffU <br><br> //定义过滤器（1个） <br>struct can_filter rfilter[1]; <br> rfilter[0].can_id = 0x201; <br>rfilter[0].can_mask = CAN_SFF_MASK; <br>//设置过滤规则 <br>setsockopt(s, SOL_CAN_RAW, CAN_RAW_FILTER, &amp;rfilter, sizeof(rfilter));</td></tr></tbody></table><table><thead><tr><th><strong>示例2：设置CAN过滤器为接收某个指定报文</strong></th></tr></thead><tbody><tr><td>//定义接收规则，只接收表示符等于 0x201 的报文 <br><br> //在linux头文件有定义，也可以自己定义 <br>#define CAN_SFF_MASK 0x000007ffU <br><br>//定义过滤器（3个） <br>struct can_filter rfilter[3]; <br>rfilter[0].can_id = 0x201; <br>rfilter[0].can_mask = CAN_SFF_MASK; <br><br>rfilter[1].can_id = 0x401; <br>rfilter[1].can_mask = CAN_SFF_MASK; <br><br>rfilter[2].can_id = 0x601; <br>rfilter[2].can_mask = CAN_SFF_MASK; <br><br>//设置过滤规则 <br>setsockopt(s, SOL_CAN_RAW, CAN_RAW_FILTER, &amp;rfilter, sizeof(rfilter));</td></tr></tbody></table><p><strong>（5）write()函数</strong></p><p>在linux系统下，通过“man 2 write”命令，查询write()函数描述如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0015.png" alt=""></p><p>Write函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token class-name">ssize_t</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（6）read()函数</strong></p><p>在linux系统下，通过“man 2 read”命令，查询read()函数描述如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0016.png" alt=""></p><p>Read函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（7）close()函数</strong></p><p>在linux系统下，通过“man 2 close”命令，查询close()函数描述如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0017.png" alt=""></p><p>close()函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-4-3-socket-can简单发送实例" tabindex="-1"><a class="header-anchor" href="#_14-4-3-socket-can简单发送实例" aria-hidden="true">#</a> <strong>14.4.3 socket_can简单发送实例</strong></h3><p>简单发送实例代码目录：“02_socketcan_send”</p><p>案例描述：</p><ol><li>实现周期1秒发送报文ID：0x101的报文；</li></ol><p><strong>了解内容：IMX6 CAN接口电路</strong></p><p>从下面CAN外围电路看，和STM32是完全相同的，只是处理内部的CAN控制器因为不同芯片制造厂家的不同，会有一些较小的差异。这里电路只是对比了解一下，做linux应用可以不需要关注底层驱动处理。</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0018.png" alt=""></p><p>那我们现在按照14.3章节构建STM32下CAN应用编程的框架，一步一步编写linux下socketCAN的应用编程。</p><p><strong>准备工作：</strong></p><p>我们按照14.3章节准备好can应用的代码文件：</p><table><thead><tr><th>文件名</th><th>文件内容描述</th></tr></thead><tbody><tr><td>App_can.c</td><td>CAN应用功能实现</td></tr><tr><td>App_can.h</td><td>CAN应用功能头文件</td></tr><tr><td>Can_controller.c</td><td>CAN驱动操作抽象层具体实现</td></tr><tr><td>Can_controller.h</td><td>CAN驱动操作抽象层头文件</td></tr><tr><td>Can_msg.h</td><td>CAN报文基本结构体，从STM32 CAN驱动拷贝过来的，主要在使用CAN报文时使用我们最熟悉的结构体。 此文件相对STM32为新增文件，因为我们的框架是基于单片机应用，然后类比迁移学习到linux上。</td></tr><tr><td>Makefile</td><td>Makefile编译脚本</td></tr></tbody></table><h4 id="_14-4-3-1-编写抽象框架的实现函数" tabindex="-1"><a class="header-anchor" href="#_14-4-3-1-编写抽象框架的实现函数" aria-hidden="true">#</a> <strong>14.4.3.1</strong> <strong>编写抽象框架的实现函数</strong></h4><p>首先我们使用14.3章节已经构建好的抽象结构体，如下：</p><p>见第14章节代码“02_socketcan_send_addline”中“can_controller.h”。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">34</span> <span class="token comment">/* CAN通信抽象结构体定义*/</span>
<span class="token number">35</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_CAN_COMM_STRUCT</span>
<span class="token number">36</span> <span class="token punctuation">{</span>
<span class="token number">37</span>     <span class="token comment">/* CAN硬件名称 */</span>
<span class="token number">38</span>     <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
<span class="token number">39</span>     <span class="token comment">/* CAN端口号，裸机里为端口号;linux应用里作为socket套接口 */</span>
<span class="token number">40</span>     <span class="token keyword">int</span>  can_port<span class="token punctuation">;</span>                                
<span class="token number">41</span>     <span class="token comment">/* CAN控制器配置函数，返回端口号赋值给can_port */</span>
<span class="token number">42</span>     <span class="token keyword">int</span>  <span class="token punctuation">(</span><span class="token operator">*</span>can_set_controller<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                  
<span class="token number">43</span>     <span class="token comment">/* CAN接口中断创建，在linux中对应创建接收线程 */</span>
<span class="token number">44</span>     <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>can_set_interrput<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token keyword">int</span> can_port <span class="token punctuation">,</span> pCanInterrupt callback <span class="token punctuation">)</span><span class="token punctuation">;</span>             
<span class="token number">45</span>     <span class="token comment">/* CAN读取报文接口 */</span>
<span class="token number">46</span>     <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>can_read<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token keyword">int</span> can_port <span class="token punctuation">,</span> CanRxMsg<span class="token operator">*</span> recv_msg<span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token number">47</span>     <span class="token comment">/* CAN发送报文接口*/</span>
<span class="token number">48</span>     <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>can_write<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token keyword">int</span> can_port <span class="token punctuation">,</span> CanTxMsg send_msg<span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token number">49</span> <span class="token punctuation">}</span>CAN_COMM_STRUCT<span class="token punctuation">,</span> <span class="token operator">*</span>pCAN_COMM_STRUCT<span class="token punctuation">;</span>
<span class="token number">50</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们就按照这个结构体的顺序依次编写can_controller.c中的CAN驱动操作具体实现函数。</p><p><strong>（1）定义CAN设备</strong></p><p>根据14.4.2.1章节描述，linux应用层操作CAN设备，需要知道设备名。.</p><p>在100ask_IMX6ULL开发板上打开串口，使用“ifconfig -a”命令查看，知道当前CAN设备名称为”can0”。</p><p>直接在linux命令行直接使用ip命令可以打开，设置，和关闭CAN设备，因此我们定义了三个宏ip_cmd_open, ip_cmd_close,ip_cmd_set_can_params, 这三个宏可以通过系统调用system()进行执行。</p><p>见第14章节代码“02_socketcan_send_addline”中“can_controller.c”文件中宏定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">29</span> <span class="token comment">/**************宏定义**************************************************/</span>
<span class="token number">30</span> 
<span class="token number">31</span> <span class="token comment">/* 将CAN0波特率设置为500000 bps */</span>
<span class="token number">32</span> #define ip_cmd_set_can_params  <span class="token string">&quot;ip link set can0 type can bitrate 500000 triple-sampling on&quot;</span>
<span class="token number">33</span> 
<span class="token number">34</span> <span class="token comment">/* 打开CAN0 */</span>
<span class="token number">35</span> #define ip_cmd_open            <span class="token string">&quot;ifconfig can0 up&quot;</span>     
<span class="token number">36</span> 
<span class="token number">37</span> <span class="token comment">/* 关闭CAN0 */</span>    
<span class="token number">38</span> #define ip_cmd_close           <span class="token string">&quot;ifconfig can0 down&quot;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）配置CAN控制器</strong></p><p>配置CAN控制器有3个部分：打开can0设备，CAN波特率配置，CAN过滤器配置。</p><p>见第14章节代码“01_stm32f407_can_addline”中“can_controller.c”文件int CAN_Set_Controller( void )函数。</p><p><strong>A.配置波特率，打开can0设备</strong></p><p>使用（1）中的三个命令ip_cmd_open, ip_cmd_close,ip_cmd_set_can_params,通过system系统调用：具体代码如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">77</span>     <span class="token comment">/* 通过system调用ip命令设置CAN波特率 */</span>
<span class="token number">78</span>     <span class="token function">system</span><span class="token punctuation">(</span>ip_cmd_close<span class="token punctuation">)</span><span class="token punctuation">;</span>               
<span class="token number">79</span>     <span class="token function">system</span><span class="token punctuation">(</span>ip_cmd_set_can_params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">80</span>     <span class="token function">system</span><span class="token punctuation">(</span>ip_cmd_open<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>B.创建套接口</strong></p><p>因为linux应用操作设备均使用读read写write操作，linux一切皆文件，而socketcan又是一个特殊的文件，因此我们需要调用socket()函数创建一个socketcan接口，获取sock_fd描述符。</p><p>具体代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">82</span>   <span class="token comment">/*************************************************************/</span>
<span class="token number">83</span>   <span class="token comment">/* 创建套接口 sock_fd */</span>
<span class="token number">84</span>   sock_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_CAN<span class="token punctuation">,</span> SOCK_RAW<span class="token punctuation">,</span> CAN_RAW<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">85</span> 	<span class="token keyword">if</span><span class="token punctuation">(</span>sock_fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">86</span> 	<span class="token punctuation">{</span>
<span class="token number">87</span> 		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket create error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">88</span> 		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">89</span> 	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>C.绑定can0设备与套接口</strong></p><p>具体代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">92</span>   <span class="token comment">//将套接字与 can0 绑定</span>
<span class="token number">93</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span>ifr<span class="token punctuation">.</span>ifr_name<span class="token punctuation">,</span> <span class="token string">&quot;can0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">94</span> 	<span class="token function">ioctl</span><span class="token punctuation">(</span>sock_fd<span class="token punctuation">,</span> SIOCGIFINDEX<span class="token punctuation">,</span><span class="token operator">&amp;</span>ifr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置设备为can0</span>
<span class="token number">95</span> 
<span class="token number">96</span> 	ifr<span class="token punctuation">.</span>ifr_ifindex <span class="token operator">=</span> <span class="token function">if_nametoindex</span><span class="token punctuation">(</span>ifr<span class="token punctuation">.</span>ifr_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">97</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ifr_name:%s \\n&quot;</span><span class="token punctuation">,</span>ifr<span class="token punctuation">.</span>ifr_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">98</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;can_ifindex:%d \\n&quot;</span><span class="token punctuation">,</span>ifr<span class="token punctuation">.</span>ifr_ifindex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">99</span> 
<span class="token number">100</span> addr<span class="token punctuation">.</span>can_family <span class="token operator">=</span> AF_CAN<span class="token punctuation">;</span>
<span class="token number">101</span> addr<span class="token punctuation">.</span>can_ifindex <span class="token operator">=</span> ifr<span class="token punctuation">.</span>ifr_ifindex<span class="token punctuation">;</span>
<span class="token number">102</span> 		
<span class="token number">103</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">bind</span><span class="token punctuation">(</span>sock_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
<span class="token number">104</span> <span class="token punctuation">{</span>
<span class="token number">105</span> 	<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">106</span> 	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">107</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>C.配置过滤器</strong></p><p>具体代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">109</span> 	<span class="token comment">/*************************************************************/</span>
<span class="token number">110</span> 	<span class="token comment">//禁用过滤规则，本进程不接收报文，只负责发送</span>
<span class="token number">111</span>  <span class="token function">setsockopt</span><span class="token punctuation">(</span>sock_fd<span class="token punctuation">,</span> SOL_CAN_RAW<span class="token punctuation">,</span> CAN_RAW_FILTER<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>D.配置非阻塞操作</strong></p><p>Linux系统调用read和write函数有阻塞和非阻塞，我们在周期调用时，此采用非阻塞方式对CAN报文进行读写操作。</p><p>具体代码实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">114</span>     <span class="token comment">//设置read()和write()函数设置为非堵塞方式</span>
<span class="token number">115</span>     <span class="token keyword">int</span> flags<span class="token punctuation">;</span>
<span class="token number">116</span>     flags <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>sock_fd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">117</span>     flags <span class="token operator">|=</span> O_NONBLOCK<span class="token punctuation">;</span>
<span class="token number">118</span>     <span class="token function">fcntl</span><span class="token punctuation">(</span>sock_fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>E.返回sock_fd套接口</strong></p><p>具体代码实现如下：</p><p>int CAN_Set_Controller( void )函数直接结束后，返回值赋值给CAN_COMM_STRUCT的can_port成员。</p><p>后续应用层所访问的sock_fd描述符即为can_port.</p><p><strong>（3）创建CAN接收线程</strong></p><p>在STM32中，接收使用的接收FIFO中断进行处理，在linux应用中，我们则采用线程轮询去读取报文。</p><p>因此我们需要创建一个CAN接收线程，具体代码实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">127</span> <span class="token comment">/**********************************************************************
128 * 函数名称： void CAN_Set_Interrupt(int can_port,  pCanInterrupt callback)
129 * 功能描述： 创建CAN接收线程，并传入应用的的回调函数，回调函数主要处理应用层的功能
130 * 输入参数： can_port,端口号
131 *          callback： 中断具体处理应用功能的回调函数
132 * 输出参数： 无
133 * 返 回 值： 无
134 * 修改日期             版本号        修改人           修改内容
135 * -----------------------------------------------
136 * 2020/05/13         V1.0             bert            创建
137 ***********************************************************************/</span>
<span class="token number">138</span> <span class="token keyword">void</span> <span class="token function">CAN_Set_Interrupt</span><span class="token punctuation">(</span><span class="token keyword">int</span> can_port<span class="token punctuation">,</span>  pCanInterrupt callback<span class="token punctuation">)</span>
<span class="token number">139</span> <span class="token punctuation">{</span>
<span class="token number">140</span>     <span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token number">141</span>     
<span class="token number">142</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">!=</span> callback <span class="token punctuation">)</span> 
<span class="token number">143</span>     <span class="token punctuation">{</span>
<span class="token number">144</span>         g_pCanInterrupt <span class="token operator">=</span> callback<span class="token punctuation">;</span>
<span class="token number">145</span>     <span class="token punctuation">}</span>
<span class="token number">146</span>     
<span class="token number">147</span>     err <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ntid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>CAN1_RX0_IRQHandler<span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">148</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> err <span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">)</span>
<span class="token number">149</span>     <span class="token punctuation">{</span>
<span class="token number">150</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create thread fail! \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">151</span>         <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token number">152</span>     <span class="token punctuation">}</span>
<span class="token number">153</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create thread success!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">154</span>     
<span class="token number">155</span> 
<span class="token number">156</span>     <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token number">157</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建后的线程函数如下所示：</p><p>CAN1_RX0_IRQHandler是一个CAN接收线程函数，与CAN接收中断功能相似，只这里采用轮询方式读取CAN报文。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">253</span> <span class="token comment">/**********************************************************************
254 * 函数名称： void CAN1_RX0_IRQHandler(void)
255 * 功能描述： CAN接收线程函数
256 * 输入参数： 无  
257 * 输出参数： 无
258 * 返 回 值： 无
259 * 修改日期             版本号        修改人           修改内容
260 * -----------------------------------------------
261 * 2020/05/13         V1.0             bert            创建
262 ***********************************************************************/</span>
<span class="token number">263</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">CAN1_RX0_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token number">264</span> <span class="token punctuation">{</span>
<span class="token number">265</span>     <span class="token comment">/* 接收报文定义 */</span>
<span class="token number">266</span>     <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>
<span class="token number">267</span>     <span class="token punctuation">{</span>
<span class="token number">268</span>     <span class="token comment">/* 如果回调函数存在，则执行回调函数 */</span>
<span class="token number">269</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> g_pCanInterrupt <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token number">270</span>         <span class="token punctuation">{</span>
<span class="token number">271</span>             <span class="token function">g_pCanInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">272</span>         <span class="token punctuation">}</span>
<span class="token number">273</span>         <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">274</span>     <span class="token punctuation">}</span>
<span class="token number">275</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）CAN报文读取函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">161</span> <span class="token comment">/**********************************************************************
162 * 函数名称： void CAN_Read(int can_port, CanRxMsg* recv_msg)
163 * 功能描述： CAN读取接收寄存器，取出接收到的报文
164 * 输入参数： can_port,端口号     
165 * 输出参数： recv_msg：接收报文
166 * 返 回 值： 无
167 * 修改日期             版本号        修改人           修改内容
168 * -----------------------------------------------
169 * 2020/05/13         V1.0             bert            创建
170 ***********************************************************************/</span>
<span class="token number">171</span> <span class="token keyword">void</span> <span class="token function">CAN_Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> can_port<span class="token punctuation">,</span> CanRxMsg<span class="token operator">*</span> recv_msg<span class="token punctuation">)</span>
<span class="token number">172</span> <span class="token punctuation">{</span> 
<span class="token number">173</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>
<span class="token number">174</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> rxcounter <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">175</span>     
<span class="token number">176</span>     <span class="token keyword">int</span> nbytes<span class="token punctuation">;</span>
<span class="token number">177</span>     <span class="token keyword">struct</span> <span class="token class-name">can_frame</span> rxframe<span class="token punctuation">;</span>
<span class="token number">178</span>     
<span class="token number">179</span>     
<span class="token number">180</span>     nbytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>can_port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rxframe<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">can_frame</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">181</span> 	<span class="token keyword">if</span><span class="token punctuation">(</span>nbytes<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">182</span> 	<span class="token punctuation">{</span>
<span class="token number">183</span> 	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;nbytes = %d \\n&quot;</span><span class="token punctuation">,</span>nbytes <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">184</span> 	    
<span class="token number">185</span> 	    recv_msg<span class="token operator">-&gt;</span>StdId <span class="token operator">=</span> rxframe<span class="token punctuation">.</span>can_id<span class="token punctuation">;</span>
<span class="token number">186</span> 	    recv_msg<span class="token operator">-&gt;</span>DLC <span class="token operator">=</span> rxframe<span class="token punctuation">.</span>can_dlc<span class="token punctuation">;</span>
<span class="token number">187</span> 	    <span class="token function">memcpy</span><span class="token punctuation">(</span> recv_msg<span class="token operator">-&gt;</span>Data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rxframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rxframe<span class="token punctuation">.</span>can_dlc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">188</span> 	    
<span class="token number">189</span> 		rxcounter<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token number">190</span> 		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rxcounter=%d, ID=%03X, DLC=%d, data=%02X %02X %02X %02X %02X %02X %02X %02X \\n&quot;</span><span class="token punctuation">,</span>  \\
<span class="token number">191</span> 			rxcounter<span class="token punctuation">,</span>
<span class="token number">192</span> 			rxframe<span class="token punctuation">.</span>can_id<span class="token punctuation">,</span> rxframe<span class="token punctuation">.</span>can_dlc<span class="token punctuation">,</span>  \\
<span class="token number">193</span> 			rxframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">194</span> 			rxframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">195</span> 			rxframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">196</span> 			rxframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">197</span> 			rxframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">198</span> 			rxframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">199</span> 			rxframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">200</span> 			rxframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">201</span> 	<span class="token punctuation">}</span>
<span class="token number">202</span> 
<span class="token number">203</span>     <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token number">204</span> <span class="token punctuation">}</span>
<span class="token number">205</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（5）CAN报文发送函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">206</span> <span class="token comment">/**********************************************************************
207 * 函数名称： void CAN_Write(int can_port, CanTxMsg send_msg)
208 * 功能描述： CAN报文发送接口，调用发送寄存器发送报文
209 * 输入参数： can_port,端口号     
210 * 输出参数： send_msg：发送报文
211 * 返 回 值： 无
212 * 修改日期             版本号        修改人           修改内容
213 * -----------------------------------------------
214 * 2020/05/13         V1.0             bert            创建
215 ***********************************************************************/</span>
<span class="token number">216</span> <span class="token keyword">void</span> <span class="token function">CAN_Write</span><span class="token punctuation">(</span><span class="token keyword">int</span> can_port<span class="token punctuation">,</span> CanTxMsg send_msg<span class="token punctuation">)</span>
<span class="token number">217</span> <span class="token punctuation">{</span>
<span class="token number">218</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>
<span class="token number">219</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> txcounter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">220</span>     <span class="token keyword">int</span> nbytes<span class="token punctuation">;</span>
<span class="token number">221</span>     
<span class="token number">222</span>     <span class="token keyword">struct</span> <span class="token class-name">can_frame</span> txframe<span class="token punctuation">;</span>
<span class="token number">223</span>     
<span class="token number">224</span>     txframe<span class="token punctuation">.</span>can_id <span class="token operator">=</span> send_msg<span class="token punctuation">.</span>StdId<span class="token punctuation">;</span>
<span class="token number">225</span>     txframe<span class="token punctuation">.</span>can_dlc <span class="token operator">=</span> send_msg<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span>
<span class="token number">226</span>     <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>txframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>send_msg<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> txframe<span class="token punctuation">.</span>can_dlc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">227</span> 
<span class="token number">228</span>     nbytes <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>can_port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>txframe<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">can_frame</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发送 frame[0]</span>
<span class="token number">229</span> 	
<span class="token number">230</span> 	<span class="token keyword">if</span><span class="token punctuation">(</span>nbytes <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>txframe<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">231</span> 	<span class="token punctuation">{</span>
<span class="token number">232</span> 	    txcounter<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token number">233</span> 	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;txcounter=%d, ID=%03X, DLC=%d, data=%02X %02X %02X %02X %02X %02X %02X %02X \\n&quot;</span><span class="token punctuation">,</span>  \\
<span class="token number">234</span> 			txcounter<span class="token punctuation">,</span>
<span class="token number">235</span> 			txframe<span class="token punctuation">.</span>can_id<span class="token punctuation">,</span> txframe<span class="token punctuation">.</span>can_dlc<span class="token punctuation">,</span>  \\
<span class="token number">236</span> 			txframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">237</span> 			txframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">238</span> 			txframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">239</span> 			txframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">240</span> 			txframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">241</span> 			txframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">242</span> 			txframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\\
<span class="token number">243</span> 			txframe<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">244</span>     <span class="token punctuation">}</span>
<span class="token number">245</span>     <span class="token keyword">else</span>
<span class="token number">246</span> 	<span class="token punctuation">{</span>
<span class="token number">247</span> 		<span class="token comment">//printf(&quot;Send Error frame[0], nbytes=%d\\n!&quot;,nbytes);</span>
<span class="token number">248</span> 	<span class="token punctuation">}</span>
<span class="token number">249</span> 
<span class="token number">250</span>     <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token number">251</span> <span class="token punctuation">}</span>
<span class="token number">252</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（6）CAN抽象结构体框架初始化</strong></p><p>与14.3章节STM32定义实例类似。</p><p>定义一个can1通信结构实例CAN_COMM_STRUCT can1_controller；</p><p>使用（1）~（5）步骤实现的函数，初始化can1_controller，构成与应用层关联的一个连接点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">298</span> <span class="token comment">/**********************************************************************
299 * 名称：     can1_controller
300 * 功能描述： CAN1结构体初始化
301 * 修改日期             版本号        修改人           修改内容
302 * -----------------------------------------------
303 * 2020/05/13         V1.0             bert            创建
304 ***********************************************************************/</span>
<span class="token number">305</span> CAN_COMM_STRUCT can1_controller <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token number">306</span>     <span class="token punctuation">.</span>name                   <span class="token operator">=</span> <span class="token string">&quot;can0&quot;</span><span class="token punctuation">,</span>
<span class="token number">307</span>     <span class="token punctuation">.</span>can_port               <span class="token operator">=</span> CAN_PORT_CAN1<span class="token punctuation">,</span>
<span class="token number">308</span>     <span class="token punctuation">.</span>can_set_controller     <span class="token operator">=</span> CAN_Set_Controller<span class="token punctuation">,</span>
<span class="token number">309</span>     <span class="token punctuation">.</span>can_set_interrput      <span class="token operator">=</span> CAN_Set_Interrupt<span class="token punctuation">,</span>
<span class="token number">310</span>     <span class="token punctuation">.</span>can_read               <span class="token operator">=</span> CAN_Read<span class="token punctuation">,</span>
<span class="token number">311</span>     <span class="token punctuation">.</span>can_write              <span class="token operator">=</span> CAN_Write<span class="token punctuation">,</span>
<span class="token number">312</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_14-4-3-2-编写应用层代码" tabindex="-1"><a class="header-anchor" href="#_14-4-3-2-编写应用层代码" aria-hidden="true">#</a> <strong>14.4.3.2 编写应用层代码</strong></h4><p>根据14.4.3.1 已经将具体的linux下socketCAN硬件操作已经实现，并且已经抽象实例化了CAN编程框架。</p><p>但是我们现在还没关联到应用层，应用层并不知道调用哪个接口。</p><p><strong>（1）CAN应用层注册实例</strong></p><p>在应用层编写一个通用的实例化注册函数。</p><p>见第14章节代码“02_socketcan_send_addline”中“app_can.c”文件int register_can_controller(const pCAN_COMM_STRUCT p_can_controller)函数。</p><p>代码实现如下：（和STM32应用编程完全一样，代码几乎不用更改）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">73</span> <span class="token comment">/**********************************************************************
74 * 函数名称： int register_can_controller(const pCAN_COMM_STRUCT p_can_controller)
75 * 功能描述： 应用层进行CAN1结构体注册
76 * 输入参数： p_can_controller，CAN控制器抽象结构体
77 * 输出参数： 无
78 * 返 回 值： 无
79 * 修改日期             版本号        修改人           修改内容
80 * -----------------------------------------------
81 * 2020/05/13         V1.0             bert            创建
82 ***********************************************************************/</span>
<span class="token number">83</span> <span class="token keyword">int</span> <span class="token function">register_can_controller</span><span class="token punctuation">(</span><span class="token keyword">const</span> pCAN_COMM_STRUCT p_can_controller<span class="token punctuation">)</span>
<span class="token number">84</span> <span class="token punctuation">{</span>
<span class="token number">85</span>     <span class="token comment">/* 判断传入的p_can_controller为非空，目的是确认这个结构体是实体*/</span>
<span class="token number">86</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> p_can_controller <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>
<span class="token number">87</span>     <span class="token punctuation">{</span>
<span class="token number">88</span>         <span class="token comment">/* 将传入的参数p_can_controller赋值给应用层结构体gCAN_COMM_STRUCT */</span>
<span class="token number">89</span>         
<span class="token number">90</span>         <span class="token comment">/*端口号，类比socketcan套接口*/</span>
<span class="token number">91</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port              <span class="token operator">=</span> p_can_controller<span class="token operator">-&gt;</span>can_port<span class="token punctuation">;</span> 
<span class="token number">92</span>         <span class="token comment">/*CAN控制器配置函数*/</span>
<span class="token number">93</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_set_controller    <span class="token operator">=</span> p_can_controller<span class="token operator">-&gt;</span>can_set_controller<span class="token punctuation">;</span> 
<span class="token number">94</span>         <span class="token comment">/*CAN中断配置*/</span>
<span class="token number">95</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_set_interrput     <span class="token operator">=</span> p_can_controller<span class="token operator">-&gt;</span>can_set_interrput<span class="token punctuation">;</span>
<span class="token number">96</span>         <span class="token comment">/*CAN报文读函数*/</span>
<span class="token number">97</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_read              <span class="token operator">=</span> p_can_controller<span class="token operator">-&gt;</span>can_read<span class="token punctuation">;</span>
<span class="token number">98</span>         <span class="token comment">/*CAN报文发送函数*/</span>
<span class="token number">99</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_write             <span class="token operator">=</span> p_can_controller<span class="token operator">-&gt;</span>can_write<span class="token punctuation">;</span>
<span class="token number">100</span>         <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">101</span>     <span class="token punctuation">}</span>
<span class="token number">102</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">103</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）CAN应用层初始化</strong></p><p>CAN应用层代码初始化如下：（和STM32 CAN应用代码完全一样）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">105</span> <span class="token comment">/**********************************************************************
106 * 函数名称： void app_can_init(void)
107 * 功能描述： CAN应用层初始化
108 * 输入参数： 无
109 * 输出参数： 无
110 * 返 回 值： 无
111 * 修改日期             版本号        修改人           修改内容
112 * -----------------------------------------------
113 * 2020/05/13         V1.0             bert            创建
114 ***********************************************************************/</span>
<span class="token number">115</span> <span class="token keyword">void</span> <span class="token function">app_can_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">116</span> <span class="token punctuation">{</span>
<span class="token number">117</span>     <span class="token comment">/** 
118     * 应用层进行CAN1结构体注册
119     */</span>
<span class="token number">120</span>     <span class="token function">CAN1_contoller_add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">121</span>     
<span class="token number">122</span>     <span class="token comment">/*
123     *调用can_set_controller进行CAN控制器配置，
124     *返回can_port，类比linux socketcan中的套接口，单片机例程中作为自定义CAN通道 
125     */</span>
<span class="token number">126</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port <span class="token operator">=</span> gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_set_controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">127</span>     <span class="token comment">/** 
128     * 调用can_set_interrput配置CAN接收中断，类比socketcan中的接收线程，本例不用接收，因此回调函数传入NULL
129     */</span>
<span class="token number">130</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_set_interrput</span><span class="token punctuation">(</span> gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">131</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）设计一个简单的周期发送报文功能</strong></p><p>我们需要先设计一个在10ms周期函数中调用的void app_can_tx_test(void)功能函数，这个函数在main主线程函数中进行调用。</p><p>CAN周期发送报文的功能函数代码实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">134</span> <span class="token comment">/**********************************************************************
135 * 函数名称： void app_can_tx_test(void)
136 * 功能描述： CAN应用层报文发送函数，用于测试周期发送报文
137 * 输入参数： 无
138 * 输出参数： 无
139 * 返 回 值： 无
140 * 修改日期             版本号        修改人           修改内容
141 * -----------------------------------------------
142 * 2020/05/13         V1.0             bert            创建
143 ***********************************************************************/</span>
<span class="token number">144</span> <span class="token keyword">void</span> <span class="token function">app_can_tx_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">145</span> <span class="token punctuation">{</span>
<span class="token number">146</span>     <span class="token comment">// 以10ms为基准，运行CAN测试程序</span>
<span class="token number">147</span>     
<span class="token number">148</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">149</span>     
<span class="token number">150</span>     <span class="token comment">/* 发送报文定义 */</span>
<span class="token number">151</span>     CanTxMsg TxMessage<span class="token punctuation">;</span>
<span class="token number">152</span>     
<span class="token number">153</span>     <span class="token comment">/* 发送报文中用一个字节来作为计数器 */</span>
<span class="token number">154</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tx_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">155</span>     
<span class="token number">156</span>     <span class="token comment">/* 以10ms为基准，通过timer计数器设置该处理函数后面运行代码的周期为1秒钟*/</span>  
<span class="token number">157</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timer <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">158</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token number">159</span>     <span class="token punctuation">{</span>
<span class="token number">160</span>         timer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">161</span>     <span class="token punctuation">}</span>
<span class="token number">162</span>     <span class="token keyword">else</span>
<span class="token number">163</span>     <span class="token punctuation">{</span>
<span class="token number">164</span>         <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token number">165</span>     <span class="token punctuation">}</span>
<span class="token number">166</span>     
<span class="token number">167</span>     <span class="token comment">/* 发送报文报文数据填充，此报文周期是1秒 */</span>
<span class="token number">168</span>     TxMessage<span class="token punctuation">.</span>StdId <span class="token operator">=</span> TX_CAN_ID<span class="token punctuation">;</span>	      <span class="token comment">/* 标准标识符为0x000~0x7FF */</span>
<span class="token number">169</span>     TxMessage<span class="token punctuation">.</span>ExtId <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>             <span class="token comment">/* 扩展标识符0x0000 */</span>
<span class="token number">170</span>     TxMessage<span class="token punctuation">.</span>IDE   <span class="token operator">=</span> CAN_ID_STD<span class="token punctuation">;</span>         <span class="token comment">/* 使用标准标识符 */</span>
<span class="token number">171</span>     TxMessage<span class="token punctuation">.</span>RTR   <span class="token operator">=</span> CAN_RTR_DATA<span class="token punctuation">;</span>       <span class="token comment">/* 设置为数据帧  */</span>
<span class="token number">172</span>     TxMessage<span class="token punctuation">.</span>DLC   <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>                  <span class="token comment">/* 数据长度, can报文规定最大的数据长度为8字节 */</span>
<span class="token number">173</span>     
<span class="token number">174</span>     <span class="token comment">/* 填充数据，此处可以根据实际应用填充 */</span>
<span class="token number">175</span>     TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tx_counter<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token comment">/* 用来识别报文发送计数器 */</span>
<span class="token number">176</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>TxMessage<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">177</span>     <span class="token punctuation">{</span>
<span class="token number">178</span>         TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            
<span class="token number">179</span>     <span class="token punctuation">}</span>
<span class="token number">180</span>     
<span class="token number">181</span>     <span class="token comment">/*  调用can_write发送CAN报文 */</span>
<span class="token number">182</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">183</span>     
<span class="token number">184</span> <span class="token punctuation">}</span>
<span class="token number">185</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将void app_can_tx_test(void)函数加入到main函数中，进行10ms周期执行，其代码实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">188</span> <span class="token comment">/**********************************************************************
189 * 函数名称： int main(int argc, char **argv)
190 * 功能描述： 主函数
191 * 输入参数： 无
192 * 输出参数： 无
193 * 返 回 值： 无
194 * 修改日期             版本号        修改人           修改内容
195 * -----------------------------------------------
196 * 2020/05/13         V1.0             bert            创建
197 ***********************************************************************/</span>
<span class="token number">198</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token number">199</span> <span class="token punctuation">{</span>
<span class="token number">200</span>     <span class="token comment">/* CAN应用层初始化 */</span>
<span class="token number">201</span>     <span class="token function">app_can_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">202</span>     
<span class="token number">203</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">204</span>     <span class="token punctuation">{</span>
<span class="token number">205</span>         <span class="token comment">/* CAN应用层周期发送报文 */</span>
<span class="token number">206</span>         <span class="token function">app_can_tx_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">207</span>         
<span class="token number">208</span>         <span class="token comment">/* 利用linux的延时函数设计10ms的运行基准 */</span>
<span class="token number">209</span>         <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">210</span>     <span class="token punctuation">}</span>
<span class="token number">211</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_14-4-3-3-案例测试验证" tabindex="-1"><a class="header-anchor" href="#_14-4-3-3-案例测试验证" aria-hidden="true">#</a> <strong>14.4.3.3 案例测试验证</strong></h4><p>当我们上面代码完成编写后，目录文件如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0019.png" alt=""></p><p><strong>（1）编写Makfile</strong></p><p>Makefile文件内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>all<span class="token operator">:</span>
	arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf<span class="token operator">-</span>gcc <span class="token operator">-</span>lpthread <span class="token operator">-</span>o socketcan_send   can_controller<span class="token punctuation">.</span>c  app_can<span class="token punctuation">.</span>c
clean<span class="token operator">:</span>
	rm socketcan_send
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）编译socket_send</strong></p><p>注意：编译是在100ask-vmware_ubuntu18.04虚拟机环境中。</p><p>进入ubuntu虚拟机对应的socket_send目录下</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0020.png" alt=""></p><p>输入make命令：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0021.png" alt=""></p><p>通过make命令编译后，生成socket_send可执行文件。</p><p><strong>（3）运行socket_send</strong></p><p>注意：运行在100ask_imx6开发板上运行。</p><p>此处使用的是nfs文件进行运行。</p><p>先给100ask_imx6ull开发板上电，打开串口：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0022.png" alt=""></p><p>输入root用户登录进入开发板linux系统；</p><p>然后挂载nfs，操作如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Mount <span class="token operator">-</span>t nfs <span class="token operator">-</span>o nolock <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.100</span><span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>book  <span class="token operator">/</span>mnt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0023.png" alt=""></p><p>注意：目前我的开发板IP：192.168.1.101， Ubuntu虚拟机是192.168.1.100.</p><p>然后再运行./socketcan_send</p><p>如果运行时提示权限不允许，可以使用chmod命令设置权限:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Chmod <span class="token number">777</span> socketcan_send
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行后串口查看打印信息如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0024.png" alt=""></p><p>然后再观察Vehcile Spy3上位机测试结果如下：</p><p>报文按照时间1S的周期性发送报文ID为0x101的CAN报文。</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0025.png" alt=""></p><p><strong>（4）测试总结</strong></p><p>到此为止，我们已经通过socketcan建立起来了linux下应用编程的框架，并且成功的调试成功了CAN周期发送报文的功能编程。</p><p>后面将基于此框架，一步一步的了解linux下CAN应用编程；</p><p>对于相关案例章节的目的设置如下：</p><table><thead><tr><th>章节</th><th>目的</th></tr></thead><tbody><tr><td>14.4.3 socket_can简单发送实例</td><td>简单直接的了解发送报文</td></tr><tr><td>14.4.4 socket_can简单接收实例</td><td>简单直接的了解接收报文</td></tr><tr><td>14.4.5 socket_can接收和发送实例</td><td>发送和接收报文的组合操作</td></tr></tbody></table><h3 id="_14-4-4-socket-can-简单接收实例" tabindex="-1"><a class="header-anchor" href="#_14-4-4-socket-can-简单接收实例" aria-hidden="true">#</a> <strong>14.4.4 socket_can 简单接收实例</strong></h3><p>简单接收实例代码目录：“03_socketcan_recv”</p><p>我们在14.4.3章节已经了解了发送报文发送的功能，而且已经建立起了linux下应用编程的框架；本节重点了解简单接收功能。</p><p>案例描述：</p><p>1.实现接收报文0x201的报文。</p><h4 id="_14-4-4-1-编写抽象框架的实现函数" tabindex="-1"><a class="header-anchor" href="#_14-4-4-1-编写抽象框架的实现函数" aria-hidden="true">#</a> <strong>14.4.4.1 编写抽象框架的实现函数</strong></h4><p><strong>（1）定义CAN设备</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（1）定义CAN设备”描述。</p><p><strong>（2）配置CAN控制器</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（2）配置CAN控制器”描述。</p><p>因为在“14.4.3.1”中我们只发送，并且设置了过滤器为禁止所有报文。具体代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">109</span> <span class="token comment">/*************************************************************/</span>
<span class="token number">110</span> <span class="token comment">//禁用过滤规则，本进程不接收报文，只负责发送</span>
<span class="token number">111</span> <span class="token function">setsockopt</span><span class="token punctuation">(</span>sock_fd<span class="token punctuation">,</span> SOL_CAN_RAW<span class="token punctuation">,</span> CAN_RAW_FILTER<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而本案例需要配置接收，过滤器配置会有相应差异，我们目前是配置仅仅接收报文ID为0x201的报文，</p><p>具体实现代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">110</span> 	<span class="token comment">//定义接收规则，只接收表示符等于 0x201 的报文</span>
<span class="token number">111</span> 	<span class="token keyword">struct</span> <span class="token class-name">can_filter</span> rfilter<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">112</span> 	rfilter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_id <span class="token operator">=</span> <span class="token number">0x201</span><span class="token punctuation">;</span>
<span class="token number">113</span> 	rfilter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_mask <span class="token operator">=</span> CAN_SFF_MASK<span class="token punctuation">;</span>
<span class="token number">114</span> 	<span class="token comment">//设置过滤规则</span>
<span class="token number">115</span> 	<span class="token function">setsockopt</span><span class="token punctuation">(</span>sock_fd<span class="token punctuation">,</span> SOL_CAN_RAW<span class="token punctuation">,</span> CAN_RAW_FILTER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rfilter<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rfilter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为扩展，我们也可以设置多个过滤器：</p><p>定义过滤器：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">can_filter</span> rfilter<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/*定义10个过滤器*/</span>
rfilter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_id <span class="token operator">=</span> <span class="token number">0x201</span><span class="token punctuation">;</span>
rfilter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_mask <span class="token operator">=</span> <span class="token number">0x7FF</span><span class="token punctuation">;</span>  <span class="token comment">/*过滤规则：can_id &amp; mask = 0x201 &amp; 0x7FF = 0x201*/</span>
rfilter<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_id <span class="token operator">=</span> <span class="token number">0x302</span><span class="token punctuation">;</span>
rfilter<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_mask <span class="token operator">=</span> <span class="token number">0x7FF</span><span class="token punctuation">;</span>  <span class="token comment">/*过滤规则：can_id &amp; mask = 0x302&amp; 0x7FF = 0x302*/</span>
rfilter<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_id <span class="token operator">=</span> <span class="token number">0x403</span><span class="token punctuation">;</span>
rfilter<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_mask <span class="token operator">=</span> <span class="token number">0x7FF</span><span class="token punctuation">;</span>  <span class="token comment">/*过滤规则：can_id &amp; mask = 0x403&amp; 0x7FF = 0x403*/</span>
rfilter<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_id <span class="token operator">=</span> <span class="token number">0x504</span><span class="token punctuation">;</span>
rfilter<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_mask <span class="token operator">=</span> <span class="token number">0x700</span><span class="token punctuation">;</span>  <span class="token comment">/*过滤规则：can_id &amp; mask = 0x504 &amp; 0x700 = 0x500,即接收报文ID为0x5**的报文*/</span>
rfilter<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_id <span class="token operator">=</span> <span class="token number">0x605</span><span class="token punctuation">;</span>
rfilter<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>can_mask <span class="token operator">=</span> <span class="token number">0x700</span><span class="token punctuation">;</span>  <span class="token comment">/*过滤规则：can_id &amp; mask = 0x504 &amp; 0x700 = 0x600*/</span>
<span class="token function">setsockopt</span><span class="token punctuation">(</span>sock_fd<span class="token punctuation">,</span> SOL_CAN_RAW<span class="token punctuation">,</span> CAN_RAW_FILTER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rfilter<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rfilter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）创建CAN接收线程</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（3）创建CAN接收线程”描述。</p><p><strong>（4）CAN报文读取函数</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（4）CAN报文读取函数”描述。</p><p><strong>（5）CAN报文发送函数</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（5）CAN报文发送函数”描述。</p><p><strong>（6）CAN抽象结构体框架初始化</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（6）CAN抽象结构体框架初始化”描述。</p><h4 id="_14-4-4-2-编写应用层代码" tabindex="-1"><a class="header-anchor" href="#_14-4-4-2-编写应用层代码" aria-hidden="true">#</a> <strong>14.4.4.2</strong> <strong>编写应用层代码</strong></h4><p><strong>（1）CAN应用层注册实例</strong></p><p>参考“14.4.3.2 编写应用层代码”中“（1）CAN应用层注册实例”描述。</p><p><strong>（2）CAN应用层初始化</strong></p><p>在本简单接收实例中，我们需要将接收线程里的回调指针函数CAN_RX_IRQHandler_Callback传入，在这个函数里，应用层可以自行进行读取CAN报文等处理。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">105</span> <span class="token comment">/**********************************************************************
106 * 函数名称： void app_can_init(void)
107 * 功能描述： CAN应用层初始化
108 * 输入参数： 无
109 * 输出参数： 无
110 * 返 回 值： 无
111 * 修改日期             版本号        修改人           修改内容
112 * -----------------------------------------------
113 * 2020/05/13         V1.0             bert            创建
114 ***********************************************************************/</span>
<span class="token number">115</span> <span class="token keyword">void</span> <span class="token function">app_can_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">116</span> <span class="token punctuation">{</span>
<span class="token number">117</span>     <span class="token comment">/** 
118     * 应用层进行CAN1结构体注册
119     */</span>
<span class="token number">120</span>     <span class="token function">CAN1_contoller_add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">121</span>     
<span class="token number">122</span>     <span class="token comment">/*
123     *调用can_set_controller进行CAN控制器配置，
124     *返回can_port，类比linux socketcan中的套接口，单片机例程中作为自定义CAN通道 
125     */</span>
<span class="token number">126</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port <span class="token operator">=</span> gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_set_controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">127</span>     <span class="token comment">/** 
128     * 调用can_set_interrput配置CAN接收中断，类比socketcan中的接收线程
129     */</span>
<span class="token number">130</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_set_interrput</span><span class="token punctuation">(</span> gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> CAN_RX_IRQHandler_Callback <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">131</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）设计一个简单的接收报文功能</strong></p><p>关于void CAN_RX_IRQHandler_Callback(void)的具体实现如下所示：</p><p>CAN_RX_IRQHandler_Callback是在接收线程中循环执行，应用层在CAN_RX_IRQHandler_Callback函数进行gCAN_COMM_STRUCT.can_read读取CAN报文。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">133</span> <span class="token comment">/**********************************************************************
134 * 函数名称： void CAN_RX_IRQHandler_Callback(void)
135 * 功能描述： CAN1接收中断函数；在linux中可以类比用线程，或定时器去读CAN数据
136 * 输入参数： 无
137 * 输出参数： 无
138 * 返 回 值： 无
139 * 修改日期             版本号        修改人           修改内容
140 * -----------------------------------------------
141 * 2020/05/13         V1.0             bert            创建
142 ***********************************************************************/</span>
<span class="token number">143</span> <span class="token keyword">void</span> <span class="token function">CAN_RX_IRQHandler_Callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">144</span> <span class="token punctuation">{</span>
<span class="token number">145</span>     <span class="token comment">/* 接收报文定义 */</span>
<span class="token number">146</span>     CanRxMsg RxMessage<span class="token punctuation">;</span> 
<span class="token number">147</span>     
<span class="token number">148</span>     <span class="token comment">/* 接收报文清零 */</span>
<span class="token number">149</span>     <span class="token function">memset</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>RxMessage<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>CanRxMsg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">150</span>    
<span class="token number">151</span>     <span class="token comment">/* 通过can_read接口读取寄存器已经接收到的报文 */</span>
<span class="token number">152</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_read</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>RxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">153</span> 
<span class="token number">154</span>     <span class="token comment">/* 将读取到的CAN报文存拷贝到全局报文结构体g_CAN1_Rx_Message */</span>
<span class="token number">155</span>     <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_CAN1_Rx_Message<span class="token punctuation">,</span> <span class="token operator">&amp;</span>RxMessage<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> CanRxMsg <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">156</span>     
<span class="token number">157</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本案例无发送报文功能，主线程中无代码处理，只需要空跑运行即可。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">159</span> <span class="token comment">/**********************************************************************
160 * 函数名称： int main(int argc, char **argv)
161 * 功能描述： 主函数
162 * 输入参数： 无
163 * 输出参数： 无
164 * 返 回 值： 无
165 * 修改日期             版本号        修改人           修改内容
166 * -----------------------------------------------
167 * 2020/05/13         V1.0             bert            创建
168 ***********************************************************************/</span>
<span class="token number">169</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token number">170</span> <span class="token punctuation">{</span>
<span class="token number">171</span>     <span class="token comment">/* CAN应用层初始化 */</span>
<span class="token number">172</span>     <span class="token function">app_can_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">173</span>     
<span class="token number">174</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">175</span>     <span class="token punctuation">{</span>        
<span class="token number">176</span>         <span class="token comment">/* 利用linux的延时函数设计10ms的运行基准 */</span>
<span class="token number">177</span>         <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">178</span>     <span class="token punctuation">}</span>
<span class="token number">179</span> <span class="token punctuation">}</span>
<span class="token number">180</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_14-4-4-3-案例测试验证" tabindex="-1"><a class="header-anchor" href="#_14-4-4-3-案例测试验证" aria-hidden="true">#</a> <strong>14.4.4.3</strong> <strong>案例测试验证</strong></h4><p><strong>（1）编写Makfile</strong></p><p>Makefile文件内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>all<span class="token operator">:</span>

   arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf<span class="token operator">-</span>gcc <span class="token operator">-</span>lpthread <span class="token operator">-</span>o socketcan_recv  can_controller<span class="token punctuation">.</span>c app_can<span class="token punctuation">.</span>c

clean<span class="token operator">:</span>

   rm socketcan_recv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）编译socket_recv</strong></p><p>注意：编译是在100ask-vmware_ubuntu18.04虚拟机环境中。</p><p>进入ubuntu虚拟机对应的socket_recv目录下，执行make all进行编译。</p><p>编译过程如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0026.png" alt=""></p><p><strong>（3）运行socket_recv</strong></p><p>注意：运行在100ask_imx6开发板上运行。</p><p>此处使用的是nfs文件进行运行。</p><p>Nfs挂载，请参考“14.4,3.3 案例测试验证”。</p><p>在100ask_imx6开发板环境下，执行“./socket_recv”,运行程序；</p><p>然后通过Vhicle Spy3向100ask_imx6开发板CAN端发送报文ID未0x201的报文，报文trace如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0027.png" alt=""></p><p>100ask_imx6开发板串口打印信息如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0028.png" alt=""></p><p><strong>（4）测试总结</strong></p><p>到此为止，我们已经调试成功了CAN报文接收的功能编程。</p><h3 id="_14-4-5-socket-can-接收和发送实例" tabindex="-1"><a class="header-anchor" href="#_14-4-5-socket-can-接收和发送实例" aria-hidden="true">#</a> <strong>14.4.5 socket_can 接收和发送实例</strong></h3><p>简单接收实例代码目录：“04_socketcan_recv_send”</p><p>本案例整合了“14.4.3 简单发送实例”和“14.4.3 简单接收实例”，构建成一个发送和接收均有的组合案例。</p><p>案例描述：</p><ol><li><p>实现周期1秒发送报文ID：0x101的报文；</p></li><li><p>实现接收报文0x201的报文，并将内容复制到报文0x301的报文，并发送出去；</p></li></ol><h4 id="_14-4-5-1-编写抽象框架的实现函数" tabindex="-1"><a class="header-anchor" href="#_14-4-5-1-编写抽象框架的实现函数" aria-hidden="true">#</a> <strong>14.4.5.1 编写抽象框架的实现函数</strong></h4><p><strong>（1）定义CAN设备</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（1）定义CAN设备”描述。</p><p>参考“14.4.4.1 编写抽象框架的实现函数”中“（1）定义CAN设备”描述。</p><p><strong>（2）配置CAN控制器</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（2）配置CAN控制器”描述。</p><p>参考“14.4.4.1 编写抽象框架的实现函数”中“（2）配置CAN控制器”描述。</p><p><strong>（3）创建CAN接收线程</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（3）创建CAN接收线程”描述。</p><p>参考“14.4.4.1 编写抽象框架的实现函数”中“（3）创建CAN接收线程”描述。</p><p><strong>（4）CAN报文读取函数</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（4）CAN报文读取函数”描述。</p><p>参考“14.4.4.1 编写抽象框架的实现函数”中“（4）CAN报文读取函数”描述。</p><p><strong>（5）CAN报文发送函数</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（5）CAN报文发送函数”描述。</p><p>参考“14.4.4.1 编写抽象框架的实现函数”中“（5）CAN报文发送函数”描述。</p><p><strong>（6）CAN抽象结构体框架初始化</strong></p><p>参考“14.4.3.1 编写抽象框架的实现函数”中“（6）CAN抽象结构体框架初始化”描述。</p><p>参考“14.4.4.1 编写抽象框架的实现函数”中“（6）CAN抽象结构体框架初始化”描述。</p><p><strong>14.4.5.2</strong> <strong>编写应用层代码</strong></p><p><strong>（1）CAN应用层注册实例</strong></p><p>参考“14.4.3.2 编写应用层代码”中“（1）CAN应用层注册实例”描述。</p><p>参考“14.4.4.2 编写应用层代码”中“（1）CAN应用层注册实例”描述。</p><p><strong>（2）CAN应用层初始化</strong></p><p>参考“14.4.4.2 编写应用层代码”中“（2）CAN应用层初始化”描述。</p><p><strong>（3）设计一个简单的周期发送报文功能</strong></p><p>参考“14.4.3.2 编写应用层代码”中“（3）设计一个简单的发送报文功能”描述。</p><p><strong>（4）设计一个简单的周期接收报文功能</strong></p><p>参考“14.4.4.2 编写应用层代码”中“（3）设计一个简单的接收报文功能”描述。</p><p>​ 同时，我们此处需要将接收到的ID:0X201的报文，将内容复制给报文ID：0x301的报文，并发送出去。</p><p>我们在“14.4.4 简单接收报文”的基础上增加一个简单的逻辑，在接收线程的回调函数CAN_RX_IRQHandler_Callback中，调用gCAN_COMM_STRUCT.can_read(gCAN_COMM_STRUCT.can_port, &amp;RxMessage);接收到报文ID：0x201的报文后，设置标志g_CAN1_Rx_Flag = 1; 然后去主线程去判断此标志是否被设置为1，标识已经接收到，则在void app_can_rx_test(void)中去拷贝报文ID:0X201的报文内容，然后赋值给报文ID:0x301的报文。</p><p>接收线程回调函数CAN_RX_IRQHandler_Callback的实现代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">231</span> <span class="token comment">/**********************************************************************
232 * 函数名称： void CAN_RX_IRQHandler_Callback(void)
233 * 功能描述： CAN1接收中断函数；在linux中可以类比用线程，或定时器去读CAN数据
234 * 输入参数： 无
235 * 输出参数： 无
236 * 返 回 值： 无
237 * 修改日期             版本号        修改人           修改内容
238 * -----------------------------------------------
239 * 2020/05/13         V1.0             bert            创建
240 ***********************************************************************/</span>
<span class="token number">241</span> <span class="token keyword">void</span> <span class="token function">CAN_RX_IRQHandler_Callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">242</span> <span class="token punctuation">{</span>
<span class="token number">243</span>     <span class="token comment">/* 接收报文定义 */</span>
<span class="token number">244</span>     CanRxMsg RxMessage<span class="token punctuation">;</span> 
<span class="token number">245</span>     
<span class="token number">246</span>     <span class="token comment">/* 接收报文清零 */</span>
<span class="token number">247</span>     <span class="token function">memset</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>RxMessage<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>CanRxMsg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">248</span>    
<span class="token number">249</span>     <span class="token comment">/* 通过can_read接口读取寄存器已经接收到的报文 */</span>
<span class="token number">250</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_read</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>RxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">251</span> 
<span class="token number">252</span>     <span class="token comment">/* 将读取到的CAN报文存拷贝到全局报文结构体g_CAN1_Rx_Message */</span>
<span class="token number">253</span>     <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_CAN1_Rx_Message<span class="token punctuation">,</span> <span class="token operator">&amp;</span>RxMessage<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> CanRxMsg <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">254</span>     
<span class="token number">255</span>     <span class="token comment">/* 设置当前接收完成标志，判断当前接收报文ID为RX_CAN_ID，则设置g_CAN1_Rx_Flag=1*/</span>
<span class="token number">256</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> g_CAN1_Rx_Message<span class="token punctuation">.</span>StdId <span class="token operator">==</span> RX_CAN_ID <span class="token punctuation">)</span>
<span class="token number">257</span>     <span class="token punctuation">{</span>
<span class="token number">258</span>         g_CAN1_Rx_Flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
<span class="token number">259</span>     <span class="token punctuation">}</span>
<span class="token number">260</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主线程中app_can_rx_test的接收触发处理函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">187</span> <span class="token comment">/**********************************************************************
188 * 函数名称： void app_can_rx_test(void)
189 * 功能描述： CAN应用层接收报文处理函数，用于处理中断函数中接收的报文
190 * 输入参数： 无
191 * 输出参数： 无
192 * 返 回 值： 无
193 * 修改日期             版本号        修改人           修改内容
194 * -----------------------------------------------
195 * 2020/05/13         V1.0             bert            创建
196 ***********************************************************************/</span>
<span class="token number">197</span> <span class="token keyword">void</span> <span class="token function">app_can_rx_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">198</span> <span class="token punctuation">{</span>
<span class="token number">199</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">200</span>     
<span class="token number">201</span>     <span class="token comment">/* 发送报文定义 */</span>
<span class="token number">202</span>     CanTxMsg TxMessage<span class="token punctuation">;</span>
<span class="token number">203</span>     
<span class="token number">204</span>     <span class="token comment">/* 发送报文中用一个字节来作为计数器 */</span>
<span class="token number">205</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> rx_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">206</span>     
<span class="token number">207</span>     
<span class="token number">208</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> g_CAN1_Rx_Flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">209</span>     <span class="token punctuation">{</span>
<span class="token number">210</span>         g_CAN1_Rx_Flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">211</span>         
<span class="token number">212</span>         <span class="token comment">/* 发送报文报文数据填充，此报文周期是1秒 */</span>
<span class="token number">213</span>         TxMessage<span class="token punctuation">.</span>StdId <span class="token operator">=</span> RX_TO_TX_CAN_ID<span class="token punctuation">;</span>	  <span class="token comment">/* 标准标识符为0x000~0x7FF */</span>
<span class="token number">214</span>         TxMessage<span class="token punctuation">.</span>ExtId <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>             <span class="token comment">/* 扩展标识符0x0000 */</span>
<span class="token number">215</span>         TxMessage<span class="token punctuation">.</span>IDE   <span class="token operator">=</span> CAN_ID_STD<span class="token punctuation">;</span>         <span class="token comment">/* 使用标准标识符 */</span>
<span class="token number">216</span>         TxMessage<span class="token punctuation">.</span>RTR   <span class="token operator">=</span> CAN_RTR_DATA<span class="token punctuation">;</span>       <span class="token comment">/* 设置为数据帧  */</span>
<span class="token number">217</span>         TxMessage<span class="token punctuation">.</span>DLC   <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>                  <span class="token comment">/* 数据长度, can报文规定最大的数据长度为8字节 */</span>
<span class="token number">218</span>         
<span class="token number">219</span>         <span class="token comment">/* 填充数据，此处可以根据实际应用填充 */</span>
<span class="token number">220</span>         TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> rx_counter<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment">/* 用来识别报文发送计数器 */</span>
<span class="token number">221</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>TxMessage<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">222</span>         <span class="token punctuation">{</span>
<span class="token number">223</span>             TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> g_CAN1_Rx_Message<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            
<span class="token number">224</span>         <span class="token punctuation">}</span>
<span class="token number">225</span>         
<span class="token number">226</span>         <span class="token comment">/*  调用can_write发送CAN报文 */</span>
<span class="token number">227</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">228</span>     <span class="token punctuation">}</span>
<span class="token number">229</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>14.4.5.3</strong> <strong>案例测试验证</strong></p><p><strong>（1）编写Makfile</strong></p><p>Makefile文件容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>all<span class="token operator">:</span>

   arm<span class="token operator">-</span>linux<span class="token operator">-</span>gnueabihf<span class="token operator">-</span>gcc <span class="token operator">-</span>lpthread <span class="token operator">-</span>o socketcan_recv_send  can_controller<span class="token punctuation">.</span>c app_can<span class="token punctuation">.</span>c

clean<span class="token operator">:</span>

   rm socketcan_recv_send
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）编译socket_recv_send</strong></p><p>注意：编译是在100ask-vmware_ubuntu18.04虚拟机环境中。</p><p>进入ubuntu虚拟机对应的socket_send目录下，执行make all进行编译。</p><p>编译过程如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0029.png" alt=""></p><p><strong>（3）运行socket_recv_send</strong></p><p>注意：运行在100ask_imx6开发板上运行。</p><p>此处使用的是nfs文件进行运行。</p><p>Nfs挂载，请参考“14.4,3.3 案例测试验证”。</p><p>在100ask_imx6开发板环境下，执行“./socket_recv_send”,运行程序；</p><p>然后通过Vhicle Spy3向100ask_imx6开发板CAN端发送报文ID未0x201的报文，报文trace如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0030.png" alt=""></p><p>然后观察100ask_imx6开发串口打印信息如下：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0028.png" alt=""></p><p><strong>（4）测试总结</strong></p><p>到此为止，我们已经调试成功了CAN报文接收和发送的功能编程。</p><h2 id="_14-5-汽车行业can总线应用" tabindex="-1"><a class="header-anchor" href="#_14-5-汽车行业can总线应用" aria-hidden="true">#</a> <strong>14.5</strong> <strong>汽车行业CAN总线应用</strong></h2><h3 id="_14-5-1-车厂can总线需求" tabindex="-1"><a class="header-anchor" href="#_14-5-1-车厂can总线需求" aria-hidden="true">#</a> <strong>14.5.1</strong> <strong>车厂CAN总线需求</strong></h3><p>CAN总线应用最广泛的应该是汽车领域，几乎所有的车均支持CAN总线，在这里就简单介绍一些汽车相关的CAN总线需求。</p><h4 id="_14-5-1-1-网络拓扑结构" tabindex="-1"><a class="header-anchor" href="#_14-5-1-1-网络拓扑结构" aria-hidden="true">#</a> <strong>14.5.1.1</strong> <strong>网络拓扑结构</strong></h4><p>下面这张网络拓扑图和我开发过的大部分实际车辆拓扑大致一致。一般是汽车厂商提供给零部件供应商的。</p><p>如下图所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0032.png" alt="图14.5.1 整车网络拓扑"></p><p>一般车身网络分为如下6个局域CAN网络：</p><table><thead><tr><th>车辆拓扑分组</th><th>描述</th></tr></thead><tbody><tr><td>PT CAN <br>(PowerTrain CAN ) <br>动力总成CAN总线</td><td>主要负责车辆动力相关的ECU组网，是整车要求传输速率最高的一路CAN网络；<br> 一般包括如下相关ECU单元： <br> ECM(Engine Control Module）发动机控制模块； <br> SRS ( SupplementalRestraintSystem) 电子安全气囊 <br> BMS ( Battery Management System ) 电池管理系统 <br>EPB Electronic Park Brake, 电子驻车系统</td></tr><tr><td>CH CAN <br>(Chassis CAN) <br>底盘控制CAN总线</td><td>CH CAN负责汽车底盘及4个轮子的制动/稳定/转向，由于涉及整车制动/助力转向等, <br>所以其网络信号优先级也是较高的。 <br>一般包括如下相关ECU单元： <br>ABS ( Antilock Brake System ) 防抱死制动系统 <br> ESP(Electronic Stability Program)车身电子稳定系统 <br>EPS(Electric Power Steering)电子转向助力</td></tr><tr><td>Body CAN <br>车身控制总线</td><td>Body CAN负责车身上的一些提高舒适性/安全性的智能硬件的管理与控制，其网络信<br>号优先级较低, 因为以上设备都是辅助设备。 <br>一般包括如下相关ECU单元： <br>AC ( Air Condition ) 空调 <br>AVM(Around View Monitor) 360环视 <br>BCM(Body Control Module) 天窗, 车窗, 雾灯, 转向灯, 雨刮… <br>IMMO(Immobilizer) 发动机防盗系统 <br>TPMS(Tire Pressure Monitoring System) 胎压监控系统</td></tr><tr><td>Info CAN <br><br> ( Infomercial CAN ) <br>娱乐系统总线</td><td>Info CAN是辅助可选设备, 所以优先级也是较低的，主要负责车身上的一些提高娱乐性的智能硬件的管理与控制。 <br>一般包括如下相关ECU单元： <br>VAES( Video Audio Entertainment System) 车载娱乐系统(中控) <br>IP(Instrument Pack) 组合仪表, 当今的数字仪表, 基本有音乐, 地图, 通话等娱乐功能.</td></tr><tr><td>DiagCAN ( Diagnose CAN ) 诊断控制总线</td><td>DiagCAN总线主要提供远程诊断功能，只有一个ECU: <br> Tbox(Telematics BOX) 远程控制模块</td></tr><tr><td>OBD CAN</td><td>OBD一般是提供外接诊断仪，基本是接在整车网关ECU上。</td></tr></tbody></table><h4 id="_14-5-1-2-can-报文分类" tabindex="-1"><a class="header-anchor" href="#_14-5-1-2-can-报文分类" aria-hidden="true">#</a> <strong>14.5.1.2 CAN 报文分类</strong></h4><p>在汽车CAN网络里面，CAN报文主要分为三种：应用报文，网络报文，和诊断报文。</p><p>不论是网络报文，还是诊断报文，均是按照不同的功能需求划分的，根据不同的需求，制定CAN报文数据的不同协议。</p><p><strong>（1）CAN应用报文</strong></p><p>CAN应用报文，主要用于车身网络中不同ECU节点之间的数据信息的发送和接收，与具体应用功能相关；</p><p>汽车CAN应用报文，由车厂进行定义和发布“信号矩阵表（excel格式）”和“信号矩阵（DBC格式）”。</p><p>详见“14.5.2 CAN应用报文应用分析及实例”。</p><p><strong>（2）CAN网络管理报文</strong></p><p>汽车电子系统通过车载网络对所有的ECU 进行配置管理和协调工作的过程称之为网络管理。</p><p>网络管理可以通过对于网络上的各个 ECU 的控制，发出一些命令规则，实现各个 ECU 的协同睡眠和唤醒，用于协同控制的CAN报文，就是网络管理报文。</p><p>网络管理有OSEK网络管理和AUTOSAR网络管理两种。一般前装车厂项目才会要求支持网络管理。</p><p><strong>（3）CAN诊断报文</strong></p><p>CAN诊断主要是是实现车辆的功能监控，故障检测，记录/存储故障信息，存储/读取数据，还有EOL下线检测，ECU升级等功能。</p><p>基于CAN的通信分层模型：</p><table><thead><tr><th>OSI分层</th><th>车厂诊断标准</th><th>OBD标准</th></tr></thead><tbody><tr><td>诊断应用</td><td>用户定义</td><td>ISO15031-5</td></tr><tr><td>应用层</td><td>ISO15765-3 / ISO14229-1</td><td>ISO15031-5</td></tr><tr><td>表示层</td><td>无</td><td>无</td></tr><tr><td>会话层</td><td>ISO15765-3</td><td>ISO15765-4</td></tr><tr><td>传输层</td><td>无</td><td>无</td></tr><tr><td>网络层</td><td>ISO15765-2</td><td>ISO15765-4</td></tr><tr><td>数据链路层</td><td>ISO11898-1</td><td>ISO15765-4</td></tr><tr><td>物理层</td><td>用户定义</td><td>ISO15765-4</td></tr></tbody></table><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0034.png" alt="图 CAN诊断服务OSI模型"></p><h3 id="_14-5-2-can-应用报文应用分析及实例" tabindex="-1"><a class="header-anchor" href="#_14-5-2-can-应用报文应用分析及实例" aria-hidden="true">#</a> <strong>14.5.2 CAN 应用报文应用分析及实例</strong></h3><h4 id="_14-5-2-1-can-应用报文定义" tabindex="-1"><a class="header-anchor" href="#_14-5-2-1-can-应用报文定义" aria-hidden="true">#</a> <strong>14.5.2.1 CAN 应用报文定义</strong></h4><p>当一个车厂项目启动之后，根据项目的需求，车厂会提供CAN信号矩阵（excel），和DBC信号矩阵数据库。</p><p><strong>（1）CAN信号矩阵-excel格式</strong></p><p>车厂提供的信号矩阵（excel）的文件格式，详见第14章代码目录：CAN_Signal_Matrix.xlsx，</p><p>从CAN_Signal_Matrix.xlsx中截取报文定义，如下所示：</p><p>ECU_TX_MSG1: (周期发送报文，ID：0x123）</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0035.png" alt=""></p><p>ECU_TX_MSG2: (事件发送报文，ID：0x124）</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0036.png" alt=""></p><p>ECU_TX_MSG3: (周期&amp;事件发送报文，ID：0x125）</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0037.png" alt=""></p><p>ECU_RX_MSG1:(事件接收报文，ID: 0X201)</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0038.png" alt=""></p><p>​ 从上报文定义可以看出，车厂会定义报文的很多属性，如报文名称，报文ID,报文长度, 报文周期，报文发送类型， 以及报文中的信号名称，信号起始字节，信号长度，排列格式（Intel或Motorala），信号的取值范围，信号的发送方式等等。</p><p>（2）CAN信号矩阵-DBC</p><p>本章提供的示例CAN矩阵“CAN_Signal_Matrix.xlsx”对应的DBC文件，该DBC文件使用vector CANdb+ Editor编辑；如下图所示为DBC文件所显示的报文信息内容，和excel表格所展示内容是一致的，文件格式不是最关键的，只要理解车厂对CAN信号的要求即可。</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0039.png" alt="图 CAN信号矩阵DBC"></p><h4 id="_14-5-2-2-can应用报文发送规则" tabindex="-1"><a class="header-anchor" href="#_14-5-2-2-can应用报文发送规则" aria-hidden="true">#</a> 14.5.2.2 CAN应用报文发送规则</h4><p>​ 我们提到车厂会提供CAN信号矩阵表，会定义周期报文，事件报文，周期事件混合报文，那么定义这些信号的通用规则在哪里？一般车厂会提供关于CAN总线的通信规范，车厂根据通信规范才定义出CAN信号矩阵。</p><p>​ 下面是某车厂的通信规范《XXX Communication Requirement Specification.pdf》，其规范目录如下图所示，从目录可以看出，主要介绍CAN物理层，数据链路层，通信交互层等相关规则。</p><p>​ 本小节，我们主要介绍应用报文相关的通信交互层“4 Interaction Layer”相关的内容：CAN报文发送类型（Message Send Type）。</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0040.png" alt=""></p><p>CAN报文发送类型按照之前矩阵表展示的逐一介绍如下：</p><p><strong>（1）周期型报文（Cyclic Message）</strong></p><p>周期报文，即为周期定时发送，周期为T。</p><p>如下图所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0042.png" alt=""></p><p>当系统运行后，ECU就按照周期T定时发送CAN报文。</p><p><strong>（2）事件型报文（Event Message）</strong></p><p>触发事件时发送事件型消息，如下图所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0043.png" alt=""></p><p>当系统运行后，ECU并不主动发送事件型报文，而是当ECU被某一条件触发（Event），则ECU会连续发送三帧事件报文。</p><p>当然车厂要求不仅仅如此，车厂还会有更多其他要求，</p><p>比如，</p><p>要求1,：触发发送三帧报文后，要求信号恢复为默认值；</p><p>要求2：触发发送三帧，帧与帧间间隔要求50ms;</p><p><strong>（3）周期事件型报文（Cyclic And Event Message）</strong></p><p>​ 周期事件混合型报文（简称CE），当无事件触发的情况下，按照周期T定时发送报文，当有事件触发的情况下，按照event事件触发方式发送报文。</p><p>如下图所示：</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0044.png" alt=""></p><p>实际车厂定义的CAN报文发送类型并不仅仅是上面三种，但是这三种是最重要的发送方式。</p><h4 id="_14-5-2-3-汽车can应用报文发送应用实例" tabindex="-1"><a class="header-anchor" href="#_14-5-2-3-汽车can应用报文发送应用实例" aria-hidden="true">#</a> 14.5.2.3 汽车CAN应用报文发送应用实例</h4><p>通过上一小节的描述，我们已经了解了车厂规范中三个应用报文发送类型，现在我们就开始在100ask_imx6开发板上进行试验，实现车厂应用报文的需求。</p><p>关于linux socketcan的应用编程框架我们已经在“14.4 linux socketcan基础应用编程”详细讲解了，我们现在就基于“14.4.5 socketcan接收和发送实例”进行本章案例应用编程，重点侧重于app_can.c编程，can_controller.c可以完全沿用。</p><p>以下应用编程，我们使用14.5.2.1中介绍的CAN报文矩阵中的CAN报文。</p><p><strong>（1）linux can编程框架准备</strong></p><p>使用案例“04_socketcan_recv_send”代码，复制文件夹改名为“06_socketcan_ecu_application”。</p><p>在app_can.c文件中定义报文ID:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">30</span> <span class="token comment">/**************宏定义**************************************************/</span>
<span class="token number">31</span> <span class="token comment">/* 本例程中测试周期发送的CAN报文ID */</span>
<span class="token number">32</span> #define TX_CAN_CYCLIC_ID    <span class="token number">0X123</span>
<span class="token number">33</span> #define TX_CAN_EVENT_ID     <span class="token number">0X124</span>
<span class="token number">34</span> #define TX_CAN_CE_ID        <span class="token number">0X125</span>
<span class="token number">35</span> 
<span class="token number">36</span> <span class="token comment">/* 本例程中测试接收的CAN报文ID */</span>
<span class="token number">37</span> #define RX_CAN_ID           <span class="token number">0x201</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）周期型报文实现</strong></p><p>实现功能：</p><p>A.编程实现周期发送报文ID:0x123， 周期T为1000ms。</p><p>代码实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">136</span> <span class="token comment">/**********************************************************************
137 * 函数名称： void app_can_cyclicmsg_test(void)
138 * 功能描述： CAN应用层测试发送周期型报文(ID:0X123)
139 * 输入参数： 无
140 * 输出参数： 无
141 * 返 回 值： 无
142 * 修改日期             版本号        修改人           修改内容
143 * -----------------------------------------------
144 * 2020/05/13         V1.0             bert            创建
145 ***********************************************************************/</span>
<span class="token number">146</span> <span class="token keyword">void</span> <span class="token function">app_can_cyclicmsg_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">147</span> <span class="token punctuation">{</span>
<span class="token number">148</span>     <span class="token comment">// 以10ms为基准，运行CAN测试程序</span>
<span class="token number">149</span>     
<span class="token number">150</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">151</span>     
<span class="token number">152</span>     <span class="token comment">/* 发送报文定义 */</span>
<span class="token number">153</span>     CanTxMsg TxMessage<span class="token punctuation">;</span>
<span class="token number">154</span>     
<span class="token number">155</span>     <span class="token comment">/* 发送报文中用一个字节来作为计数器 */</span>
<span class="token number">156</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tx_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">157</span>     
<span class="token number">158</span>     <span class="token comment">/* 以10ms为基准，通过timer计数器设置该处理函数后面运行代码的周期为1秒钟*/</span>  
<span class="token number">159</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timer <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">160</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token number">161</span>     <span class="token punctuation">{</span>
<span class="token number">162</span>         timer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">163</span>     <span class="token punctuation">}</span>
<span class="token number">164</span>     <span class="token keyword">else</span>
<span class="token number">165</span>     <span class="token punctuation">{</span>
<span class="token number">166</span>         <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token number">167</span>     <span class="token punctuation">}</span>
<span class="token number">168</span>     
<span class="token number">169</span>     <span class="token comment">/* 发送报文报文数据填充，此报文周期是1秒 */</span>
<span class="token number">170</span>     TxMessage<span class="token punctuation">.</span>StdId <span class="token operator">=</span> TX_CAN_CYCLIC_ID<span class="token punctuation">;</span>	  <span class="token comment">/* 标准标识符为0x000~0x7FF */</span>
<span class="token number">171</span>     TxMessage<span class="token punctuation">.</span>ExtId <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>             <span class="token comment">/* 扩展标识符0x0000 */</span>
<span class="token number">172</span>     TxMessage<span class="token punctuation">.</span>IDE   <span class="token operator">=</span> CAN_ID_STD<span class="token punctuation">;</span>         <span class="token comment">/* 使用标准标识符 */</span>
<span class="token number">173</span>     TxMessage<span class="token punctuation">.</span>RTR   <span class="token operator">=</span> CAN_RTR_DATA<span class="token punctuation">;</span>       <span class="token comment">/* 设置为数据帧  */</span>
<span class="token number">174</span>     TxMessage<span class="token punctuation">.</span>DLC   <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>                  <span class="token comment">/* 数据长度, can报文规定最大的数据长度为8字节 */</span>
<span class="token number">175</span>     
<span class="token number">176</span>     <span class="token comment">/* 填充数据，此处可以根据实际应用填充 */</span>
<span class="token number">177</span>     TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tx_counter<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token comment">/* 用来识别报文发送计数器 */</span>
<span class="token number">178</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>TxMessage<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">179</span>     <span class="token punctuation">{</span>
<span class="token number">180</span>         TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            
<span class="token number">181</span>     <span class="token punctuation">}</span>
<span class="token number">182</span>     
<span class="token number">183</span>     <span class="token comment">/*  调用can_write发送CAN报文 */</span>
<span class="token number">184</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">185</span>     
<span class="token number">186</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）事件型报文实现</strong></p><p>实现功能：</p><p>A. 编程实现当接收到一帧报文（ID：0x201）的信号ECU_RX_MSG1_signal1=1时，触发发送事件型报文（ID:0x124），让ECU_MSG2_signal2（Byte1字节）=2 且两帧报文间时间间隔为50ms。</p><p>B. 事件触发条件：接收到报文(ID:0x201)，且ECU_RX_MSG1_signal1（Byte0字节bit0）为1</p><p>代码实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">188</span> <span class="token comment">/**********************************************************************
189 * 函数名称： void app_can_eventmsg_test(void)
190 * 功能描述： CAN应用层测试发送事件型报文(ID:0X124)
191 * 输入参数： 无
192 * 输出参数： 无
193 * 返 回 值： 无
194 * 修改日期             版本号        修改人           修改内容
195 * -----------------------------------------------
196 * 2020/05/13         V1.0             bert            创建
197 ***********************************************************************/</span>
<span class="token number">198</span> <span class="token keyword">void</span> <span class="token function">app_can_eventmsg_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">199</span> <span class="token punctuation">{</span>
<span class="token number">200</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">201</span> 
<span class="token number">202</span>     <span class="token comment">/* 发送报文中用一个字节来作为事件触发计数器 */</span>
<span class="token number">203</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tx_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">204</span> 
<span class="token number">205</span>     <span class="token comment">/* 发送报文定义 */</span>
<span class="token number">206</span>     CanTxMsg TxMessage<span class="token punctuation">;</span>
<span class="token number">207</span> 
<span class="token number">208</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> g_CAN1_Rx_Event_Flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>
<span class="token number">209</span>     <span class="token punctuation">{</span>
<span class="token number">210</span> 	g_CAN1_Rx_Event_Flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">211</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Message:0x124 is Triggered!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">212</span> 
<span class="token number">213</span>         <span class="token comment">/* 发送报文报文数据填充，此报文周期是1秒 */</span>
<span class="token number">214</span>         TxMessage<span class="token punctuation">.</span>StdId <span class="token operator">=</span> TX_CAN_EVENT_ID<span class="token punctuation">;</span>	  <span class="token comment">/* 标准标识符为0x000~0x7FF */</span>
<span class="token number">215</span>         TxMessage<span class="token punctuation">.</span>ExtId <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>             <span class="token comment">/* 扩展标识符0x0000 */</span>
<span class="token number">216</span>         TxMessage<span class="token punctuation">.</span>IDE   <span class="token operator">=</span> CAN_ID_STD<span class="token punctuation">;</span>         <span class="token comment">/* 使用标准标识符 */</span>
<span class="token number">217</span>         TxMessage<span class="token punctuation">.</span>RTR   <span class="token operator">=</span> CAN_RTR_DATA<span class="token punctuation">;</span>       <span class="token comment">/* 设置为数据帧  */</span>
<span class="token number">218</span>         TxMessage<span class="token punctuation">.</span>DLC   <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>                  <span class="token comment">/* 数据长度, can报文规定最大的数据长度为8字节 */</span>
<span class="token number">219</span>         
<span class="token number">220</span>         <span class="token comment">/* 填充数据，此处可以根据实际应用填充 */</span>
<span class="token number">221</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>TxMessage<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">222</span>         <span class="token punctuation">{</span>
<span class="token number">223</span>             TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>            
<span class="token number">224</span>         <span class="token punctuation">}</span>
<span class="token number">225</span>         <span class="token comment">/* 填充数据，此处可以根据实际应用填充 */</span>
<span class="token number">226</span> 	tx_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">227</span> 	
<span class="token number">228</span> 	<span class="token comment">/*更新第1帧数据*/</span>
<span class="token number">229</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>
<span class="token number">230</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>tx_counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">231</span>         <span class="token comment">/*  调用can_write发送CAN报文，第1帧 */</span>
<span class="token number">232</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">233</span> 	<span class="token comment">/*延时50ms,作为事件报文间隔*/</span>
<span class="token number">234</span> 	<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">235</span> 
<span class="token number">236</span> 	<span class="token comment">/*更新第2帧数据*/</span>
<span class="token number">237</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>
<span class="token number">238</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>tx_counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">239</span> 	<span class="token comment">/*  调用can_write发送CAN报文，第2帧 */</span>
<span class="token number">240</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">241</span> 	<span class="token comment">/*延时50ms,作为事件报文间隔*/</span>
<span class="token number">242</span> 	<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">243</span> 
<span class="token number">244</span> 	<span class="token comment">/*更新第3帧数据*/</span>
<span class="token number">245</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>
<span class="token number">246</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>tx_counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">247</span> 	<span class="token comment">/*  调用can_write发送CAN报文，第3帧 */</span>
<span class="token number">248</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">249</span> 	<span class="token comment">/*延时50ms,作为事件报文间隔*/</span>
<span class="token number">250</span> 	<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">251</span>     <span class="token punctuation">}</span>
<span class="token number">252</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）周期事件型报文实现</strong></p><p>实现功能：</p><p>A. 编程实现周期发送报文（ID：0x125）；</p><p>B. 而当接收到一帧报文（ID：0x201）的信号ECU_RX_MSG1_signal2=1时，触发发送周期事件型报文（ID:0x125）， 让ECU_MSG3_signal9（Byte1字节bit0）=1，且连续发送三帧，且两帧报文间时间间隔为50ms，三帧发送完成后恢复成ECU_MSG3_signal5=0；</p><p>A. 事件触发条件：接收到报文(ID:0x201)，且ECU_RX_MSG1_signal2（Byte0字节bit1）为1</p><p>代码实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">255</span> <span class="token comment">/**********************************************************************
256 * 函数名称： void app_can_cycliceventmsg_test(void)
257 * 功能描述： CAN应用层测试发送周期事件混合报文(ID:0X125)
258 * 输入参数： 无
259 * 输出参数： 无
260 * 返 回 值： 无
261 * 修改日期             版本号        修改人           修改内容
262 * -----------------------------------------------
263 * 2020/05/13         V1.0             bert            创建
264 ***********************************************************************/</span>
<span class="token number">265</span> <span class="token keyword">void</span> <span class="token function">app_can_cycliceventmsg_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">266</span> <span class="token punctuation">{</span>
<span class="token number">267</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">268</span>     
<span class="token number">269</span>     <span class="token comment">/* 发送报文定义 */</span>
<span class="token number">270</span>     CanTxMsg TxMessage<span class="token punctuation">;</span>
<span class="token number">271</span>     
<span class="token number">272</span>     <span class="token comment">/* 发送报文中用一个字节来作为事件触发计数器 */</span>
<span class="token number">273</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tx_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">274</span> 
<span class="token number">275</span>     <span class="token comment">/* 以10ms为基准，通过timer计数器设置该处理函数后面运行代码的周期为1秒钟*/</span>  
<span class="token number">276</span>     <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timer <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">277</span> 
<span class="token number">278</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> g_CAN1_Rx_CE_Flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">279</span>     <span class="token punctuation">{</span>
<span class="token number">280</span> 	g_CAN1_Rx_CE_Flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">281</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Message:0x125 is Triggered!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">282</span> 
<span class="token number">283</span> 	<span class="token comment">/* 发送报文报文数据填充，此报文周期是1秒 */</span>
<span class="token number">284</span>         TxMessage<span class="token punctuation">.</span>StdId <span class="token operator">=</span> TX_CAN_CE_ID<span class="token punctuation">;</span>	     <span class="token comment">/* 标准标识符为0x000~0x7FF */</span>
<span class="token number">285</span>         TxMessage<span class="token punctuation">.</span>ExtId <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>             <span class="token comment">/* 扩展标识符0x0000 */</span>
<span class="token number">286</span>         TxMessage<span class="token punctuation">.</span>IDE   <span class="token operator">=</span> CAN_ID_STD<span class="token punctuation">;</span>         <span class="token comment">/* 使用标准标识符 */</span>
<span class="token number">287</span>         TxMessage<span class="token punctuation">.</span>RTR   <span class="token operator">=</span> CAN_RTR_DATA<span class="token punctuation">;</span>       <span class="token comment">/* 设置为数据帧  */</span>
<span class="token number">288</span>         TxMessage<span class="token punctuation">.</span>DLC   <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>                  <span class="token comment">/* 数据长度, can报文规定最大的数据长度为8字节 */</span>
<span class="token number">289</span>         
<span class="token number">290</span>         <span class="token comment">/* 清零数据区 */</span>
<span class="token number">291</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>TxMessage<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">292</span>         <span class="token punctuation">{</span>
<span class="token number">293</span>             TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>            
<span class="token number">294</span>         <span class="token punctuation">}</span>
<span class="token number">295</span> 	<span class="token comment">/* 填充数据，此处可以根据实际应用填充 */</span>
<span class="token number">296</span> 	tx_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">297</span> 
<span class="token number">298</span>         <span class="token comment">/*更新第1帧数据*/</span>
<span class="token number">299</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
<span class="token number">300</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>tx_counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">301</span>         <span class="token comment">/*  调用can_write发送CAN报文，第1帧 */</span>
<span class="token number">302</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">303</span> 	<span class="token comment">/*延时50ms,作为事件报文间隔*/</span>
<span class="token number">304</span> 	<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">305</span> 
<span class="token number">306</span> 	<span class="token comment">/*更新第2帧数据*/</span>
<span class="token number">307</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
<span class="token number">308</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>tx_counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">309</span> 	<span class="token comment">/*  调用can_write发送CAN报文，第2帧 */</span>
<span class="token number">310</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">311</span> 	<span class="token comment">/*延时50ms,作为事件报文间隔*/</span>
<span class="token number">312</span> 	<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">313</span> 
<span class="token number">314</span> 	<span class="token comment">/*更新第3帧数据*/</span>
<span class="token number">315</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
<span class="token number">316</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>tx_counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">317</span> 	<span class="token comment">/*  调用can_write发送CAN报文，第3帧 */</span>
<span class="token number">318</span>         gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">319</span> 	<span class="token comment">/*延时50ms,作为事件报文间隔*/</span>
<span class="token number">320</span> 	<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">321</span>     <span class="token punctuation">}</span>
<span class="token number">322</span> 
<span class="token number">323</span>     <span class="token comment">/* 以10ms为基准，通过timer计数器设置该处理函数后面运行代码的周期为1秒钟*/</span>  
<span class="token number">324</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token number">325</span>     <span class="token punctuation">{</span>
<span class="token number">326</span>         timer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">327</span>     <span class="token punctuation">}</span>
<span class="token number">328</span>     <span class="token keyword">else</span>
<span class="token number">329</span>     <span class="token punctuation">{</span>
<span class="token number">330</span>         <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token number">331</span>     <span class="token punctuation">}</span>
<span class="token number">332</span> 
<span class="token number">333</span>     <span class="token comment">/* 发送报文报文数据填充，此报文周期是1秒 */</span>
<span class="token number">334</span>     TxMessage<span class="token punctuation">.</span>StdId <span class="token operator">=</span> TX_CAN_CE_ID<span class="token punctuation">;</span>	  <span class="token comment">/* 标准标识符为0x000~0x7FF */</span>
<span class="token number">335</span>     TxMessage<span class="token punctuation">.</span>ExtId <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>             <span class="token comment">/* 扩展标识符0x0000 */</span>
<span class="token number">336</span>     TxMessage<span class="token punctuation">.</span>IDE   <span class="token operator">=</span> CAN_ID_STD<span class="token punctuation">;</span>         <span class="token comment">/* 使用标准标识符 */</span>
<span class="token number">337</span>     TxMessage<span class="token punctuation">.</span>RTR   <span class="token operator">=</span> CAN_RTR_DATA<span class="token punctuation">;</span>       <span class="token comment">/* 设置为数据帧  */</span>
<span class="token number">338</span>     TxMessage<span class="token punctuation">.</span>DLC   <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>                  <span class="token comment">/* 数据长度, can报文规定最大的数据长度为8字节 */</span>
<span class="token number">339</span>         
<span class="token number">340</span>     <span class="token comment">/* 填充数据，此处可以根据实际应用填充 */</span>
<span class="token number">341</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>TxMessage<span class="token punctuation">.</span>DLC<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">342</span>     <span class="token punctuation">{</span>
<span class="token number">343</span> 	TxMessage<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>            
<span class="token number">344</span>     <span class="token punctuation">}</span>
<span class="token number">345</span>      
<span class="token number">346</span>     <span class="token comment">/*  调用can_write发送CAN报文 */</span>
<span class="token number">347</span>     gCAN_COMM_STRUCT<span class="token punctuation">.</span><span class="token function">can_write</span><span class="token punctuation">(</span>gCAN_COMM_STRUCT<span class="token punctuation">.</span>can_port<span class="token punctuation">,</span> TxMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">348</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）案例测试</strong></p><p><strong>第一步：测试周期报文</strong></p><p>运行socket_ecu_test，串口打印信息如下所示： <img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0031.png" alt=""></p><p>然后观察Vehicle Spy3软件获取的报文trace，如下所示： 报文ID:0x123,0x125两个报文均以1000ms的周期发送报文；</p><p><img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0046.png" alt=""></p><p><strong>第二步：测试事件型报文</strong> 在Vehicle Spy3软件上Messages里面过滤出报文ID:0X201,0X124. 然后手动点击右侧的Tx Panel上的ID:0X201的报文，左侧Messages的记录为100ask_imx6开发板发出3帧ID:0x124的报文。 通过开发板串口打印信息看出：“Message:0x124 is Triggered!”,在这条打印信息之后，存在三帧ID:0x124的报文。 <img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0047.png" alt=""> 观察出左侧的Messages的trace如下图所示： <img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0048.png" alt=""><strong>第三步：测试周期事件型报文</strong> 在Vehicle Spy3软件上Messages里面过滤出报文ID:0X201,0X125. 然后手动点击右侧的Tx Panel上的ID:0X201的报文，左侧Messages的记录为100ask_imx6开发板发出3帧ID:0x125的报文，但是报文数据与默认数据不同，数据内容Byte7依次为0x01,0x02,0x03。 通过开发板串口打印信息看出：“Message:0x125 is Triggered!”,在这条打印信息之后，存在三帧ID:0x124的报文。 <img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0049.png" alt=""> 观察出左侧的Messages的trace如下图所示： ID:0X125正常情况下以1000ms的周期发送默认报文，当ID:201的报文触发事件，引起ID:0X125发送事件报文。 <strong>（5）事件报文发送改进</strong> 通过前面步骤，我们已经了解应用报文的发送类型和实现不同发送类型的方式，但是上面事件处理有一个缺陷，就是当事件触发时，发送时通过ucsleep()函数实现的报文间隔，这个延时会使得周期报文的周期变长，这个可以通过观察CAN报文trace查找到。 这里对案例“06_socketcan_ecu_application”做了一个小小的改进，对触发事件的处理采用周期计数来实现，具体请查看案例代码“07_socketcan_ecu_application_new”。 <img src="http://photos.100ask.net/NewHomeSite/LinuxCan_Image0050.png" alt=""></p>`,351);function A(N,h){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[s("Setsockopt()用于任意类型、任意状态"),n("a",r,[s("套接口"),e(a)]),s("的设置选项值。尽管在不同协议层上存在选项，但本函数仅定义了最高的“套接口”层次上的选项。")]),d,n("table",null,[k,n("tbody",null,[m,v,n("tr",null,[n("td",null,[s("optval："),n("a",b,[s("指针"),e(a)]),s("，指向存放选项待设置的新值的"),n("a",_,[s("缓冲区"),e(a)]),s("。")])]),C])]),g])}const f=t(i,[["render",A],["__file","14_Linux_Can.html.vue"]]);export{f as default};
